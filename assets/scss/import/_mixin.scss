@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
/*
  linear gradient
  http://sassmeister.com/gist/b58f6e2cc3160007c880
  http://www.sitepoint.com/building-linear-gradient-mixin-sass/
  *
  * @include linear-gradient(yellow, blue);
  * @include linear-gradient(to top, red 0%, green 50%, orange 100%);
  * @include linear-gradient(45deg, orange 0%, pink 50%, green 50.01%, green 50.01%, violet 100%);
  *
*/

@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if list.index($convertable-units, math.unit($value)) and list.index($convertable-units, $unit) {
    @return $value
             / list.nth($conversion-factors, list.index($convertable-units, math.unit($value)))
             * list.nth($conversion-factors, list.index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{math.unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: list.index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: meta.type-of($value) == 'number' and list.index('deg' 'grad' 'turn' 'rad', math.unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map.has-key($conversion-map, $value) {
    @return map.get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: list.nth(list.nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
// https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)
//  https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_px-to-em.scss
@function em($pxval, $base: $em-base) {
  @if not math.is-unitless($pxval) {
    $pxval: call($strip-units($pxval));
  }
  @if not math.is-unitless($base) {
    $base: call($strip-units($base));
  }
  @return math.div($pxval, $base) * 1em;
}

/*
 * triangle generator
 * https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_triangle.scss
 * @include triangle(12px, gray, down);
 * @include triangle(12px 6px, gray lavender, up-left);
 * The $size argument can take one or two values—width height.
 * The $color argument can take one or two values—foreground-color background-color.
 * $direction: up, down, left, right, up-right, up-left, down-right, down-left
 * Check this https://docs.gerillass.com/docs/triangle/
*/
@mixin triangle($size, $color, $direction) {
  $width: list.nth($size, 1);
  $height: list.nth($size, list.length($size));
  $foreground-color: list.nth($color, 1);
  $background-color: if(list.length($color) == 2, list.nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(list.length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

/*
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname');
*/
@mixin fontface($font-family, $font-url, $font-name) {
  @font-face {
    font: {
      family: $font-family;
      style: normal;
      weight: normal;
      display: swap;
    }
    src: url($font-url + '/' + $font-name + '.eot');
    src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
       url($font-url + '/' + $font-name + '.woff') format('woff'),
       url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
       url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
  }
}

/*
  * 3d text
  * @include text3d(#0982c1);
  * http://forwebdev.ru/css/sass-vs-less-vs-stylus/
  * Check this - https://docs.gerillass.com/docs/text-shadow/
*/
@mixin text3d($color) {
  color: $color;
  text-shadow: 1px 1px 0 color.adjust($color, $lightness: -5%),
  2px 2px 0 color.adjust($color, $lightness: -10%),
  3px 3px 0 color.adjust($color, $lightness: -15%),
  4px 4px 0 color.adjust($color, $lightness: -20%),
  4px 4px 2px #000;
}

/*
* placeholder mixin
* https: //stackoverflow.com/questions/17181849/placeholder-mixin-scss-css
  input {
    @include placeholder {
      font-family: $font-family-base;
      color: red;
    }
  }
*/
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }
  &:-moz-placeholder {
    @content
  }
  &::-moz-placeholder {
    @content
  }
  &:-ms-input-placeholder {
    @content
  }
  &::placeholder {
    @content;
  }
}

/*
 * Generate a random hex or rgb color from rgb values.
  .element {
    background-color: random-color(50,150,0.75);
  }
*/
//@function random-color($min: 0, $max: 255, $alpha: 1) {
//  @if $min < 0 {
//    $min: -1;
//  } @else {
//    $min: $min - 1;
//  }
//  @if $max > 255 {
//    $max: 256;
//  } @else {
//    $max: $max + 1;
//  }
//
//  $red: random($max) + $min;
//  $green: random($max) + $min;
//  $blue: random($max) + $min;
//
//  @return rgba($red, $green, $blue, $alpha);
//}

/*
 * Loadify
 * Loadify Sass mixin is a handy tool that can help you make a page element load with a smooth fade-in effect during the time of page loadings.
 * https://docs.gerillass.com/docs/loadify/
 * @include loadify(init);
 * .loadify-img {
 *    @include loadify();
 *  }
 * $mode	string	Accepts init value. This initializes the whole effects for the selected elements. It must be called once at the root of your stylesheet document.
 * $delay	time	Specifies the amount of time a design element must wait before it starts appearing on the page. The default value is set to 0.2s.
 * $duration	time Sets the length of time that a page element takes to load. This is the second argument and always must be at the end and cannot be used alone. The deafult value is set to 0.5s.
 * https://github.com/selfishprimate/gerillass/blob/master/scss/utilities/_is-time.scss
*/
@function __isTime($value) {
  @for $i from 1 through length($value) {
    @if (type-of($value) == "number" and index("ms" "s", unit($value)) != null) or $value == 0 {
      @return $value;
    } @else {
      @error "'#{$value}' is not a valid time value. Time values must be specified in either seconds (s) or milliseconds (ms). Please try one of the following forms: '1s', '0.2s', or '3ms'";
    }
  }
}
@mixin loadify($params...) {
  @if not & {
    @if length($params) == 0 or (length($params) == 1 and nth($params, 1) == "init") {
      @keyframes loadify {
        to {
          opacity: 1;
          visibility: visible;
          backface-visibility: visible;
        }
      }
      %loadify {
        opacity: 0;
        visibility: hidden;
        backface-visibility: hidden;
        animation-name: loadify;
        animation-fill-mode: forwards;
      }
    } @else if (length($params) == 1 and nth($params, 1) != "init") or (length($params) == 1 and type-of(nth($params, 1)) != "string") {
      @error "#{nth($params, 1)} is not a valid argument. Please pass `init` as an argument to initialize the effect or do not pass any argument at all.";
    } @else if length($params) > 1 {
      @error "Only one argument is allowed when you call this mixin at the root of your stylesheet! Please pass `init` as an argument to initialize the effect or do not pass any argument at all.";
    }
  } @else if & {
    @extend %loadify;
    @if length($params) == 0 {
      animation-delay: 0.2s;
      animation-duration: 0.5s;
    } @else if length($params) == 1 {
      animation-delay: #{__isTime(nth($params, 1))};
      animation-duration: 0.5s;
    } @else if length($params) == 2 {
      animation-delay: #{__isTime(nth($params, 1))};
      animation-duration: #{__isTime(nth($params, 2))};
    } @else if length($params) > 2 {
      @error "You cannot pass more than two arguments.";
    }
  }
}
