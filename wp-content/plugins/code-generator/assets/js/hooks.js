var wpgHooks = [
{
    "text": "pre_trackback_post",
    "type": "action",
    "params_count": 6,
    "description": "Fires before the trackback is added to a post.",
    "params": [
        {
            "type": "int",
            "name": "$tb_id",
            "description": "Post ID related to the trackback."
        },
        {
            "type": "string",
            "name": "$tb_url",
            "description": "Trackback URL."
        },
        {
            "type": "string",
            "name": "$charset",
            "description": "Character Set."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "Trackback Title."
        },
        {
            "type": "string",
            "name": "$excerpt",
            "description": "Trackback Excerpt."
        },
        {
            "type": "string",
            "name": "$blog_name",
            "description": "Blog Name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 106,
        "name": "wp-trackback.php"
    }
},
{
    "text": "trackback_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a trackback is added to a post.",
    "params": [
        {
            "type": "int",
            "name": "$trackback_id",
            "description": "Trackback ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 144,
        "name": "wp-trackback.php"
    }
},
{
    "text": "link_category",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the OPML outline link category name.",
    "params": [
        {
            "type": "string",
            "name": "$catname",
            "description": "The OPML outline category name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 58,
        "name": "wp-links-opml.php"
    }
},
{
    "text": "link_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the OPML outline link title text.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "The OPML outline title text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 72,
        "name": "wp-links-opml.php"
    }
},
{
    "text": "opml_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires in the OPML header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 40,
        "name": "wp-links-opml.php"
    }
},
{
    "text": "signup_another_blog_init",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default site sign-up variables.",
    "params": [
        {
            "type": "array",
            "name": "$signup_defaults",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 303,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_create_blog_meta",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the new site meta variables.",
    "params": [
        {
            "type": "array",
            "name": "$blog_meta_defaults",
            "description": "An array of default blog meta variables."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 411,
        "name": "wp-signup.php"
    }
},
{
    "text": "add_signup_meta",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the new default site meta variables.",
    "params": [
        {
            "type": "array",
            "name": "$meta",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 425,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_user_init",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default user variables used on the user sign-up form.",
    "params": [
        {
            "type": "array",
            "name": "$signup_user_defaults",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 531,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_blog_init",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default site creation variables for the site sign-up form.",
    "params": [
        {
            "type": "array",
            "name": "$signup_blog_defaults",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 658,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_get_available_languages",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of available languages for front-end site signups.",
    "params": [
        {
            "type": "array",
            "name": "$available_languages",
            "description": "Available languages."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 800,
        "name": "wp-signup.php"
    }
},
{
    "text": "wpmu_active_signup",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the type of site sign-up.",
    "params": [
        {
            "type": "string",
            "name": "$active_signup",
            "description": "String that returns registration type. The value can be"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 822,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires within the head section of the site sign-up screen.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 28,
        "name": "wp-signup.php"
    }
},
{
    "text": "before_signup_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the Site Signup page is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 50,
        "name": "wp-signup.php"
    }
},
{
    "text": "before_signup_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the site sign-up form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 86,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_blogform",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the site sign-up form.",
    "params": [
        {
            "type": "WP_Error",
            "name": "$errors",
            "description": "A WP_Error object possibly containing 'blogname' or 'blog_title' errors."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 197,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_extra_fields",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the user registration form on the site sign-up form.",
    "params": [
        {
            "type": "WP_Error",
            "name": "$errors",
            "description": "A WP_Error object containing 'user_name' or 'user_email' errors."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 254,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_hidden_fields",
    "type": "action",
    "params_count": 1,
    "description": "Hidden sign-up form fields output when creating another site or user.",
    "params": [
        {
            "type": "string",
            "name": "$context",
            "description": "A string describing the steps of the sign-up process. The value can be"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 342,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_finished",
    "type": "action",
    "params_count": 0,
    "description": "Fires when the site or user sign-up process is complete.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 492,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_finished",
    "type": "action",
    "params_count": 0,
    "description": "Fires when the site or user sign-up process is complete.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 492,
        "name": "wp-signup.php"
    }
},
{
    "text": "signup_finished",
    "type": "action",
    "params_count": 0,
    "description": "Fires when the site or user sign-up process is complete.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 492,
        "name": "wp-signup.php"
    }
},
{
    "text": "preprocess_signup_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires when the site sign-up form is sent.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 886,
        "name": "wp-signup.php"
    }
},
{
    "text": "after_signup_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the sign-up forms, before wp_footer.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 922,
        "name": "wp-signup.php"
    }
},
{
    "text": "ms_loaded",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the current site and network have been detected and loaded",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 123,
        "name": "wp-includes\/ms-settings.php"
    }
},
{
    "text": "wp_http_cookie_value",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the header-encoded cookie value.",
    "params": [
        {
            "type": "string",
            "name": "$value",
            "description": "The cookie value."
        },
        {
            "type": "string",
            "name": "$name",
            "description": "The cookie name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 202,
        "name": "wp-includes\/class-wp-http-cookie.php"
    }
},
{
    "text": "customize_panel_active",
    "type": "filter",
    "params_count": 2,
    "description": "Filters response of WP_Customize_Panel::active().",
    "params": [
        {
            "type": "bool",
            "name": "$active",
            "description": "Whether the Customizer panel is active."
        },
        {
            "type": "WP_Customize_Panel",
            "name": "$panel",
            "description": "WP_Customize_Panel instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 184,
        "name": "wp-includes\/class-wp-customize-panel.php"
    }
},
{
    "text": "customize_render_panel",
    "type": "action",
    "params_count": 1,
    "description": "Fires before rendering a Customizer panel.",
    "params": [
        {
            "type": "WP_Customize_Panel",
            "name": "$this",
            "description": "WP_Customize_Panel instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 270,
        "name": "wp-includes\/class-wp-customize-panel.php"
    }
},
{
    "text": "register_post_type_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the arguments for registering a post type.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Array of arguments for registering a post type."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type key."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 376,
        "name": "wp-includes\/class-wp-post-type.php"
    }
},
{
    "text": "wp_print_footer_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Fires when footer scripts are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1430,
        "name": "wp-includes\/script-loader.php"
    }
},
{
    "text": "wp_enqueue_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Fires when scripts and styles are enqueued.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1447,
        "name": "wp-includes\/script-loader.php"
    }
},
{
    "text": "http_origin",
    "type": "filter",
    "params_count": 1,
    "description": "Change the origin of an HTTP request.",
    "params": [
        {
            "type": "string",
            "name": "$origin",
            "description": "The original origin for the request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 408,
        "name": "wp-includes\/http.php"
    }
},
{
    "text": "allowed_http_origins",
    "type": "filter",
    "params_count": 1,
    "description": "Change the origin types allowed for HTTP requests.",
    "params": [
        {
            "type": "array",
            "name": "$allowed_origins",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 443,
        "name": "wp-includes\/http.php"
    }
},
{
    "text": "allowed_http_origin",
    "type": "filter",
    "params_count": 2,
    "description": "Change the allowed HTTP origin result.",
    "params": [
        {
            "type": "string",
            "name": "$origin",
            "description": "Origin URL if allowed, empty string if not."
        },
        {
            "type": "string",
            "name": "$origin_arg",
            "description": "Original origin string passed into is_allowed_http_origin function."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 471,
        "name": "wp-includes\/http.php"
    }
},
{
    "text": "wp_mail",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the wp_mail() arguments.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "A compacted array of wp_mail() arguments, including the \"to\" email,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 184,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_mail_from",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the email address to send from.",
    "params": [
        {
            "type": "string",
            "name": "$from_email",
            "description": "Email address to send from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 345,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_mail_from_name",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the name to associate with the \"from\" email address.",
    "params": [
        {
            "type": "string",
            "name": "$from_name",
            "description": "Name associated with the \"from\" email address."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 354,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_mail_content_type",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the wp_mail() content type.",
    "params": [
        {
            "type": "string",
            "name": "$content_type",
            "description": "Default wp_mail() content type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 427,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_mail_charset",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default wp_mail() charset.",
    "params": [
        {
            "type": "string",
            "name": "$charset",
            "description": "Default email charset."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 448,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "authenticate",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether a set of user login credentials are valid.",
    "params": [
        {
            "type": "null|WP_User|WP_Error",
            "name": "$user",
            "description": "WP_User if the user is authenticated."
        },
        {
            "type": "string",
            "name": "$username",
            "description": "Username or email address."
        },
        {
            "type": "string",
            "name": "$password",
            "description": "User password"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 532,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the authentication cookie.",
    "params": [
        {
            "type": "string",
            "name": "$cookie",
            "description": "Authentication cookie."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "int",
            "name": "$expiration",
            "description": "The time the cookie expires as a UNIX timestamp."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'."
        },
        {
            "type": "string",
            "name": "$token",
            "description": "User's session token used."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 738,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie_expiration",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the duration of the authentication cookie expiration period.",
    "params": [
        {
            "type": "int",
            "name": "$length",
            "description": "Duration of the expiration period in seconds."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "bool",
            "name": "$remember",
            "description": "Whether to remember the user login. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 818,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "secure_auth_cookie",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the connection is secure.",
    "params": [
        {
            "type": "bool",
            "name": "$secure",
            "description": "Whether the connection is secure."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 846,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "secure_logged_in_cookie",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to use a secure cookie when logged-in.",
    "params": [
        {
            "type": "bool",
            "name": "$secure_logged_in_cookie",
            "description": "Whether to use a secure cookie when logged-in."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "bool",
            "name": "$secure",
            "description": "Whether the connection is secure."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 857,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "secure_auth_redirect",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to use a secure authentication redirect.",
    "params": [
        {
            "type": "bool",
            "name": "$secure",
            "description": "Whether to use a secure authentication redirect. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1009,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_redirect_scheme",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the authentication redirect scheme.",
    "params": [
        {
            "type": "string",
            "name": "$scheme",
            "description": "Authentication redirect scheme. Default empty."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1029,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_redirect",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the redirect location.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The path to redirect to."
        },
        {
            "type": "int",
            "name": "$status",
            "description": "Status code to use."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1199,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_redirect_status",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the redirect status code.",
    "params": [
        {
            "type": "int",
            "name": "$status",
            "description": "Status code to use."
        },
        {
            "type": "string",
            "name": "$location",
            "description": "The path to redirect to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1209,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_safe_redirect_fallback",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the redirect fallback URL for when the provided redirect is not safe (local).",
    "params": [
        {
            "type": "string",
            "name": "$fallback_url",
            "description": "The fallback URL to use by default."
        },
        {
            "type": "int",
            "name": "$status",
            "description": "The redirect status."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1303,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "allowed_redirect_hosts",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the whitelist of hosts to redirect to.",
    "params": [
        {
            "type": "array",
            "name": "$hosts",
            "description": "An array of allowed hosts."
        },
        {
            "type": "bool|string",
            "name": "$host",
            "description": "The parsed host; empty if not isset."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1367,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_notification_recipients",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of email addresses to receive a comment notification.",
    "params": [
        {
            "type": "array",
            "name": "$emails",
            "description": "An array of email addresses to receive a comment notification."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1415,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_notification_notify_author",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to notify comment authors of their comments on their own posts.",
    "params": [
        {
            "type": "bool",
            "name": "$notify",
            "description": "Whether to notify the post author of their own comment."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1438,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_notification_text",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment notification email text.",
    "params": [
        {
            "type": "string",
            "name": "$notify_message",
            "description": "The comment notification email text."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1544,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_notification_subject",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment notification email subject.",
    "params": [
        {
            "type": "string",
            "name": "$subject",
            "description": "The comment notification email subject."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1554,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_notification_headers",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment notification email headers.",
    "params": [
        {
            "type": "string",
            "name": "$message_headers",
            "description": "Headers for the comment notification email."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1564,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "notify_moderator",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to send the site moderator email notifications, overriding the site setting.",
    "params": [
        {
            "type": "bool",
            "name": "$maybe_notify",
            "description": "Whether to notify blog moderator."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The id of the comment for the notification."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1605,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_moderation_recipients",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of recipients for comment moderation emails.",
    "params": [
        {
            "type": "array",
            "name": "$emails",
            "description": "List of email addresses to notify for comment moderation."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1698,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_moderation_text",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment moderation email text.",
    "params": [
        {
            "type": "string",
            "name": "$notify_message",
            "description": "Text of the comment moderation email."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1708,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_moderation_subject",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment moderation email subject.",
    "params": [
        {
            "type": "string",
            "name": "$subject",
            "description": "Subject of the comment moderation email."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1718,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "comment_moderation_headers",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment moderation email headers.",
    "params": [
        {
            "type": "string",
            "name": "$message_headers",
            "description": "Headers for the comment moderation email."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1728,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_password_change_notification_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the contents of the password change notification email sent to the site admin.",
    "params": [
        {
            "type": "array",
            "name": "$wp_password_change_notification_email",
            "description": "{"
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object for user whose password was changed."
        },
        {
            "type": "string",
            "name": "$blogname",
            "description": "The site title."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1784,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_new_user_notification_email_admin",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the contents of the new user notification email sent to the site admin.",
    "params": [
        {
            "type": "array",
            "name": "$wp_new_user_notification_email",
            "description": "{"
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object for new user."
        },
        {
            "type": "string",
            "name": "$blogname",
            "description": "The site title."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1861,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_new_user_notification_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the contents of the new user notification email sent to the new user.",
    "params": [
        {
            "type": "array",
            "name": "$wp_new_user_notification_email",
            "description": "{"
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object for new user."
        },
        {
            "type": "string",
            "name": "$blogname",
            "description": "The site title."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1927,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "nonce_life",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the lifespan of nonces in seconds.",
    "params": [
        {
            "type": "int",
            "name": "$lifespan",
            "description": "Lifespan of nonces in seconds. Default 86,400 seconds, or one day."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1961,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "nonce_user_logged_out",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the user who generated the nonce is logged out.",
    "params": [
        {
            "type": "int",
            "name": "$uid",
            "description": "ID of the nonce-owning user."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "The nonce action."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1994,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "nonce_user_logged_out",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the user who generated the nonce is logged out.",
    "params": [
        {
            "type": "int",
            "name": "$uid",
            "description": "ID of the nonce-owning user."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "The nonce action."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1994,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "salt",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WordPress salt.",
    "params": [
        {
            "type": "string",
            "name": "$cached_salt",
            "description": "Cached salt for the given scheme."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Authentication scheme. Values include 'auth',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2107,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "salt",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WordPress salt.",
    "params": [
        {
            "type": "string",
            "name": "$cached_salt",
            "description": "Cached salt for the given scheme."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Authentication scheme. Values include 'auth',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2107,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "check_password",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether the plaintext password matches the encrypted password.",
    "params": [
        {
            "type": "bool",
            "name": "$check",
            "description": "Whether the passwords match."
        },
        {
            "type": "string",
            "name": "$password",
            "description": "The plaintext password."
        },
        {
            "type": "string",
            "name": "$hash",
            "description": "The hashed password."
        },
        {
            "type": "string|int",
            "name": "$user_id",
            "description": "User ID. Can be empty."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2255,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "check_password",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether the plaintext password matches the encrypted password.",
    "params": [
        {
            "type": "bool",
            "name": "$check",
            "description": "Whether the passwords match."
        },
        {
            "type": "string",
            "name": "$password",
            "description": "The plaintext password."
        },
        {
            "type": "string",
            "name": "$hash",
            "description": "The hashed password."
        },
        {
            "type": "string|int",
            "name": "$user_id",
            "description": "User ID. Can be empty."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2255,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "random_password",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the randomly-generated password.",
    "params": [
        {
            "type": "string",
            "name": "$password",
            "description": "The generated password."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2305,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "pre_get_avatar",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to retrieve the avatar URL early.",
    "params": [
        {
            "type": "string",
            "name": "$avatar",
            "description": "HTML for the user's avatar. Default null."
        },
        {
            "type": "mixed",
            "name": "$id_or_email",
            "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,"
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to get_avatar_url(), after processing."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2500,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "set_current_user",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the current user is set.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 47,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "phpmailer_init",
    "type": "action",
    "params_count": 1,
    "description": "Fires after PHPMailer is initialized.",
    "params": [
        {
            "type": "PHPMailer",
            "name": "$phpmailer",
            "description": "The PHPMailer instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 477,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_login_failed",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a user login has failed.",
    "params": [
        {
            "type": "string",
            "name": "$username",
            "description": "Username or email address."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 551,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_logout",
    "type": "action",
    "params_count": 0,
    "description": "Fires after a user is logged-out.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 573,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie_malformed",
    "type": "action",
    "params_count": 2,
    "description": "Fires if an authentication cookie is malformed.",
    "params": [
        {
            "type": "string",
            "name": "$cookie",
            "description": "Malformed auth cookie."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Authentication scheme. Values include 'auth', 'secure_auth',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 606,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie_expired",
    "type": "action",
    "params_count": 1,
    "description": "Fires once an authentication cookie has expired.",
    "params": [
        {
            "type": "array",
            "name": "$cookie_elements",
            "description": "An array of data for the authentication cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 630,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie_bad_username",
    "type": "action",
    "params_count": 1,
    "description": "Fires if a bad username is entered in the user authentication process.",
    "params": [
        {
            "type": "array",
            "name": "$cookie_elements",
            "description": "An array of data for the authentication cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 643,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie_bad_hash",
    "type": "action",
    "params_count": 1,
    "description": "Fires if a bad authentication cookie hash is encountered.",
    "params": [
        {
            "type": "array",
            "name": "$cookie_elements",
            "description": "An array of data for the authentication cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 663,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie_bad_session_token",
    "type": "action",
    "params_count": 1,
    "description": "Fires if a bad authentication cookie hash is encountered.",
    "params": [
        {
            "type": "array",
            "name": "$cookie_elements",
            "description": "An array of data for the authentication cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 669,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_cookie_valid",
    "type": "action",
    "params_count": 2,
    "description": "Fires once an authentication cookie has been validated.",
    "params": [
        {
            "type": "array",
            "name": "$cookie_elements",
            "description": "An array of data for the authentication cookie."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 686,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "set_auth_cookie",
    "type": "action",
    "params_count": 6,
    "description": "Fires immediately before the authentication cookie is set.",
    "params": [
        {
            "type": "string",
            "name": "$auth_cookie",
            "description": "Authentication cookie."
        },
        {
            "type": "int",
            "name": "$expire",
            "description": "The time the login grace period expires as a UNIX timestamp."
        },
        {
            "type": "int",
            "name": "$expiration",
            "description": "The time when the authentication cookie expires as a UNIX timestamp."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Authentication scheme. Values include 'auth', 'secure_auth', or 'logged_in'."
        },
        {
            "type": "string",
            "name": "$token",
            "description": "User's session token to use for this cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 890,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "set_logged_in_cookie",
    "type": "action",
    "params_count": 6,
    "description": "Fires immediately before the logged-in authentication cookie is set.",
    "params": [
        {
            "type": "string",
            "name": "$logged_in_cookie",
            "description": "The logged-in cookie."
        },
        {
            "type": "int",
            "name": "$expire",
            "description": "The time the login grace period expires as a UNIX timestamp."
        },
        {
            "type": "int",
            "name": "$expiration",
            "description": "The time when the logged-in authentication cookie expires as a UNIX timestamp."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Authentication scheme. Default 'logged_in'."
        },
        {
            "type": "string",
            "name": "$token",
            "description": "User's session token to use for this cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 907,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "clear_auth_cookie",
    "type": "action",
    "params_count": 0,
    "description": "Fires just before the authentication cookies are cleared.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 940,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "auth_redirect",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the authentication redirect.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1039,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "check_admin_referer",
    "type": "action",
    "params_count": 2,
    "description": "Fires once the admin request has been validated or not.",
    "params": [
        {
            "type": "string",
            "name": "$action",
            "description": "The nonce action."
        },
        {
            "type": "false|int",
            "name": "$result",
            "description": "False if the nonce is invalid, 1 if the nonce is valid and generated between"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1098,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "check_ajax_referer",
    "type": "action",
    "params_count": 2,
    "description": "Fires once the Ajax request has been validated or not.",
    "params": [
        {
            "type": "string",
            "name": "$action",
            "description": "The Ajax nonce action."
        },
        {
            "type": "false|int",
            "name": "$result",
            "description": "False if the nonce is invalid, 1 if the nonce is valid and generated between"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1149,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "wp_verify_nonce_failed",
    "type": "action",
    "params_count": 4,
    "description": "Fires when nonce verification fails.",
    "params": [
        {
            "type": "string",
            "name": "$nonce",
            "description": "The invalid nonce."
        },
        {
            "type": "string|int",
            "name": "$action",
            "description": "The nonce action."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "The current user object."
        },
        {
            "type": "string",
            "name": "$token",
            "description": "The user's session token."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2026,
        "name": "wp-includes\/pluggable.php"
    }
},
{
    "text": "load_feed_engine",
    "type": "action",
    "params_count": 0,
    "description": "Fires before MagpieRSS is loaded, to optionally replace it.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 27,
        "name": "wp-includes\/rss.php"
    }
},
{
    "text": "style_loader_tag",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the HTML link tag of an enqueued style.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "The link tag for the enqueued style."
        },
        {
            "type": "string",
            "name": "$handle",
            "description": "The style's registered handle."
        },
        {
            "type": "string",
            "name": "$href",
            "description": "The stylesheet's source URL."
        },
        {
            "type": "string",
            "name": "$media",
            "description": "The stylesheet's media attribute."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 191,
        "name": "wp-includes\/class.wp-styles.php"
    }
},
{
    "text": "print_styles_array",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of enqueued styles before processing for output.",
    "params": [
        {
            "type": "array",
            "name": "$to_do",
            "description": "The list of enqueued styles about to be processed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 307,
        "name": "wp-includes\/class.wp-styles.php"
    }
},
{
    "text": "style_loader_src",
    "type": "filter",
    "params_count": 2,
    "description": "Filters an enqueued style's fully-qualified URL.",
    "params": [
        {
            "type": "string",
            "name": "$src",
            "description": "The source URL of the enqueued style."
        },
        {
            "type": "string",
            "name": "$handle",
            "description": "The style's registered handle."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 338,
        "name": "wp-includes\/class.wp-styles.php"
    }
},
{
    "text": "wp_default_styles",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the WP_Styles instance is initialized.",
    "params": [
        {
            "type": "WP_Styles",
            "name": "$this",
            "description": "WP_Styles instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 116,
        "name": "wp-includes\/class.wp-styles.php"
    }
},
{
    "text": "graceful_fail",
    "type": "filter",
    "params_count": 1,
    "description": "Deprecated functionality to gracefully fail.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 91,
        "name": "wp-includes\/ms-deprecated.php"
    }
},
{
    "text": "wp_is_mobile",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether the request should be treated as coming from a mobile device or not.",
    "params": [
        {
            "type": "bool",
            "name": "$is_mobile",
            "description": "Whether the request is from a mobile device or not."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 149,
        "name": "wp-includes\/vars.php"
    }
},
{
    "text": "wp_kses_allowed_html",
    "type": "filter",
    "params_count": 2,
    "description": "Filters HTML elements allowed for a given context.",
    "params": [
        {
            "type": "array",
            "name": "$context",
            "description": "Context to judge allowed tags by."
        },
        {
            "type": "string",
            "name": "$context_type",
            "description": "Context type (explicit)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 635,
        "name": "wp-includes\/kses.php"
    }
},
{
    "text": "pre_kses",
    "type": "filter",
    "params_count": 3,
    "description": "Filters content to be run through kses.",
    "params": [
        {
            "type": "string",
            "name": "$string",
            "description": "Content to run through kses."
        },
        {
            "type": "array",
            "name": "$allowed_html",
            "description": "Allowed HTML elements."
        },
        {
            "type": "array",
            "name": "$allowed_protocols",
            "description": "Allowed protocol in links."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 688,
        "name": "wp-includes\/kses.php"
    }
},
{
    "text": "wp_editor_settings",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the wp_editor() settings.",
    "params": [
        {
            "type": "array",
            "name": "$settings",
            "description": "Array of editor arguments."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "ID for the current editor instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 81,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "the_editor_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default editor content.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Default editor content."
        },
        {
            "type": "string",
            "name": "$default_editor",
            "description": "The default editor for the current user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 272,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "quicktags_settings",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Quicktags settings.",
    "params": [
        {
            "type": "array",
            "name": "$qtInit",
            "description": "Quicktags settings."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "The unique editor ID, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 344,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "teeny_mce_plugins",
    "type": "filter",
    "params_count": 8,
    "description": "Filters the list of teenyMCE plugins.",
    "params": [
        {
            "type": "array",
            "name": "$plugins",
            "description": "An array of teenyMCE plugins."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 368,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "mce_external_plugins",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of TinyMCE external plugins.",
    "params": [
        {
            "type": "array",
            "name": "$external_plugins",
            "description": "An array of external TinyMCE plugins."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 388,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "tiny_mce_plugins",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of default TinyMCE plugins.",
    "params": [
        {
            "type": "array",
            "name": "$plugins",
            "description": "An array of default TinyMCE plugins."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 425,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "mce_external_languages",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the translations loaded for external TinyMCE 3.x plugins.",
    "params": [
        {
            "type": "array",
            "name": "$translations",
            "description": "Translations for external TinyMCE plugins."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 448,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "mce_css",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comma-delimited list of stylesheets to load in TinyMCE.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheets",
            "description": "Comma-delimited list of stylesheets."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 545,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "teeny_mce_buttons",
    "type": "filter",
    "params_count": 15,
    "description": "Filters the list of teenyMCE buttons (Text tab).",
    "params": [
        {
            "type": "array",
            "name": "$buttons",
            "description": "An array of teenyMCE buttons."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 566,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "mce_buttons",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the first-row list of TinyMCE buttons (Visual tab).",
    "params": [
        {
            "type": "array",
            "name": "$buttons",
            "description": "First-row list of buttons."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 589,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "mce_buttons_2",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the second-row list of TinyMCE buttons (Visual tab).",
    "params": [
        {
            "type": "array",
            "name": "$buttons",
            "description": "Second-row list of buttons."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 605,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "mce_buttons_3",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the third-row list of TinyMCE buttons (Visual tab).",
    "params": [
        {
            "type": "array",
            "name": "$buttons",
            "description": "Third-row list of buttons."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 615,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "mce_buttons_4",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the fourth-row list of TinyMCE buttons (Visual tab).",
    "params": [
        {
            "type": "array",
            "name": "$buttons",
            "description": "Fourth-row list of buttons."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 625,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "teeny_mce_before_init",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the teenyMCE config before init.",
    "params": [
        {
            "type": "array",
            "name": "$mceInit",
            "description": "An array with teenyMCE config."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 692,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "tiny_mce_before_init",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the TinyMCE config before init.",
    "params": [
        {
            "type": "array",
            "name": "$mceInit",
            "description": "An array with TinyMCE config."
        },
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 703,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "wp_mce_translation",
    "type": "filter",
    "params_count": 2,
    "description": "Filters translated strings prepared for TinyMCE.",
    "params": [
        {
            "type": "array",
            "name": "$mce_translation",
            "description": "Key\/value pairs of strings."
        },
        {
            "type": "string",
            "name": "$mce_locale",
            "description": "Locale."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1346,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "wp_link_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the link query arguments.",
    "params": [
        {
            "type": "array",
            "name": "$query",
            "description": "An array of WP_Query arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1630,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "wp_link_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the link query results.",
    "params": [
        {
            "type": "array",
            "name": "$results",
            "description": "{"
        },
        {
            "type": "array",
            "name": "$query",
            "description": "An array of WP_Query arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1674,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "media_buttons",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the default media button(s) are displayed.",
    "params": [
        {
            "type": "string",
            "name": "$editor_id",
            "description": "Unique editor identifier, e.g. 'content'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 226,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "print_default_editor_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Fires when the editor scripts are loaded for later initialization,",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 905,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "before_wp_tiny_mce",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before the TinyMCE settings are printed.",
    "params": [
        {
            "type": "array",
            "name": "$mce_settings",
            "description": "TinyMCE settings array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1475,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "wp_tiny_mce_init",
    "type": "action",
    "params_count": 1,
    "description": "Fires after tinymce.js is loaded, but before any TinyMCE editor",
    "params": [
        {
            "type": "array",
            "name": "$mce_settings",
            "description": "TinyMCE settings array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1514,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "after_wp_tiny_mce",
    "type": "action",
    "params_count": 1,
    "description": "Fires after any core TinyMCE editor instances are created.",
    "params": [
        {
            "type": "array",
            "name": "$mce_settings",
            "description": "TinyMCE settings array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1575,
        "name": "wp-includes\/class-wp-editor.php"
    }
},
{
    "text": "use_curl_transport",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether cURL can be used as a transport for retrieving a URL.",
    "params": [
        {
            "type": "bool",
            "name": "$use_class",
            "description": "Whether the class can be used. Default true."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of request arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 381,
        "name": "wp-includes\/class-wp-http-curl.php"
    }
},
{
    "text": "http_api_curl",
    "type": "action",
    "params_count": 3,
    "description": "Fires before the cURL request is executed.",
    "params": [
        {
            "type": "resource",
            "name": "$handle",
            "description": "The cURL handle returned by curl_init() (passed by reference)."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "The HTTP request arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The request URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 220,
        "name": "wp-includes\/class-wp-http-curl.php"
    }
},
{
    "text": "old_slug_redirect_post_id",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the old slug redirect post ID.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "The redirect post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 885,
        "name": "wp-includes\/query.php"
    }
},
{
    "text": "old_slug_redirect_url",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the old slug redirect URL.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The redirect URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 906,
        "name": "wp-includes\/query.php"
    }
},
{
    "text": "pre_do_shortcode_tag",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether to call a shortcode callback.",
    "params": [
        {
            "type": "bool|string",
            "name": "$return",
            "description": "Short-circuit return value. Either false or the value to replace the shortcode with."
        },
        {
            "type": "string",
            "name": "$tag",
            "description": "Shortcode name."
        },
        {
            "type": "array|string",
            "name": "$attr",
            "description": "Shortcode attributes array or empty string."
        },
        {
            "type": "array",
            "name": "$m",
            "description": "Regular expression match array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 312,
        "name": "wp-includes\/shortcodes.php"
    }
},
{
    "text": "do_shortcode_tag",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the output created by a shortcode callback.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "Shortcode output."
        },
        {
            "type": "string",
            "name": "$tag",
            "description": "Shortcode name."
        },
        {
            "type": "array|string",
            "name": "$attr",
            "description": "Shortcode attributes array or empty string."
        },
        {
            "type": "array",
            "name": "$m",
            "description": "Regular expression match array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 331,
        "name": "wp-includes\/shortcodes.php"
    }
},
{
    "text": "strip_shortcodes_tagnames",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of shortcode tags to remove from the content.",
    "params": [
        {
            "type": "array",
            "name": "$tag_array",
            "description": "Array of shortcode tags to remove."
        },
        {
            "type": "string",
            "name": "$content",
            "description": "Content shortcodes are being removed from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 596,
        "name": "wp-includes\/shortcodes.php"
    }
},
{
    "text": "wp_http_ixr_client_headers",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the headers collection to be sent to the XML-RPC server.",
    "params": [
        {
            "type": "array",
            "name": "$headers",
            "description": "Array of headers to be sent."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 78,
        "name": "wp-includes\/class-wp-http-ixr-client.php"
    }
},
{
    "text": "session_token_manager",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the session token manager used.",
    "params": [
        {
            "type": "string",
            "name": "$session",
            "description": "Name of class to use as the manager."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 57,
        "name": "wp-includes\/class-wp-session-tokens.php"
    }
},
{
    "text": "attach_session_information",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the information attached to the newly created session.",
    "params": [
        {
            "type": "array",
            "name": "$session",
            "description": "Array of extra data."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 134,
        "name": "wp-includes\/class-wp-session-tokens.php"
    }
},
{
    "text": "session_token_manager",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the session token manager used.",
    "params": [
        {
            "type": "string",
            "name": "$session",
            "description": "Name of class to use as the manager."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 57,
        "name": "wp-includes\/class-wp-session-tokens.php"
    }
},
{
    "text": "rdf_ns",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the feed root to add namespaces.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 29,
        "name": "wp-includes\/feed-rdf.php"
    }
},
{
    "text": "rdf_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the RDF feed header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 55,
        "name": "wp-includes\/feed-rdf.php"
    }
},
{
    "text": "rdf_item",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of each RDF feed item.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 84,
        "name": "wp-includes\/feed-rdf.php"
    }
},
{
    "text": "get_attached_file",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attached file based on the given ID.",
    "params": [
        {
            "type": "string",
            "name": "$file",
            "description": "Path to attached file."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 351,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "update_attached_file",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the path to the attached file to update.",
    "params": [
        {
            "type": "string",
            "name": "$file",
            "description": "Path to the attached file to update."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 378,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "_wp_relative_upload_path",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the relative path to an uploaded file.",
    "params": [
        {
            "type": "string",
            "name": "$new_path",
            "description": "Relative path to the file."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Full path to the file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 413,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "get_post_status",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post status.",
    "params": [
        {
            "type": "string",
            "name": "$post_status",
            "description": "The post status."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 731,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_count_attachments",
    "type": "filter",
    "params_count": 2,
    "description": "Modify returned attachment counts by mime type.",
    "params": [
        {
            "type": "object",
            "name": "$counts",
            "description": "An object containing the attachment counts by"
        },
        {
            "type": "string",
            "name": "$mime_type",
            "description": "The mime type pattern used to filter the attachments"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2398,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "post_mime_types",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default list of post mime types.",
    "params": [
        {
            "type": "array",
            "name": "$post_mime_types",
            "description": "Default list of post mime types."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2422,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "pre_delete_post",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether a post deletion should take place.",
    "params": [
        {
            "type": "bool",
            "name": "$delete",
            "description": "Whether to go forward with deletion."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        },
        {
            "type": "bool",
            "name": "$force_delete",
            "description": "Whether to bypass the trash."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2576,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "pre_trash_post",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether a post trashing should take place.",
    "params": [
        {
            "type": "bool",
            "name": "$trash",
            "description": "Whether to go forward with trashing."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2741,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "pre_untrash_post",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether a post untrashing should take place.",
    "params": [
        {
            "type": "bool",
            "name": "$untrash",
            "description": "Whether to go forward with untrashing."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2801,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_insert_post_parent",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the post parent -- used to check for and prevent hierarchy loops.",
    "params": [
        {
            "type": "int",
            "name": "$post_parent",
            "description": "Post parent ID."
        },
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "array",
            "name": "$new_postarr",
            "description": "Array of parsed post data."
        },
        {
            "type": "array",
            "name": "$postarr",
            "description": "Array of sanitized, but otherwise unmodified post data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3387,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_insert_attachment_data",
    "type": "filter",
    "params_count": 2,
    "description": "Filters attachment post data before it is updated in or added to the database.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "An array of sanitized attachment post data."
        },
        {
            "type": "array",
            "name": "$postarr",
            "description": "An array of unsanitized attachment post data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3439,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_insert_post_data",
    "type": "filter",
    "params_count": 2,
    "description": "Filters slashed post data just before it is inserted into the database.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "An array of slashed post data."
        },
        {
            "type": "array",
            "name": "$postarr",
            "description": "An array of sanitized, but otherwise unmodified post data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3449,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_unique_post_slug",
    "type": "filter",
    "params_count": 6,
    "description": "Filters the unique post slug.",
    "params": [
        {
            "type": "string",
            "name": "$slug",
            "description": "The post slug."
        },
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$post_status",
            "description": "The post status."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type."
        },
        {
            "type": "int",
            "name": "$post_parent",
            "description": "Post parent ID"
        },
        {
            "type": "string",
            "name": "$original_slug",
            "description": "The original post slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3958,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "add_ping",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the new ping URL to add for the given post.",
    "params": [
        {
            "type": "string",
            "name": "$new",
            "description": "New ping URL to add."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4207,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "get_enclosed",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of enclosures already enclosed for the given post.",
    "params": [
        {
            "type": "array",
            "name": "$pung",
            "description": "Array of enclosures for the given post."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4245,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "get_pung",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of already-pinged URLs for the given post.",
    "params": [
        {
            "type": "array",
            "name": "$pung",
            "description": "Array of URLs already pinged for the given post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4274,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "get_to_ping",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of URLs yet to ping for the given post.",
    "params": [
        {
            "type": "array",
            "name": "$to_ping",
            "description": "List of URLs yet to ping."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4303,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "get_page_uri",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URI for a page.",
    "params": [
        {
            "type": "string",
            "name": "$uri",
            "description": "Page URI."
        },
        {
            "type": "WP_Post",
            "name": "$page",
            "description": "Page object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4638,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_get_attachment_metadata",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment meta data.",
    "params": [
        {
            "type": "array|bool",
            "name": "$data",
            "description": "Array of meta data for the given attachment, or false"
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Attachment post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5196,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_get_attachment_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "URL for the given attachment."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Attachment post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5287,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_get_attachment_caption",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment caption.",
    "params": [
        {
            "type": "string",
            "name": "$caption",
            "description": "Caption for the given attachment."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5323,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_get_attachment_thumb_file",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment thumbnail file path.",
    "params": [
        {
            "type": "string",
            "name": "$thumbfile",
            "description": "File path to the attachment thumbnail."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5352,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_get_attachment_thumb_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment thumbnail URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "URL for the attachment thumbnail."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5389,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "icon_dir",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the icon directory path.",
    "params": [
        {
            "type": "string",
            "name": "$path",
            "description": "Icon directory absolute path."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5499,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "icon_dir_uri",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the icon directory URI.",
    "params": [
        {
            "type": "string",
            "name": "$uri",
            "description": "Icon directory URI."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5508,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "icon_dirs",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of icon directory URIs.",
    "params": [
        {
            "type": "array",
            "name": "$uris",
            "description": "List of icon directory URIs."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5517,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_mime_type_icon",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the mime type icon.",
    "params": [
        {
            "type": "string",
            "name": "$icon",
            "description": "Path to the mime type icon."
        },
        {
            "type": "string",
            "name": "$mime",
            "description": "Mime type."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Attachment ID. Will equal 0 if the function passed"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5580,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "get_lastpostdate",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the date the last post was published.",
    "params": [
        {
            "type": "string",
            "name": "$date",
            "description": "Date the last post was published."
        },
        {
            "type": "string",
            "name": "$timezone",
            "description": "Location to use for getting the post published date."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5796,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "pre_get_lastpostmodified",
    "type": "filter",
    "params_count": 3,
    "description": "Pre-filter the return value of get_lastpostmodified() before the query is run.",
    "params": [
        {
            "type": "string",
            "name": "$lastpostmodified",
            "description": "Date the last post was modified."
        },
        {
            "type": "string",
            "name": "$timezone",
            "description": "Location to use for getting the post modified date."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "The post type to check."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5827,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "get_lastpostmodified",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the date the last post was modified.",
    "params": [
        {
            "type": "string",
            "name": "$lastpostmodified",
            "description": "Date the last post was modified."
        },
        {
            "type": "string",
            "name": "$timezone",
            "description": "Location to use for getting the post modified date."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5848,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "registered_post_type",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a post type is registered.",
    "params": [
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type."
        },
        {
            "type": "WP_Post_Type",
            "name": "$post_type_object",
            "description": "Arguments used to register the post type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1213,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "unregistered_post_type",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a post type was unregistered.",
    "params": [
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type key."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1259,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "post_stuck",
    "type": "action",
    "params_count": 1,
    "description": "Fires once a post has been added to the sticky list.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "ID of the post that was stuck."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2230,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "post_unstuck",
    "type": "action",
    "params_count": 1,
    "description": "Fires once a post has been removed from the sticky list.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "ID of the post that was unstuck."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2268,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "before_delete_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a post is deleted, at the start of wp_delete_post().",
    "params": [
        {
            "type": "int",
            "name": "$postid",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2590,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "delete_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before a post is deleted from the database.",
    "params": [
        {
            "type": "int",
            "name": "$postid",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2638,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "deleted_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a post is deleted from the database.",
    "params": [
        {
            "type": "int",
            "name": "$postid",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2651,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "after_delete_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a post is deleted, at the conclusion of wp_delete_post().",
    "params": [
        {
            "type": "int",
            "name": "$postid",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2671,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_trash_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a post is sent to the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2753,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "trashed_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a post is sent to the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2769,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "untrash_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a post is restored from the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2813,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "untrashed_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a post is restored from the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2831,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "trash_post_comments",
    "type": "action",
    "params_count": 1,
    "description": "Fires before comments are sent to the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2862,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "trashed_post_comments",
    "type": "action",
    "params_count": 2,
    "description": "Fires after comments are sent to the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "array",
            "name": "$statuses",
            "description": "Array of comment statuses."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2887,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "untrash_post_comments",
    "type": "action",
    "params_count": 1,
    "description": "Fires before comments are restored for a post from the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2923,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "untrashed_post_comments",
    "type": "action",
    "params_count": 1,
    "description": "Fires after comments are restored for a post from the trash.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2950,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "pre_post_update",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before an existing post is updated in the database.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "array",
            "name": "$data",
            "description": "Array of unslashed post data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3463,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "edit_attachment",
    "type": "action",
    "params_count": 1,
    "description": "Fires once an existing attachment has been updated.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3598,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "attachment_updated",
    "type": "action",
    "params_count": 3,
    "description": "Fires once an existing attachment has been updated.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "WP_Post",
            "name": "$post_after",
            "description": "Post object following the update."
        },
        {
            "type": "WP_Post",
            "name": "$post_before",
            "description": "Post object before the update."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3610,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "add_attachment",
    "type": "action",
    "params_count": 1,
    "description": "Fires once an attachment has been added.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3620,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "edit_post",
    "type": "action",
    "params_count": 2,
    "description": "Fires once an existing post has been updated.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3635,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "post_updated",
    "type": "action",
    "params_count": 3,
    "description": "Fires once an existing post has been updated.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "WP_Post",
            "name": "$post_after",
            "description": "Post object following the update."
        },
        {
            "type": "WP_Post",
            "name": "$post_before",
            "description": "Post object before the update."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3647,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "save_post",
    "type": "action",
    "params_count": 3,
    "description": "Fires once a post has been saved.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        },
        {
            "type": "bool",
            "name": "$update",
            "description": "Whether this is an existing post being updated or not."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3673,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "wp_insert_post",
    "type": "action",
    "params_count": 3,
    "description": "Fires once a post has been saved.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        },
        {
            "type": "bool",
            "name": "$update",
            "description": "Whether this is an existing post being updated or not."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3684,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "transition_post_status",
    "type": "action",
    "params_count": 3,
    "description": "Fires when a post is transitioned from one status to another.",
    "params": [
        {
            "type": "string",
            "name": "$new_status",
            "description": "New post status."
        },
        {
            "type": "string",
            "name": "$old_status",
            "description": "Old post status."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4128,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "delete_attachment",
    "type": "action",
    "params_count": 1,
    "description": "Fires before an attachment is deleted, at the start of wp_delete_attachment().",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5062,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "clean_post_cache",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after the given post's cache is cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5970,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "clean_page_cache",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after the given page's cache is cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5982,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "clean_attachment_cache",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the given attachment's cache is cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6087,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "private_to_published",
    "type": "action",
    "params_count": 1,
    "description": "Fires when a post's status is transitioned from private to published.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6123,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "xmlrpc_publish_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires when _publish_post_hook() is called during an XML-RPC request.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6181,
        "name": "wp-includes\/post.php"
    }
},
{
    "text": "post_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used for \"post\" archives.",
    "params": [
        {
            "type": "array",
            "name": "$post_rewrite",
            "description": "The rewrite rules for posts."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1257,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "date_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used for date archives.",
    "params": [
        {
            "type": "array",
            "name": "$date_rewrite",
            "description": "The rewrite rules for date archives."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1271,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "root_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used for root-level archives.",
    "params": [
        {
            "type": "array",
            "name": "$root_rewrite",
            "description": "The root-level rewrite rules."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1286,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "comments_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used for comment feed archives.",
    "params": [
        {
            "type": "array",
            "name": "$comments_rewrite",
            "description": "The rewrite rules for the site-wide comments feeds."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1300,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "search_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used for search archives.",
    "params": [
        {
            "type": "array",
            "name": "$search_rewrite",
            "description": "The rewrite rules for search queries."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1316,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "author_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used for author archives.",
    "params": [
        {
            "type": "array",
            "name": "$author_rewrite",
            "description": "The rewrite rules for author archives."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1331,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "page_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used for \"page\" post type archives.",
    "params": [
        {
            "type": "array",
            "name": "$page_rewrite",
            "description": "The rewrite rules for the \"page\" post type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1343,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "tag_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters rewrite rules used specifically for Tags.",
    "params": [
        {
            "type": "array",
            "name": "$rules",
            "description": "The rewrite rules generated for tags."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1378,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "rewrite_rules_array",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the full set of generated rewrite rules.",
    "params": [
        {
            "type": "array",
            "name": "$this->rules",
            "description": "The compiled array of rewrite rules."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1406,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "mod_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
    "params": [
        {
            "type": "string",
            "name": "$rules",
            "description": "mod_rewrite Rewrite rules formatted for .htaccess."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1512,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
    "params": [
        {
            "type": "string",
            "name": "$rules",
            "description": "mod_rewrite Rewrite rules formatted for .htaccess."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1522,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "iis7_url_rewrite_rules",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of rewrite rules formatted for output to a web.config.",
    "params": [
        {
            "type": "string",
            "name": "$rules",
            "description": "Rewrite rules formatted for IIS web.config."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1573,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "generate_rewrite_rules",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the rewrite rules are generated.",
    "params": [
        {
            "type": "WP_Rewrite",
            "name": "$this",
            "description": "Current WP_Rewrite instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1397,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "permalink_structure_changed",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the permalink structure is updated.",
    "params": [
        {
            "type": "string",
            "name": "$old_permalink_structure",
            "description": "The previous permalink structure."
        },
        {
            "type": "string",
            "name": "$permalink_structure",
            "description": "The new permalink structure."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1842,
        "name": "wp-includes\/class-wp-rewrite.php"
    }
},
{
    "text": "customize_section_active",
    "type": "filter",
    "params_count": 2,
    "description": "Filters response of WP_Customize_Section::active().",
    "params": [
        {
            "type": "bool",
            "name": "$active",
            "description": "Whether the Customizer section is active."
        },
        {
            "type": "WP_Customize_Section",
            "name": "$section",
            "description": "WP_Customize_Section instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 195,
        "name": "wp-includes\/class-wp-customize-section.php"
    }
},
{
    "text": "customize_render_section",
    "type": "action",
    "params_count": 1,
    "description": "Fires before rendering a Customizer section.",
    "params": [
        {
            "type": "WP_Customize_Section",
            "name": "$this",
            "description": "WP_Customize_Section instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 288,
        "name": "wp-includes\/class-wp-customize-section.php"
    }
},
{
    "text": "admin_bar_init",
    "type": "action",
    "params_count": 0,
    "description": "Fires after WP_Admin_Bar is initialized.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 80,
        "name": "wp-includes\/class-wp-admin-bar.php"
    }
},
{
    "text": "add_admin_bar_menus",
    "type": "action",
    "params_count": 0,
    "description": "Fires after menus are added to the menu bar.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 601,
        "name": "wp-includes\/class-wp-admin-bar.php"
    }
},
{
    "text": "oembed_providers",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of whitelisted oEmbed providers.",
    "params": [
        {
            "type": "array",
            "name": "$providers",
            "description": "An array of popular oEmbed providers."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 221,
        "name": "wp-includes\/class-oembed.php"
    }
},
{
    "text": "pre_oembed_result",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the oEmbed result before any HTTP requests are made.",
    "params": [
        {
            "type": "null|string",
            "name": "$result",
            "description": "The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The URL to the content that should be attempted to be embedded."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Optional. Arguments, usually passed from a shortcode. Default empty."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 391,
        "name": "wp-includes\/class-oembed.php"
    }
},
{
    "text": "oembed_result",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the HTML returned by the oEmbed provider.",
    "params": [
        {
            "type": "string",
            "name": "$data",
            "description": "The returned oEmbed HTML."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "URL of the content to be embedded."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Optional arguments, usually passed from a shortcode."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 412,
        "name": "wp-includes\/class-oembed.php"
    }
},
{
    "text": "oembed_remote_get_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters oEmbed remote get arguments.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "oEmbed remote get arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "URL to be inspected."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 439,
        "name": "wp-includes\/class-oembed.php"
    }
},
{
    "text": "oembed_fetch_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the oEmbed URL to be fetched.",
    "params": [
        {
            "type": "string",
            "name": "$provider",
            "description": "URL of the oEmbed provider."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "URL of the content to be embedded."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Optional arguments, usually passed from a shortcode."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 526,
        "name": "wp-includes\/class-oembed.php"
    }
},
{
    "text": "oembed_dataparse",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned oEmbed HTML.",
    "params": [
        {
            "type": "string",
            "name": "$return",
            "description": "The returned oEmbed HTML."
        },
        {
            "type": "object",
            "name": "$data",
            "description": "A data object result from an oEmbed provider."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The URL of the content to be embedded."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 686,
        "name": "wp-includes\/class-oembed.php"
    }
},
{
    "text": "rest_url_prefix",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the REST URL prefix.",
    "params": [
        {
            "type": "string",
            "name": "$prefix",
            "description": "URL prefix. Default 'wp-json'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 287,
        "name": "wp-includes\/rest-api.php"
    }
},
{
    "text": "rest_url",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the REST URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "REST URL."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "REST route."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Sanitization scheme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 360,
        "name": "wp-includes\/rest-api.php"
    }
},
{
    "text": "wp_rest_server_class",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the REST Server Class.",
    "params": [
        {
            "type": "string",
            "name": "$class_name",
            "description": "The name of the server class. Default 'WP_REST_Server'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 419,
        "name": "wp-includes\/rest-api.php"
    }
},
{
    "text": "rest_avatar_sizes",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the REST avatar sizes.",
    "params": [
        {
            "type": "array",
            "name": "$sizes",
            "description": "An array of int values that are the pixel sizes for avatars."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1069,
        "name": "wp-includes\/rest-api.php"
    }
},
{
    "text": "rest_api_init",
    "type": "action",
    "params_count": 1,
    "description": "Fires when preparing to serve an API request.",
    "params": [
        {
            "type": "WP_REST_Server",
            "name": "$wp_rest_server",
            "description": "Server object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 432,
        "name": "wp-includes\/rest-api.php"
    }
},
{
    "text": "atom_ns",
    "type": "action",
    "params_count": 0,
    "description": "Fires at end of the Atom feed root to add namespaces.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 27,
        "name": "wp-includes\/feed-atom.php"
    }
},
{
    "text": "atom_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires just before the first Atom feed entry.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 48,
        "name": "wp-includes\/feed-atom.php"
    }
},
{
    "text": "atom_author",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of each Atom feed author entry.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 64,
        "name": "wp-includes\/feed-atom.php"
    }
},
{
    "text": "atom_entry",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of each Atom feed item.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 83,
        "name": "wp-includes\/feed-atom.php"
    }
},
{
    "text": "protected_title_format",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text prepended to the post title for protected posts.",
    "params": [
        {
            "type": "string",
            "name": "$prepend",
            "description": "Text displayed before the post title."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Current post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 130,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "private_title_format",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text prepended to the post title of private posts.",
    "params": [
        {
            "type": "string",
            "name": "$prepend",
            "description": "Text displayed before the post title."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Current post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 145,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "the_title",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post title.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "The post title."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 158,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "the_guid",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the escaped Global Unique Identifier (guid) of the post.",
    "params": [
        {
            "type": "string",
            "name": "$guid",
            "description": "Escaped Global Unique Identifier (guid) of the post."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 190,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "get_the_guid",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Global Unique Identifier (guid) of the post.",
    "params": [
        {
            "type": "string",
            "name": "$guid",
            "description": "Global Unique Identifier (guid) of the post."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 219,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "the_content",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post content.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Content of the current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 240,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "the_content_more_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Read More link text.",
    "params": [
        {
            "type": "string",
            "name": "$more_link_element",
            "description": "Read More link element."
        },
        {
            "type": "string",
            "name": "$more_link_text",
            "description": "Read More text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 322,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "the_excerpt",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the displayed post excerpt.",
    "params": [
        {
            "type": "string",
            "name": "$post_excerpt",
            "description": "The post excerpt."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 362,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "get_the_excerpt",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the retrieved post excerpt.",
    "params": [
        {
            "type": "string",
            "name": "$post_excerpt",
            "description": "The post excerpt."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 397,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "post_class",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of CSS classes for the current post.",
    "params": [
        {
            "type": "array",
            "name": "$classes",
            "description": "An array of post classes."
        },
        {
            "type": "array",
            "name": "$class",
            "description": "An array of additional classes added to the post."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 543,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "body_class",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of CSS body classes for the current post or page.",
    "params": [
        {
            "type": "array",
            "name": "$classes",
            "description": "An array of body classes."
        },
        {
            "type": "array",
            "name": "$class",
            "description": "An array of additional classes added to the body."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 770,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "post_password_required",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether a post requires the user to supply a password.",
    "params": [
        {
            "type": "bool",
            "name": "$required",
            "description": "Whether the user needs to supply a password. True if password has not been"
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 815,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_link_pages_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used in retrieving page links for paginated posts.",
    "params": [
        {
            "type": "array",
            "name": "$params",
            "description": "An array of arguments for page links for paginated posts."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 881,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_link_pages_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the HTML output of individual page number links.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The page number HTML output."
        },
        {
            "type": "int",
            "name": "$i",
            "description": "Page number for paginated posts' page links."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 900,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_link_pages",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the HTML output of page links for paginated posts.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "HTML output of paginated posts' page links."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 938,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "the_meta_key",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the HTML output of the li element in the post custom fields list.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "The HTML output for the li element."
        },
        {
            "type": "string",
            "name": "$key",
            "description": "Meta key."
        },
        {
            "type": "string",
            "name": "$value",
            "description": "Meta value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1044,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_dropdown_pages",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the HTML output of a list of pages as a drop down.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "HTML output for drop down list of pages."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "The parsed arguments array."
        },
        {
            "type": "array",
            "name": "$pages",
            "description": "List of WP_Post objects returned by `get_pages()`"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1129,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_list_pages_excludes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of pages to exclude from the pages list.",
    "params": [
        {
            "type": "array",
            "name": "$exclude_array",
            "description": "An array of page IDs to exclude."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1217,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_list_pages",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the HTML output of the pages to list.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "HTML output of the pages list."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "An array of page-listing arguments."
        },
        {
            "type": "array",
            "name": "$pages",
            "description": "List of WP_Post objects returned by `get_pages()`"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1256,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_page_menu_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used to generate a page-based menu.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of page menu arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1334,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_page_menu",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the HTML output of a page-based menu.",
    "params": [
        {
            "type": "string",
            "name": "$menu",
            "description": "The HTML output."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1406,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_get_attachment_link",
    "type": "filter",
    "params_count": 6,
    "description": "Filters a retrieved attachment page link.",
    "params": [
        {
            "type": "string",
            "name": "$link_html",
            "description": "The page link HTML output."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "Post ID."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Size of the image. Image size or array of width and height values (in that order)."
        },
        {
            "type": "bool",
            "name": "$permalink",
            "description": "Whether to add permalink to image. Default false."
        },
        {
            "type": "bool",
            "name": "$icon",
            "description": "Whether to include an icon. Default false."
        },
        {
            "type": "string|bool",
            "name": "$text",
            "description": "If string, will be link text. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1543,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "prepend_attachment",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the attachment markup to be prepended to the post content.",
    "params": [
        {
            "type": "string",
            "name": "$p",
            "description": "The attachment HTML output."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1589,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "the_password_form",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML output for the protected post password form.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The password form HTML output."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1625,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "wp_post_revision_title_expanded",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the formatted author and date for a revision.",
    "params": [
        {
            "type": "string",
            "name": "$revision_date_author",
            "description": "The formatted string."
        },
        {
            "type": "WP_Post",
            "name": "$revision",
            "description": "The revision object."
        },
        {
            "type": "bool",
            "name": "$link",
            "description": "Whether to link to the revisions page, as passed into"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1782,
        "name": "wp-includes\/post-template.php"
    }
},
{
    "text": "customize_loaded_components",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the core Customizer components to load.",
    "params": [
        {
            "type": "array",
            "name": "$components",
            "description": "List of core components to load."
        },
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 352,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_changeset_branching",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether or not changeset branching is\u00a0allowed.",
    "params": [
        {
            "type": "bool",
            "name": "$allow_branching",
            "description": "Whether branching is allowed. If `false`, the default,"
        },
        {
            "type": "WP_Customize_Manager",
            "name": "$wp_customize",
            "description": "Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 794,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_save_response",
    "type": "filter",
    "params_count": 2,
    "description": "Filters response data for a successful customize_save Ajax request.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "Additional information passed back to the 'saved'"
        },
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2520,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_changeset_save_data",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the settings' data that will be persisted into the changeset.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "Updated changeset data, mapping setting IDs to arrays containing a $value item and optionally other metadata."
        },
        {
            "type": "array",
            "name": "$context",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2808,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_dynamic_setting_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a dynamic setting's constructor args.",
    "params": [
        {
            "type": "false|array",
            "name": "$setting_args",
            "description": "The arguments to the WP_Customize_Setting constructor."
        },
        {
            "type": "string",
            "name": "$setting_id",
            "description": "ID for dynamic setting, usually coming from `$_POST['customized']`."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3655,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_dynamic_setting_class",
    "type": "filter",
    "params_count": 3,
    "description": "Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.",
    "params": [
        {
            "type": "string",
            "name": "$setting_class",
            "description": "WP_Customize_Setting or a subclass."
        },
        {
            "type": "string",
            "name": "$setting_id",
            "description": "ID for dynamic setting, usually coming from `$_POST['customized']`."
        },
        {
            "type": "array",
            "name": "$setting_args",
            "description": "WP_Customize_Setting or a subclass."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3669,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_allowed_urls",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of URLs allowed to be clicked and followed in the Customizer preview.",
    "params": [
        {
            "type": "array",
            "name": "$allowed_urls",
            "description": "An array of allowed URLs."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4450,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_refresh_nonces",
    "type": "filter",
    "params_count": 2,
    "description": "Filters nonces for Customizer.",
    "params": [
        {
            "type": "array",
            "name": "$nonces",
            "description": "Array of refreshed nonces for save and"
        },
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4565,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_previewable_devices",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the available devices to allow previewing in the Customizer.",
    "params": [
        {
            "type": "array",
            "name": "$devices",
            "description": "List of devices with labels and default setting."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4810,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_load_themes",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the theme data loaded in the customizer.",
    "params": [
        {
            "type": "array",
            "name": "$themes",
            "description": "Nested array of theme data."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "List of arguments, such as page, search term, and tags to query for."
        },
        {
            "type": "WP_Customize_Manager",
            "name": "$manager",
            "description": "Instance of Customize manager."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5530,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "start_previewing_theme",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the Customizer theme preview has started.",
    "params": [
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 694,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "stop_previewing_theme",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the Customizer theme preview has stopped.",
    "params": [
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 732,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_register",
    "type": "action",
    "params_count": 1,
    "description": "Fires once WordPress has loaded, allowing scripts and styles to be initialized.",
    "params": [
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 926,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_post_value_set",
    "type": "action",
    "params_count": 3,
    "description": "Announce when any setting's unsanitized post value has been set.",
    "params": [
        {
            "type": "string",
            "name": "$setting_id",
            "description": "Setting ID."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Unsanitized setting post value."
        },
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1818,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_preview_init",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the Customizer preview has initialized and JavaScript",
    "params": [
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1872,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_save_validation_before",
    "type": "action",
    "params_count": 1,
    "description": "Fires before save validation happens.",
    "params": [
        {
            "type": "WP_Customize_Manager",
            "name": "$this",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2686,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_save",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the theme has switched in the Customizer, but before settings",
    "params": [
        {
            "type": "WP_Customize_Manager",
            "name": "$manager",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3358,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "customize_save_after",
    "type": "action",
    "params_count": 1,
    "description": "Fires after Customize settings have been saved.",
    "params": [
        {
            "type": "WP_Customize_Manager",
            "name": "$manager",
            "description": "WP_Customize_Manager instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3411,
        "name": "wp-includes\/class-wp-customize-manager.php"
    }
},
{
    "text": "user_has_cap",
    "type": "filter",
    "params_count": 4,
    "description": "Dynamically filter a user's capabilities.",
    "params": [
        {
            "type": "array",
            "name": "$allcaps",
            "description": "An array of all the user's capabilities."
        },
        {
            "type": "array",
            "name": "$caps",
            "description": "Actual capabilities for meta capability."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Optional parameters passed to has_cap(), typically object ID."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "The user object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 742,
        "name": "wp-includes\/class-wp-user.php"
    }
},
{
    "text": "add_user_role",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after the user has been given a new role.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        },
        {
            "type": "string",
            "name": "$role",
            "description": "The new role."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 534,
        "name": "wp-includes\/class-wp-user.php"
    }
},
{
    "text": "remove_user_role",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a role as been removed from a user.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        },
        {
            "type": "string",
            "name": "$role",
            "description": "The removed role."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 560,
        "name": "wp-includes\/class-wp-user.php"
    }
},
{
    "text": "set_user_role",
    "type": "action",
    "params_count": 3,
    "description": "Fires after the user's role has changed.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        },
        {
            "type": "string",
            "name": "$role",
            "description": "The new role."
        },
        {
            "type": "array",
            "name": "$old_roles",
            "description": "An array of the user's previous roles."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 602,
        "name": "wp-includes\/class-wp-user.php"
    }
},
{
    "text": "get_date_sql",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the date query WHERE clause.",
    "params": [
        {
            "type": "string",
            "name": "$where",
            "description": "WHERE clause of the date query."
        },
        {
            "type": "WP_Date_Query",
            "name": "$this",
            "description": "The WP_Date_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 559,
        "name": "wp-includes\/date.php"
    }
},
{
    "text": "core_version_check_locale",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the locale requested for WordPress core translations.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "Current locale."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 64,
        "name": "wp-includes\/update.php"
    }
},
{
    "text": "core_version_check_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filter the query arguments sent as part of the core version check.",
    "params": [
        {
            "type": "array",
            "name": "$query",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 122,
        "name": "wp-includes\/update.php"
    }
},
{
    "text": "plugins_update_check_locales",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the locales requested for plugin translations.",
    "params": [
        {
            "type": "array",
            "name": "$locales",
            "description": "Plugin locales. Default is all available locales of the site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 310,
        "name": "wp-includes\/update.php"
    }
},
{
    "text": "themes_update_check_locales",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the locales requested for theme translations.",
    "params": [
        {
            "type": "array",
            "name": "$locales",
            "description": "Theme locales. Default is all available locales of the site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 493,
        "name": "wp-includes\/update.php"
    }
},
{
    "text": "wp_get_update_data",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the returned array of update data for plugins, themes, and WordPress core.",
    "params": [
        {
            "type": "array",
            "name": "$update_data",
            "description": "{"
        },
        {
            "type": "array",
            "name": "$titles",
            "description": "An array of update counts and UI strings for available updates."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 652,
        "name": "wp-includes\/update.php"
    }
},
{
    "text": "wp_maybe_auto_update",
    "type": "action",
    "params_count": 0,
    "description": "Filter the query arguments sent as part of the core version check.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 207,
        "name": "wp-includes\/update.php"
    }
},
{
    "text": "link_category",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the bookmarks category name.",
    "params": [
        {
            "type": "string",
            "name": "$cat_name",
            "description": "The category name of bookmarks."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 257,
        "name": "wp-includes\/bookmark-template.php"
    }
},
{
    "text": "wp_list_bookmarks",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the bookmarks list before it is echoed or returned.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "The HTML list of bookmarks."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 298,
        "name": "wp-includes\/bookmark-template.php"
    }
},
{
    "text": "script_loader_src",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the script loader source.",
    "params": [
        {
            "type": "string",
            "name": "$src",
            "description": "Script loader source path."
        },
        {
            "type": "string",
            "name": "$handle",
            "description": "Script handle."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 278,
        "name": "wp-includes\/class.wp-scripts.php"
    }
},
{
    "text": "script_loader_tag",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the HTML script tag of an enqueued script.",
    "params": [
        {
            "type": "string",
            "name": "$tag",
            "description": "The `<script>` tag for the enqueued script."
        },
        {
            "type": "string",
            "name": "$handle",
            "description": "The script's registered handle."
        },
        {
            "type": "string",
            "name": "$src",
            "description": "The script's source URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 338,
        "name": "wp-includes\/class.wp-scripts.php"
    }
},
{
    "text": "print_scripts_array",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of script dependencies left to print.",
    "params": [
        {
            "type": "array",
            "name": "$to_do",
            "description": "An array of script dependencies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 488,
        "name": "wp-includes\/class.wp-scripts.php"
    }
},
{
    "text": "wp_default_scripts",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the WP_Scripts instance is initialized.",
    "params": [
        {
            "type": "WP_Scripts",
            "name": "$this",
            "description": "WP_Scripts instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 148,
        "name": "wp-includes\/class.wp-scripts.php"
    }
},
{
    "text": "wp_admin_bar_class",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the admin bar class to instantiate.",
    "params": [
        {
            "type": "string",
            "name": "$wp_admin_bar_class",
            "description": "Admin bar class to use. Default 'WP_Admin_Bar'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 41,
        "name": "wp-includes\/admin-bar.php"
    }
},
{
    "text": "show_admin_bar",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to show the admin bar.",
    "params": [
        {
            "type": "bool",
            "name": "$show_admin_bar",
            "description": "Whether the admin bar should be shown. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1030,
        "name": "wp-includes\/admin-bar.php"
    }
},
{
    "text": "admin_bar_menu",
    "type": "action",
    "params_count": 1,
    "description": "Load all necessary admin bar items.",
    "params": [
        {
            "type": "WP_Admin_Bar",
            "name": "$wp_admin_bar",
            "description": "WP_Admin_Bar instance, passed by reference"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 83,
        "name": "wp-includes\/admin-bar.php"
    }
},
{
    "text": "wp_before_admin_bar_render",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the admin bar is rendered.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 90,
        "name": "wp-includes\/admin-bar.php"
    }
},
{
    "text": "wp_after_admin_bar_render",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the admin bar is rendered.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 99,
        "name": "wp-includes\/admin-bar.php"
    }
},
{
    "text": "switch_locale",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the locale is switched.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The new locale."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 90,
        "name": "wp-includes\/class-wp-locale-switcher.php"
    }
},
{
    "text": "restore_previous_locale",
    "type": "action",
    "params_count": 2,
    "description": "Fires when the locale is restored to the previous one.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The new locale."
        },
        {
            "type": "string",
            "name": "$previous_locale",
            "description": "The previous locale."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 127,
        "name": "wp-includes\/class-wp-locale-switcher.php"
    }
},
{
    "text": "change_locale",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the locale is switched to or restored.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The new locale."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 233,
        "name": "wp-includes\/class-wp-locale-switcher.php"
    }
},
{
    "text": "can_add_user_to_blog",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether a user should be added to a site.",
    "params": [
        {
            "type": "bool|WP_Error",
            "name": "$retval",
            "description": "True if the user should be added to the site, false"
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$role",
            "description": "User role."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 175,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "is_email_address_unsafe",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether an email address is unsafe.",
    "params": [
        {
            "type": "bool",
            "name": "$is_email_address_unsafe",
            "description": "Whether the email address is \"unsafe\". Default false."
        },
        {
            "type": "string",
            "name": "$user_email",
            "description": "User email address."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 413,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "wpmu_validate_user_signup",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the validated user registration details.",
    "params": [
        {
            "type": "array",
            "name": "$result",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 545,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "minimum_site_name_length",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the minimum site name length required when validating a site signup.",
    "params": [
        {
            "type": "int",
            "name": "$length",
            "description": "The minimum site name length. Default 4."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 612,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "newblogname",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the new site name during registration.",
    "params": [
        {
            "type": "string",
            "name": "$blogname",
            "description": "Site name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 637,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "wpmu_validate_blog_signup",
    "type": "filter",
    "params_count": 1,
    "description": "Filters site details and error messages following registration.",
    "params": [
        {
            "type": "array",
            "name": "$result",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 689,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "signup_site_meta",
    "type": "filter",
    "params_count": 7,
    "description": "Filters the metadata for a site signup.",
    "params": [
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data. Default empty array."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "The requested domain."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The requested path."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "The requested site title."
        },
        {
            "type": "string",
            "name": "$user",
            "description": "The user's requested login name."
        },
        {
            "type": "string",
            "name": "$user_email",
            "description": "The user's email address."
        },
        {
            "type": "string",
            "name": "$key",
            "description": "The user's activation key."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 726,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "signup_user_meta",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the metadata for a user signup.",
    "params": [
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data. Default empty array."
        },
        {
            "type": "string",
            "name": "$user",
            "description": "The user's requested login name."
        },
        {
            "type": "string",
            "name": "$user_email",
            "description": "The user's email address."
        },
        {
            "type": "string",
            "name": "$key",
            "description": "The user's activation key."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 789,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "newblog_notify_siteadmin",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the message body of the new site activation email sent",
    "params": [
        {
            "type": "string",
            "name": "$msg",
            "description": "Email body."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1293,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "newuser_notify_siteadmin",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the message body of the new user activation email sent",
    "params": [
        {
            "type": "string",
            "name": "$msg",
            "description": "Email body."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "WP_User instance of the new user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1337,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "domain_exists",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether a site name is taken.",
    "params": [
        {
            "type": "int|null",
            "name": "$result",
            "description": "The site ID if the site name exists, null otherwise."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Domain to be checked."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path to be checked."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "Network ID. Relevant only on multi-network installations."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1383,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "update_welcome_email",
    "type": "filter",
    "params_count": 6,
    "description": "Filters the content of the welcome email after site activation.",
    "params": [
        {
            "type": "string",
            "name": "$welcome_email",
            "description": "Message body of the email."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$password",
            "description": "User password."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "Site title."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data. By default, contains the requested privacy setting and lang_id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1594,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "update_welcome_subject",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the subject of the welcome email after site activation.",
    "params": [
        {
            "type": "string",
            "name": "$subject",
            "description": "Subject of the email."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1617,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "update_welcome_user_email",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the content of the welcome email after user activation.",
    "params": [
        {
            "type": "string",
            "name": "$welcome_email",
            "description": "The message body of the account activation success email."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$password",
            "description": "User password."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data. Default empty array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1677,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "update_welcome_user_subject",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the subject of the welcome email after user activation.",
    "params": [
        {
            "type": "string",
            "name": "$subject",
            "description": "Subject of the email."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1705,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "pre_get_space_used",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the amount of storage space used by the current site.",
    "params": [
        {
            "type": "int|bool",
            "name": "$space_used",
            "description": "The amount of used space, in megabytes. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2423,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "get_space_allowed",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the upload quota for the current site.",
    "params": [
        {
            "type": "int",
            "name": "$space_allowed",
            "description": "Upload quota in megabytes for the current blog."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2455,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "wp_is_large_network",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether the network is considered large.",
    "params": [
        {
            "type": "bool",
            "name": "$is_large_network",
            "description": "Whether the network has more than 10000 users or sites."
        },
        {
            "type": "string",
            "name": "$component",
            "description": "The component to count. Accepts 'users', or 'sites'."
        },
        {
            "type": "int",
            "name": "$count",
            "description": "The count of items for the component."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "The ID of the network being checked."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2543,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "subdirectory_reserved_names",
    "type": "filter",
    "params_count": 1,
    "description": "Filters reserved site names on a sub-directory Multisite installation.",
    "params": [
        {
            "type": "array",
            "name": "$subdirectory_reserved_names",
            "description": "Array of reserved names."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2573,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "new_network_admin_email_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text of the email sent when a change of network admin email address is attempted.",
    "params": [
        {
            "type": "string",
            "name": "$email_text",
            "description": "Text in the email."
        },
        {
            "type": "array",
            "name": "$new_admin_email",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2638,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "send_network_admin_email_change_email",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether to send the network admin email change notification email.",
    "params": [
        {
            "type": "bool",
            "name": "$send",
            "description": "Whether to send the email notification."
        },
        {
            "type": "string",
            "name": "$old_email",
            "description": "The old network admin email address."
        },
        {
            "type": "string",
            "name": "$new_email",
            "description": "The new network admin email address."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "ID of the network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2682,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "network_admin_email_change_email",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the contents of the email notification sent when the network admin email address is changed.",
    "params": [
        {
            "type": "array",
            "name": "$email_change_email",
            "description": "{"
        },
        {
            "type": "string",
            "name": "$old_email",
            "description": "The old network admin email address."
        },
        {
            "type": "string",
            "name": "$new_email",
            "description": "The new network admin email address."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "ID of the network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2733,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "add_user_to_blog",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a user is added to a site.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$role",
            "description": "User role."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 204,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "remove_user_from_blog",
    "type": "action",
    "params_count": 2,
    "description": "Fires before a user is removed from a site.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 241,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "after_signup_site",
    "type": "action",
    "params_count": 7,
    "description": "Fires after site signup information has been written to the database.",
    "params": [
        {
            "type": "string",
            "name": "$domain",
            "description": "The requested domain."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The requested path."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "The requested site title."
        },
        {
            "type": "string",
            "name": "$user",
            "description": "The user's requested login name."
        },
        {
            "type": "string",
            "name": "$user_email",
            "description": "The user's email address."
        },
        {
            "type": "string",
            "name": "$key",
            "description": "The user's activation key."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data. By default, contains the requested privacy setting and lang_id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 752,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "after_signup_user",
    "type": "action",
    "params_count": 4,
    "description": "Fires after a user's signup information has been written to the database.",
    "params": [
        {
            "type": "string",
            "name": "$user",
            "description": "The user's requested login name."
        },
        {
            "type": "string",
            "name": "$user_email",
            "description": "The user's email address."
        },
        {
            "type": "string",
            "name": "$key",
            "description": "The user's activation key."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data. Default empty array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 812,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "wpmu_activate_user",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a new user is activated.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "int",
            "name": "$password",
            "description": "User password."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1087,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "wpmu_activate_blog",
    "type": "action",
    "params_count": 5,
    "description": "Fires immediately after a site is activated.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "int",
            "name": "$password",
            "description": "User password."
        },
        {
            "type": "string",
            "name": "$signup_title",
            "description": "Site title."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Signup meta data. By default, contains the requested privacy setting and lang_id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1116,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "wpmu_new_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a new user is created.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1154,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "wpmu_new_blog",
    "type": "action",
    "params_count": 6,
    "description": "Fires immediately after a new site is created.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Site ID."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Site domain."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Site path."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "Network ID. Only relevant on multi-network installations."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Meta data. Used to set initial site options."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1245,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "added_existing_user",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after an existing user is added to a site.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "mixed",
            "name": "$result",
            "description": "True on success or a WP_Error object if the user doesn't exist"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2126,
        "name": "wp-includes\/ms-functions.php"
    }
},
{
    "text": "hook",
    "type": "filter",
    "params_count": 3,
    "description": "Hook a function or method to a specific filter action.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 72,
        "name": "wp-includes\/plugin.php"
    }
},
{
    "text": "example_filter",
    "type": "filter",
    "params_count": 3,
    "description": "Call the functions added to a filter hook.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 164,
        "name": "wp-includes\/plugin.php"
    }
},
{
    "text": "wpdocs_filter",
    "type": "filter",
    "params_count": 2,
    "description": "Fires functions attached to a deprecated filter hook.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 582,
        "name": "wp-includes\/plugin.php"
    }
},
{
    "text": "_deprecated wpdocs_filter",
    "type": "filter",
    "params_count": 4,
    "description": "Fires functions attached to a deprecated filter hook.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 585,
        "name": "wp-includes\/plugin.php"
    }
},
{
    "text": "oembed_default_width",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the maxwidth oEmbed parameter.",
    "params": [
        {
            "type": "int",
            "name": "$maxwidth",
            "description": "Maximum allowed width. Default 600."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 32,
        "name": "wp-includes\/class-wp-oembed-controller.php"
    }
},
{
    "text": "oembed_request_post_id",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the determined post ID.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The requested URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 118,
        "name": "wp-includes\/class-wp-oembed-controller.php"
    }
},
{
    "text": "rest_oembed_ttl",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the oEmbed TTL value (time to live).",
    "params": [
        {
            "type": "int",
            "name": "$time",
            "description": "Time to live (in seconds)."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The attempted embed URL."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of embed request arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 194,
        "name": "wp-includes\/class-wp-oembed-controller.php"
    }
},
{
    "text": "wp_print_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Fires before scripts in the $handles queue are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 72,
        "name": "wp-includes\/functions.wp-scripts.php"
    }
},
{
    "text": "wp_feed_cache_transient_lifetime",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the transient lifetime of the feed cache.",
    "params": [
        {
            "type": "int",
            "name": "$lifetime",
            "description": "Cache duration in seconds. Default is 43200 seconds (12 hours)."
        },
        {
            "type": "string",
            "name": "$filename",
            "description": "Unique identifier for the cache object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 66,
        "name": "wp-includes\/class-wp-feed-cache-transient.php"
    }
},
{
    "text": "get_bloginfo_rss",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the bloginfo for use in RSS feeds.",
    "params": [
        {
            "type": "string",
            "name": "$info",
            "description": "Converted string value of the blog information."
        },
        {
            "type": "string",
            "name": "$show",
            "description": "The type of blog information to retrieve."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 39,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "bloginfo_rss",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the bloginfo for display in RSS feeds.",
    "params": [
        {
            "type": "string",
            "name": "$rss_container",
            "description": "RSS container for the blog information."
        },
        {
            "type": "string",
            "name": "$show",
            "description": "The type of blog information to retrieve."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 65,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "default_feed",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default feed type.",
    "params": [
        {
            "type": "string",
            "name": "$feed_type",
            "description": "Type of default feed. Possible values include 'rss2', 'atom'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 87,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "get_wp_title_rss",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the blog title for use as the feed title.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "The current blog title."
        },
        {
            "type": "string",
            "name": "$deprecated",
            "description": "Unused."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 115,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "wp_title_rss",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the blog title for display of the feed title.",
    "params": [
        {
            "type": "string",
            "name": "$wp_title_rss",
            "description": "The current blog title."
        },
        {
            "type": "string",
            "name": "$deprecated",
            "description": "Unused."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 143,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "the_title_rss",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post title for use in a feed.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "The current post title."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 163,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "the_content_feed",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post content for use in feeds.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The current post content."
        },
        {
            "type": "string",
            "name": "$feed_type",
            "description": "Type of feed. Possible values include 'rss2', 'atom'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 201,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "the_excerpt_rss",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post excerpt for a feed.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The current post excerpt."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 229,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "the_permalink_rss",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the permalink to the post for use in feeds.",
    "params": [
        {
            "type": "string",
            "name": "$post_permalink",
            "description": "The current post permalink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 245,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "comments_link_feed",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comments permalink for the current post.",
    "params": [
        {
            "type": "string",
            "name": "$comment_permalink",
            "description": "The current comment permalink with"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 263,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "comment_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the current comment's permalink.",
    "params": [
        {
            "type": "string",
            "name": "$comment_permalink",
            "description": "The current comment permalink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 312,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "comment_author_rss",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the current comment author for use in a feed.",
    "params": [
        {
            "type": "string",
            "name": "$comment_author",
            "description": "The current comment author."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 332,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "comment_text_rss",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the current comment content for use in a feed.",
    "params": [
        {
            "type": "string",
            "name": "$comment_text",
            "description": "The content of the current comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 358,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "the_category_rss",
    "type": "filter",
    "params_count": 2,
    "description": "Filters all of the post categories for display in a feed.",
    "params": [
        {
            "type": "string",
            "name": "$the_list",
            "description": "All of the RSS post categories."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Type of feed. Possible values include 'rss2', 'atom'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 414,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "rss_enclosure",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the RSS enclosure HTML link tag for the current post.",
    "params": [
        {
            "type": "string",
            "name": "$html_link_tag",
            "description": "The HTML link tag with a URI and other attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 479,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "atom_enclosure",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the atom enclosure HTML link tag for the current post.",
    "params": [
        {
            "type": "string",
            "name": "$html_link_tag",
            "description": "The HTML link tag with a URI and other attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 513,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "self_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the current feed URL.",
    "params": [
        {
            "type": "string",
            "name": "$feed_link",
            "description": "The link for the feed with set URL scheme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 625,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "feed_content_type",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the content type for a specific feed type.",
    "params": [
        {
            "type": "string",
            "name": "$content_type",
            "description": "Content type indicating the type of data that a feed contains."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 657,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "wp_feed_options",
    "type": "action",
    "params_count": 2,
    "description": "Fires just before processing the SimplePie feed object.",
    "params": [
        {
            "type": "object",
            "name": "$feed",
            "description": "SimplePie feed object (passed by reference)."
        },
        {
            "type": "mixed",
            "name": "$url",
            "description": "URL of feed to retrieve. If an array of URLs, the feeds are merged."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 702,
        "name": "wp-includes\/feed.php"
    }
},
{
    "text": "wp_doing_ajax",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether the current request is a WordPress Ajax request.",
    "params": [
        {
            "type": "bool",
            "name": "$wp_doing_ajax",
            "description": "Whether the current request is a WordPress Ajax request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1063,
        "name": "wp-includes\/load.php"
    }
},
{
    "text": "wp_doing_cron",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether the current request is a WordPress cron request.",
    "params": [
        {
            "type": "bool",
            "name": "$wp_doing_cron",
            "description": "Whether the current request is a WordPress cron request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1081,
        "name": "wp-includes\/load.php"
    }
},
{
    "text": "file_mod_allowed",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether file modifications are allowed.",
    "params": [
        {
            "type": "bool",
            "name": "$file_mod_allowed",
            "description": "Whether file modifications are allowed."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The usage context."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1115,
        "name": "wp-includes\/load.php"
    }
},
{
    "text": "shutdown",
    "type": "action",
    "params_count": 0,
    "description": "Fires just before PHP shuts down execution.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 679,
        "name": "wp-includes\/load.php"
    }
},
{
    "text": "the_sites",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the site query results.",
    "params": [
        {
            "type": "array",
            "name": "$_sites",
            "description": "An array of WP_Site objects."
        },
        {
            "type": "WP_Site_Query",
            "name": "$this",
            "description": "Current instance of WP_Site_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 310,
        "name": "wp-includes\/class-wp-site-query.php"
    }
},
{
    "text": "site_search_columns",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the columns to search in a WP_Site_Query search.",
    "params": [
        {
            "type": "array",
            "name": "$search_columns",
            "description": "Array of column names to be searched."
        },
        {
            "type": "string",
            "name": "$search",
            "description": "Text being searched."
        },
        {
            "type": "WP_Site_Query",
            "name": "$this",
            "description": "The current WP_Site_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 513,
        "name": "wp-includes\/class-wp-site-query.php"
    }
},
{
    "text": "sites_clauses",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the site query clauses.",
    "params": [
        {
            "type": "array",
            "name": "$pieces",
            "description": "A compacted array of site query clauses."
        },
        {
            "type": "WP_Site_Query",
            "name": "$this",
            "description": "Current instance of WP_Site_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 538,
        "name": "wp-includes\/class-wp-site-query.php"
    }
},
{
    "text": "found_sites_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the query used to retrieve found site count.",
    "params": [
        {
            "type": "string",
            "name": "$found_sites_query",
            "description": "SQL query. Default 'SELECT FOUND_ROWS()'."
        },
        {
            "type": "WP_Site_Query",
            "name": "$site_query",
            "description": "The `WP_Site_Query` instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 601,
        "name": "wp-includes\/class-wp-site-query.php"
    }
},
{
    "text": "parse_site_query",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the site query vars have been parsed.",
    "params": [
        {
            "type": "WP_Site_Query",
            "name": "$this",
            "description": "The WP_Site_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 205,
        "name": "wp-includes\/class-wp-site-query.php"
    }
},
{
    "text": "pre_get_sites",
    "type": "action",
    "params_count": 1,
    "description": "Fires before sites are retrieved.",
    "params": [
        {
            "type": "WP_Site_Query",
            "name": "$this",
            "description": "Current instance of WP_Site_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 241,
        "name": "wp-includes\/class-wp-site-query.php"
    }
},
{
    "text": "rss_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the RSS Feed Header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 30,
        "name": "wp-includes\/feed-rss.php"
    }
},
{
    "text": "rss_item",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of each RSS feed item.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 44,
        "name": "wp-includes\/feed-rss.php"
    }
},
{
    "text": "the_permalink",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the display of the permalink for the current post.",
    "params": [
        {
            "type": "string",
            "name": "$permalink",
            "description": "The permalink for the current post."
        },
        {
            "type": "int|WP_Post",
            "name": "$post",
            "description": "Post ID, WP_Post object, or 0. Default 0."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 27,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "user_trailingslashit",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the trailing-slashed string, depending on whether the site is set to use trailing slashes.",
    "params": [
        {
            "type": "string",
            "name": "$string",
            "description": "URL with or without a trailing slash."
        },
        {
            "type": "string",
            "name": "$type_of_url",
            "description": "The type of URL being considered. Accepts 'single', 'single_trackback',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 64,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "pre_post_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the permalink structure for a post before token replacement occurs.",
    "params": [
        {
            "type": "string",
            "name": "$permalink",
            "description": "The site's permalink structure."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post in question."
        },
        {
            "type": "bool",
            "name": "$leavename",
            "description": "Whether to keep the post name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 163,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "post_link_category",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the category that gets used in the %category% permalink token.",
    "params": [
        {
            "type": "WP_Term",
            "name": "$cat",
            "description": "The category to use in the permalink."
        },
        {
            "type": "array",
            "name": "$cats",
            "description": "Array of all categories (WP_Term objects) associated with the post."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post in question."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 185,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "post_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the permalink for a post.",
    "params": [
        {
            "type": "string",
            "name": "$permalink",
            "description": "The post's permalink."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post in question."
        },
        {
            "type": "bool",
            "name": "$leavename",
            "description": "Whether to keep the post name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 240,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "post_type_link",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the permalink for a post of a custom post type.",
    "params": [
        {
            "type": "string",
            "name": "$post_link",
            "description": "The post's permalink."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post in question."
        },
        {
            "type": "bool",
            "name": "$leavename",
            "description": "Whether to keep the post name."
        },
        {
            "type": "bool",
            "name": "$sample",
            "description": "Is it a sample permalink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 298,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "page_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the permalink for a page.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The page's permalink."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The ID of the page."
        },
        {
            "type": "bool",
            "name": "$sample",
            "description": "Is it a sample permalink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 331,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "_get_page_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the permalink for a non-page_on_front page.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The page's permalink."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The ID of the page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 378,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "attachment_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the permalink for an attachment.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The attachment's permalink."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 436,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "year_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the year archive permalink.",
    "params": [
        {
            "type": "string",
            "name": "$yearlink",
            "description": "Permalink for the year archive."
        },
        {
            "type": "int",
            "name": "$year",
            "description": "Year for the archive."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 469,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "month_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the month archive permalink.",
    "params": [
        {
            "type": "string",
            "name": "$monthlink",
            "description": "Permalink for the month archive."
        },
        {
            "type": "int",
            "name": "$year",
            "description": "Year for the archive."
        },
        {
            "type": "int",
            "name": "$month",
            "description": "The month for the archive."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 507,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "day_link",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the day archive permalink.",
    "params": [
        {
            "type": "string",
            "name": "$daylink",
            "description": "Permalink for the day archive."
        },
        {
            "type": "int",
            "name": "$year",
            "description": "Year for the archive."
        },
        {
            "type": "int",
            "name": "$month",
            "description": "Month for the archive."
        },
        {
            "type": "int",
            "name": "$day",
            "description": "The day for the archive."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 551,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "the_feed_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the feed link anchor tag.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The complete anchor tag for a feed link."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "The feed type, or an empty string for the"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 574,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "feed_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the feed type permalink.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The feed permalink."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "Feed type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 621,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "post_comments_feed_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post comments feed permalink.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "Post comments feed permalink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 680,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "post_comments_feed_link_html",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the post comment feed link anchor tag.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The complete anchor tag for the comment feed link."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "The feed type, or an empty string for the default feed type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 712,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "author_feed_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the feed link for a given author.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The author feed link."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "Feed type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 754,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "category_feed_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the category feed link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The category feed link."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "Feed type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 830,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "tag_feed_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post tag feed link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The tag feed link."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "Feed type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 840,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "taxonomy_feed_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the feed link for a taxonomy other than 'category' or 'post_tag'.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The taxonomy feed link."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "Feed type."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 851,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_edit_tag_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the edit link for a tag (or term in another taxonomy).",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The term edit link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 887,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "edit_tag_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the anchor tag for the edit link for a tag (or term in another taxonomy).",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The anchor tag for the edit link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 911,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_edit_term_link",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the edit link for a term.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The edit link."
        },
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy name."
        },
        {
            "type": "string",
            "name": "$object_type",
            "description": "The object type (eg. the post type)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 966,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "edit_term_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the anchor tag for the edit link of a term.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The anchor tag for the edit link."
        },
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1006,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "search_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the search permalink.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "Search permalink."
        },
        {
            "type": "string",
            "name": "$search",
            "description": "The URL-encoded search term."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1051,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "search_feed_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the search feed link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "Search feed link."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "Feed type."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The search type. One of 'posts' or 'comments'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1090,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "post_type_archive_feed_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post type archive feed link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The post type archive feed link."
        },
        {
            "type": "string",
            "name": "$feed",
            "description": "Feed type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1212,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "preview_post_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL used for a post preview.",
    "params": [
        {
            "type": "string",
            "name": "$preview_link",
            "description": "URL used for the post preview."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1254,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_edit_post_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the post edit link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The edit link."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The link context. If set to 'display' then ampersands"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1304,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "edit_post_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the post edit link anchor tag.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "Anchor tag for the edit link."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "Anchor text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1343,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_delete_post_link",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the post delete link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The delete link."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "bool",
            "name": "$force_delete",
            "description": "Whether to bypass the trash and force deletion. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1385,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_edit_comment_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment edit link.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The edit link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1411,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "edit_comment_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment edit link anchor tag.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "Anchor tag for the edit link."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "Anchor text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1445,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_edit_bookmark_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the bookmark edit link.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The edit link."
        },
        {
            "type": "int",
            "name": "$link_id",
            "description": "Bookmark ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1472,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "edit_bookmark_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the bookmark edit link anchor tag.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "Anchor tag for the edit link."
        },
        {
            "type": "int",
            "name": "$link_id",
            "description": "Bookmark ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1504,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_edit_user_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the user edit link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The edit link."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1540,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_pagenum_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the page number link for the current request.",
    "params": [
        {
            "type": "string",
            "name": "$result",
            "description": "The page number link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2145,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "next_posts_link_attributes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the anchor tag attributes for the next posts page link.",
    "params": [
        {
            "type": "string",
            "name": "$attributes",
            "description": "Attributes for the anchor tag."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2229,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "previous_posts_link_attributes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the anchor tag attributes for the previous posts page link.",
    "params": [
        {
            "type": "string",
            "name": "$attributes",
            "description": "Attributes for the anchor tag."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2312,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "navigation_markup_template",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the navigation markup template.",
    "params": [
        {
            "type": "string",
            "name": "$template",
            "description": "The default template."
        },
        {
            "type": "string",
            "name": "$class",
            "description": "The class passed by the calling function."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2609,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_comments_pagenum_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comments page number link for the current request.",
    "params": [
        {
            "type": "string",
            "name": "$result",
            "description": "The comments page number link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2655,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "next_comments_link_attributes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the anchor tag attributes for the next comments page link.",
    "params": [
        {
            "type": "string",
            "name": "$attributes",
            "description": "Attributes for the anchor tag."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2702,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "previous_comments_link_attributes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the anchor tag attributes for the previous comments page link.",
    "params": [
        {
            "type": "string",
            "name": "$attributes",
            "description": "Attributes for the anchor tag."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2746,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "home_url",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the home URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete home URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the home URL. Blank string if no path is specified."
        },
        {
            "type": "string|null",
            "name": "$orig_scheme",
            "description": "Scheme to give the home URL context. Accepts 'http', 'https',"
        },
        {
            "type": "int|null",
            "name": "$blog_id",
            "description": "Site ID, or null for the current site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2973,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "site_url",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the site URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete site URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the site URL. Blank string if no path is specified."
        },
        {
            "type": "string|null",
            "name": "$scheme",
            "description": "Scheme to give the site URL context. Accepts 'http', 'https', 'login',"
        },
        {
            "type": "int|null",
            "name": "$blog_id",
            "description": "Site ID, or null for the current site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3036,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "admin_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the admin area URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete admin area URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the admin area URL. Blank string if no path is specified."
        },
        {
            "type": "int|null",
            "name": "$blog_id",
            "description": "Site ID, or null for the current site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3080,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "includes_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL to the includes directory.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL to the includes directory including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the URL to the wp-includes directory. Blank string"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3108,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "content_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL to the content directory.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL to the content directory including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the URL to the content directory. Blank string"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3134,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "plugins_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the URL to the plugins directory.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL to the plugins directory including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the URL to the plugins directory. Blank string"
        },
        {
            "type": "string",
            "name": "$plugin",
            "description": "The plugin file path to be relative to. Blank string if no plugin"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3185,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "network_site_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the network site URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete network site URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the network site URL. Blank string if"
        },
        {
            "type": "string|null",
            "name": "$scheme",
            "description": "Scheme to give the URL context. Accepts 'http', 'https',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3229,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "network_home_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the network home URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete network home URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the network home URL. Blank string"
        },
        {
            "type": "string|null",
            "name": "$orig_scheme",
            "description": "Scheme to give the URL context. Accepts 'http', 'https',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3275,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "network_admin_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the network admin URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete network admin URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the network admin URL. Blank string if"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3306,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "user_admin_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the user admin URL for the current user.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the URL. Blank string if"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3334,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "self_admin_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the admin URL for the current site or network depending on context.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the URL. Blank string if no path is specified."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "The scheme to use."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3365,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "set_url_scheme",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the resulting URL after setting the scheme.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL including scheme and path."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Scheme applied to the URL. One of 'http', 'https', or 'relative'."
        },
        {
            "type": "string|null",
            "name": "$orig_scheme",
            "description": "Scheme requested for the URL. One of 'http', 'https', 'login',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3412,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "user_dashboard_url",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the dashboard URL for a user.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL including scheme and path."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path relative to the URL. Blank string if no path is specified."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Scheme to give the URL context. Accepts 'http', 'https', 'login',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3463,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "edit_profile_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the URL for a user's profile editor.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The complete URL including scheme and path."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        },
        {
            "type": "string",
            "name": "$scheme",
            "description": "Scheme to give the URL context. Accepts 'http', 'https', 'login',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3496,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_canonical_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the canonical URL for a post.",
    "params": [
        {
            "type": "string",
            "name": "$canonical_url",
            "description": "The post's canonical URL."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3549,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "pre_get_shortlink",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether to preempt generating a shortlink for the given post.",
    "params": [
        {
            "type": "bool|string",
            "name": "$return",
            "description": "Short-circuit return value. Either false or a URL string."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "Post ID, or 0 for the current post."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The context for the link. One of 'post' or 'query',"
        },
        {
            "type": "bool",
            "name": "$allow_slugs",
            "description": "Whether to allow post slugs in the shortlink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3610,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_shortlink",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the shortlink for a post.",
    "params": [
        {
            "type": "string",
            "name": "$shortlink",
            "description": "Shortlink URL."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "Post ID, or 0 for the current post."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The context for the link. One of 'post' or 'query',"
        },
        {
            "type": "bool",
            "name": "$allow_slugs",
            "description": "Whether to allow post slugs in the shortlink. Not used by default."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3649,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "the_shortlink",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the short link anchor tag for a post.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "Shortlink anchor tag."
        },
        {
            "type": "string",
            "name": "$shortlink",
            "description": "Shortlink URL."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "Shortlink's text."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "Shortlink's title attribute."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3725,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "pre_get_avatar_data",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to retrieve the avatar URL early.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to get_avatar_data(), after processing."
        },
        {
            "type": "mixed",
            "name": "$id_or_email",
            "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3873,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_avatar_comment_types",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of allowed comment types for retrieving avatars.",
    "params": [
        {
            "type": "array",
            "name": "$types",
            "description": "An array of content types. Default only contains 'comment'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3912,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "get_avatar_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the avatar URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The URL of the avatar."
        },
        {
            "type": "mixed",
            "name": "$id_or_email",
            "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,"
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to get_avatar_data(), after processing."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3972,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "theme_file_uri",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL to a file in the theme.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The file URL."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "The requested file to search for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4016,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "parent_theme_file_uri",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL to a file in the parent theme.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The file URL."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "The requested file to search for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4044,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "theme_file_path",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the path to a file in the theme.",
    "params": [
        {
            "type": "string",
            "name": "$path",
            "description": "The file path."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "The requested file to search for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4077,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "parent_theme_file_path",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the path to a file in the parent theme.",
    "params": [
        {
            "type": "string",
            "name": "$path",
            "description": "The file path."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "The requested file to search for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4105,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "privacy_policy_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL of the privacy policy page.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The URL to the privacy policy page. Empty string"
        },
        {
            "type": "int",
            "name": "$policy_page_id",
            "description": "The ID of privacy policy page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4132,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "the_privacy_policy_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the privacy policy link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The privacy policy link. Empty string if it"
        },
        {
            "type": "string",
            "name": "$privacy_policy_url",
            "description": "The URL of the privacy policy. Empty string"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4182,
        "name": "wp-includes\/link-template.php"
    }
},
{
    "text": "date_i18n",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the date formatted based on the locale.",
    "params": [
        {
            "type": "string",
            "name": "$j",
            "description": "Formatted date string."
        },
        {
            "type": "string",
            "name": "$req_format",
            "description": "Format to display the date."
        },
        {
            "type": "int",
            "name": "$i",
            "description": "Unix timestamp."
        },
        {
            "type": "bool",
            "name": "$gmt",
            "description": "Whether to convert to GMT for time. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 149,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "number_format_i18n",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the number formatted based on the locale.",
    "params": [
        {
            "type": "string",
            "name": "$formatted",
            "description": "Converted number in string format."
        },
        {
            "type": "float",
            "name": "$number",
            "description": "The number to convert based on locale."
        },
        {
            "type": "int",
            "name": "$decimals",
            "description": "Precision of the number of decimal places."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 236,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "enclosure_links",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of enclosure links before querying the database.",
    "params": [
        {
            "type": "array",
            "name": "$post_links",
            "description": "An array of enclosure links."
        },
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 602,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "removable_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of query variables to remove.",
    "params": [
        {
            "type": "array",
            "name": "$removable_query_args",
            "description": "An array of query variables to remove from a URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 898,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "status_header",
    "type": "filter",
    "params_count": 4,
    "description": "Filters an HTTP status header.",
    "params": [
        {
            "type": "string",
            "name": "$status_header",
            "description": "HTTP status header."
        },
        {
            "type": "int",
            "name": "$code",
            "description": "HTTP status code."
        },
        {
            "type": "string",
            "name": "$description",
            "description": "Description for the status code."
        },
        {
            "type": "string",
            "name": "$protocol",
            "description": "Server protocol."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1089,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "nocache_headers",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the cache-controlling headers.",
    "params": [
        {
            "type": "array",
            "name": "$headers",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1125,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "robots_txt",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the robots.txt output.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "Robots.txt output."
        },
        {
            "type": "bool",
            "name": "$public",
            "description": "Whether the site is considered \"public\"."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1339,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "upload_dir",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the uploads directory data.",
    "params": [
        {
            "type": "array",
            "name": "$uploads",
            "description": "Array of upload directory data with keys of 'path',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1901,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_unique_filename",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the result when generating a unique file name.",
    "params": [
        {
            "type": "string",
            "name": "$filename",
            "description": "Unique file name."
        },
        {
            "type": "string",
            "name": "$ext",
            "description": "File extension, eg. \".png\"."
        },
        {
            "type": "string",
            "name": "$dir",
            "description": "Directory path."
        },
        {
            "type": "callable|null",
            "name": "$unique_filename_callback",
            "description": "Callback function that generates the unique file name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2103,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_upload_bits",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to treat the upload bits as an error.",
    "params": [
        {
            "type": "mixed",
            "name": "$upload_bits_error",
            "description": "An array of upload bits data, or a non-array error to return."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2170,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_check_filetype_and_ext",
    "type": "filter",
    "params_count": 6,
    "description": "Filters the \"real\" file type of the given file.",
    "params": [
        {
            "type": "array",
            "name": "$wp_check_filetype_and_ext",
            "description": "File data array containing 'ext', 'type', and"
        },
        {
            "type": "string",
            "name": "$file",
            "description": "Full path to the file."
        },
        {
            "type": "string",
            "name": "$filename",
            "description": "The name of the file (may differ from $file due to"
        },
        {
            "type": "array",
            "name": "$mimes",
            "description": "Key is the file extension with value as the mime type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2370,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "upload_mimes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters list of allowed mime types and file extensions.",
    "params": [
        {
            "type": "array",
            "name": "$t",
            "description": "Mime types keyed by the file extension regex corresponding to"
        },
        {
            "type": "int|WP_User|null",
            "name": "$user",
            "description": "User ID, User object or null if not provided (indicates current user)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2593,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_die_ajax_handler",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the callback for killing WordPress execution for Ajax requests.",
    "params": [
        {
            "type": "callable",
            "name": "$function",
            "description": "Callback function name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2685,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_die_xmlrpc_handler",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the callback for killing WordPress execution for XML-RPC requests.",
    "params": [
        {
            "type": "callable",
            "name": "$function",
            "description": "Callback function name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2694,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_die_handler",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the callback for killing WordPress execution for all non-Ajax, non-XML-RPC requests.",
    "params": [
        {
            "type": "callable",
            "name": "$function",
            "description": "Callback function name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2703,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "smilies",
    "type": "filter",
    "params_count": 1,
    "description": "Filters all the smilies.",
    "params": [
        {
            "type": "array",
            "name": "$wpsmiliestrans",
            "description": "List of the smilies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3447,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "iis7_supports_permalinks",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether IIS 7+ supports pretty permalinks.",
    "params": [
        {
            "type": "bool",
            "name": "$supports_permalinks",
            "description": "Whether IIS7 supports permalinks. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4253,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "get_main_network_id",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the main network ID.",
    "params": [
        {
            "type": "int",
            "name": "$main_network_id",
            "description": "The ID of the main network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4518,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "global_terms_enabled",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether global terms are enabled.",
    "params": [
        {
            "type": "null",
            "name": "$enabled",
            "description": "Whether global terms are enabled."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4547,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "kses_allowed_protocols",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of protocols allowed in HTML attributes.",
    "params": [
        {
            "type": "array",
            "name": "$protocols",
            "description": "Array of allowed protocols e.g. 'http', 'ftp', 'tel', and more."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5118,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_checkdate",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether the given date is valid for the Gregorian calendar.",
    "params": [
        {
            "type": "bool",
            "name": "$checkdate",
            "description": "Whether the given date is valid."
        },
        {
            "type": "string",
            "name": "$source_date",
            "description": "Date to check."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5264,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_auth_check_same_domain",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether the authentication check originated at the same domain.",
    "params": [
        {
            "type": "bool",
            "name": "$same_domain",
            "description": "Whether the authentication check originated at the same domain."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5326,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_delete_file",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the path of the file to delete.",
    "params": [
        {
            "type": "string",
            "name": "$file",
            "description": "Path to the file to delete."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5519,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "admin_memory_limit",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the maximum memory limit available for administration screens.",
    "params": [
        {
            "type": "int|string",
            "name": "$filtered_limit",
            "description": "The maximum WordPress memory limit. Accepts an integer"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5651,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "image_memory_limit",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the memory limit allocated for image manipulation.",
    "params": [
        {
            "type": "int|string",
            "name": "$filtered_limit",
            "description": "Maximum memory limit to allocate for images."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5667,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "send_site_admin_email_change_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to send the site admin email change notification email.",
    "params": [
        {
            "type": "bool",
            "name": "$send",
            "description": "Whether to send the email notification."
        },
        {
            "type": "string",
            "name": "$old_email",
            "description": "The old site admin email address."
        },
        {
            "type": "string",
            "name": "$new_email",
            "description": "The new site admin email address."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5799,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "site_admin_email_change_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the contents of the email notification sent when the site admin email address is changed.",
    "params": [
        {
            "type": "array",
            "name": "$email_change_email",
            "description": "{"
        },
        {
            "type": "string",
            "name": "$old_email",
            "description": "The old site admin email address."
        },
        {
            "type": "string",
            "name": "$new_email",
            "description": "The new site admin email address."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5849,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_privacy_anonymize_data",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the anonymous data for each type.",
    "params": [
        {
            "type": "string",
            "name": "$anonymous",
            "description": "Anonymized data."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Type of the data."
        },
        {
            "type": "string",
            "name": "$data",
            "description": "Original data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5977,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_privacy_exports_dir",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the directory used to store personal data export files.",
    "params": [
        {
            "type": "string",
            "name": "$exports_dir",
            "description": "Exports directory."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6000,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_privacy_exports_url",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the URL of the directory used to store personal data export files.",
    "params": [
        {
            "type": "string",
            "name": "$exports_url",
            "description": "Exports directory URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6023,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "wp_privacy_export_expiration",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the lifetime, in seconds, of a personal data export file.",
    "params": [
        {
            "type": "int",
            "name": "$expiration",
            "description": "The expiration age of the export, in seconds."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6068,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "do_robotstxt",
    "type": "action",
    "params_count": 0,
    "description": "Fires when displaying the robots.txt file.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1318,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "deprecated_function_run",
    "type": "action",
    "params_count": 3,
    "description": "Fires when a deprecated function is called.",
    "params": [
        {
            "type": "string",
            "name": "$function",
            "description": "The function that was called."
        },
        {
            "type": "string",
            "name": "$replacement",
            "description": "The function that should have been called."
        },
        {
            "type": "string",
            "name": "$version",
            "description": "The version of WordPress that deprecated the function."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3840,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "deprecated_constructor_run",
    "type": "action",
    "params_count": 3,
    "description": "Fires when a deprecated constructor is called.",
    "params": [
        {
            "type": "string",
            "name": "$class",
            "description": "The class containing the deprecated constructor."
        },
        {
            "type": "string",
            "name": "$version",
            "description": "The version of WordPress that deprecated the function."
        },
        {
            "type": "string",
            "name": "$parent_class",
            "description": "The parent class calling the deprecated constructor."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3900,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "deprecated_file_included",
    "type": "action",
    "params_count": 4,
    "description": "Fires when a deprecated file is called.",
    "params": [
        {
            "type": "string",
            "name": "$file",
            "description": "The file that was called."
        },
        {
            "type": "string",
            "name": "$replacement",
            "description": "The file that should have been included based on ABSPATH."
        },
        {
            "type": "string",
            "name": "$version",
            "description": "The version of WordPress that deprecated the file."
        },
        {
            "type": "string",
            "name": "$message",
            "description": "A message regarding the change."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3967,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "deprecated_argument_run",
    "type": "action",
    "params_count": 3,
    "description": "Fires when a deprecated argument is called.",
    "params": [
        {
            "type": "string",
            "name": "$function",
            "description": "The function that was called."
        },
        {
            "type": "string",
            "name": "$message",
            "description": "A message regarding the change."
        },
        {
            "type": "string",
            "name": "$version",
            "description": "The version of WordPress that deprecated the argument used."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4032,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "deprecated_hook_run",
    "type": "action",
    "params_count": 4,
    "description": "Fires when a deprecated hook is called.",
    "params": [
        {
            "type": "string",
            "name": "$hook",
            "description": "The hook that was called."
        },
        {
            "type": "string",
            "name": "$replacement",
            "description": "The hook that should be used as a replacement."
        },
        {
            "type": "string",
            "name": "$version",
            "description": "The version of WordPress that deprecated the argument used."
        },
        {
            "type": "string",
            "name": "$message",
            "description": "A message regarding the change."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4090,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "doing_it_wrong_run",
    "type": "action",
    "params_count": 3,
    "description": "Fires when the given function is being used incorrectly.",
    "params": [
        {
            "type": "string",
            "name": "$function",
            "description": "The function that was called."
        },
        {
            "type": "string",
            "name": "$message",
            "description": "A message explaining what has been done incorrectly."
        },
        {
            "type": "string",
            "name": "$version",
            "description": "The version of WordPress where the message was added."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4139,
        "name": "wp-includes\/functions.php"
    }
},
{
    "text": "the_title",
    "type": "filter",
    "params_count": 2,
    "description": "Prints a link to the previous post.",
    "params": [
        {
            "type": "string",
            "name": "$format",
            "description": ""
        },
        {
            "type": "string",
            "name": "$previous",
            "description": ""
        },
        {
            "type": "string",
            "name": "$title",
            "description": ""
        },
        {
            "type": "string",
            "name": "$in_same_cat",
            "description": ""
        },
        {
            "type": "int",
            "name": "$limitprev",
            "description": ""
        },
        {
            "type": "string",
            "name": "$excluded_categories",
            "description": ""
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 151,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "the_title",
    "type": "filter",
    "params_count": 2,
    "description": "Prints a link to the previous post.",
    "params": [
        {
            "type": "string",
            "name": "$format",
            "description": ""
        },
        {
            "type": "string",
            "name": "$previous",
            "description": ""
        },
        {
            "type": "string",
            "name": "$title",
            "description": ""
        },
        {
            "type": "string",
            "name": "$in_same_cat",
            "description": ""
        },
        {
            "type": "int",
            "name": "$limitprev",
            "description": ""
        },
        {
            "type": "string",
            "name": "$excluded_categories",
            "description": ""
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 151,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "link_category",
    "type": "filter",
    "params_count": 1,
    "description": "Output entire list of links by category.",
    "params": [
        {
            "type": "string",
            "name": "$order",
            "description": "Sort link categories by 'name' or 'id'"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1040,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "the_content_rss",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post content in the context of an RSS feed.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Content of the current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1663,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "icon_dir",
    "type": "filter",
    "params_count": 1,
    "description": "Retrieve icon URL and Path.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Optional. Post ID."
        },
        {
            "type": "bool",
            "name": "$fullsize",
            "description": "Optional, default to false. Whether to have full image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1890,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "attachment_icon",
    "type": "filter",
    "params_count": 2,
    "description": "Retrieve HTML content of icon attachment image element.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Optional. Post ID."
        },
        {
            "type": "bool",
            "name": "$fullsize",
            "description": "Optional, default to false. Whether to have full size image."
        },
        {
            "type": "array",
            "name": "$max_dims",
            "description": "Optional. Dimensions of image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1953,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "attachment_innerHTML",
    "type": "filter",
    "params_count": 2,
    "description": "Retrieve HTML content of image element.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Optional. Post ID."
        },
        {
            "type": "bool",
            "name": "$fullsize",
            "description": "Optional, default to false. Whether to have full size image."
        },
        {
            "type": "array",
            "name": "$max_dims",
            "description": "Optional. Dimensions of image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1979,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "the_title",
    "type": "filter",
    "params_count": 2,
    "description": "Get boundary post relational link.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Optional. Link title format."
        },
        {
            "type": "bool",
            "name": "$in_same_cat",
            "description": "Optional. Whether link should be in a same category."
        },
        {
            "type": "string",
            "name": "$excluded_categories",
            "description": "Optional. Excluded categories IDs."
        },
        {
            "type": "bool",
            "name": "$start",
            "description": "Optional, default is true. Whether to display link to first or last post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2685,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "index_rel_link",
    "type": "filter",
    "params_count": 1,
    "description": "Get site index relational link.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 2723,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "the_title",
    "type": "filter",
    "params_count": 2,
    "description": "Get boundary post relational link.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Optional. Link title format."
        },
        {
            "type": "bool",
            "name": "$in_same_cat",
            "description": "Optional. Whether link should be in a same category."
        },
        {
            "type": "string",
            "name": "$excluded_categories",
            "description": "Optional. Excluded categories IDs."
        },
        {
            "type": "bool",
            "name": "$start",
            "description": "Optional, default is true. Whether to display link to first or last post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2685,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "parent_post_rel_link",
    "type": "filter",
    "params_count": 1,
    "description": "Get parent post relational link.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Optional. Link title format. Default '%title'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2766,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "richedit_pre",
    "type": "filter",
    "params_count": 1,
    "description": "Filters text returned for the rich text editor.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "Text for the rich text editor."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3569,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "htmledit_pre",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the text before it is formatted for the HTML editor.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The HTML-formatted text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3607,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "shortcut_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the Press This bookmarklet link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The Press This bookmarklet link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3911,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "delete_usermeta",
    "type": "action",
    "params_count": 4,
    "description": "Remove user meta data.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Metadata key."
        },
        {
            "type": "mixed",
            "name": "$meta_value",
            "description": "Metadata value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2233,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "deleted_usermeta",
    "type": "action",
    "params_count": 4,
    "description": "Remove user meta data.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Metadata key."
        },
        {
            "type": "mixed",
            "name": "$meta_value",
            "description": "Metadata value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2244,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "update_usermeta",
    "type": "action",
    "params_count": 4,
    "description": "@todo Might need fix because usermeta data is assumed to be already escaped",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 2337,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "added_usermeta",
    "type": "action",
    "params_count": 4,
    "description": "@todo Might need fix because usermeta data is assumed to be already escaped",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 2350,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "updated_usermeta",
    "type": "action",
    "params_count": 4,
    "description": "@todo Might need fix because usermeta data is assumed to be already escaped",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 2352,
        "name": "wp-includes\/deprecated.php"
    }
},
{
    "text": "rest_authentication_errors",
    "type": "filter",
    "params_count": 1,
    "description": "Filters REST authentication errors.",
    "params": [
        {
            "type": "WP_Error|null|bool WP_Error if authentication error, null if authentication",
            "name": "$WP_Error|null|bool",
            "description": "WP_Error if authentication error, null if authentication"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 135,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_send_nocache_headers",
    "type": "filter",
    "params_count": 1,
    "description": "Send nocache headers on authenticated requests.",
    "params": [
        {
            "type": "bool",
            "name": "$rest_send_nocache_headers",
            "description": "Whether to send no-cache headers."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 244,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_jsonp_enabled",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether jsonp is enabled.",
    "params": [
        {
            "type": "bool",
            "name": "$jsonp_enabled",
            "description": "Whether jsonp is enabled. Default true."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 274,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_post_dispatch",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the API response.",
    "params": [
        {
            "type": "WP_HTTP_Response",
            "name": "$result",
            "description": "Result to send to the client. Usually a WP_REST_Response."
        },
        {
            "type": "WP_REST_Server",
            "name": "$this",
            "description": "Server instance."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 344,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_pre_serve_request",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether the request has already been served.",
    "params": [
        {
            "type": "bool",
            "name": "$served",
            "description": "Whether the request has already been served."
        },
        {
            "type": "WP_HTTP_Response",
            "name": "$result",
            "description": "Result to send to the client. Usually a WP_REST_Response."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        },
        {
            "type": "WP_REST_Server",
            "name": "$this",
            "description": "Server instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 372,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_pre_echo_response",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the API response.",
    "params": [
        {
            "type": "array",
            "name": "$result",
            "description": "Response data to send to the client."
        },
        {
            "type": "WP_REST_Server",
            "name": "$this",
            "description": "Server instance."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 394,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_envelope_response",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the enveloped form of a response.",
    "params": [
        {
            "type": "array",
            "name": "$envelope",
            "description": "Envelope data."
        },
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "Original response data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 634,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_endpoints",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of available endpoints.",
    "params": [
        {
            "type": "array",
            "name": "$endpoints",
            "description": "The available endpoints. An array of matching regex patterns, each mapped"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 714,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_pre_dispatch",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the pre-calculated result of a REST dispatch request.",
    "params": [
        {
            "type": "mixed",
            "name": "$result",
            "description": "Response to replace the requested version with. Can be anything"
        },
        {
            "type": "WP_REST_Server",
            "name": "$this",
            "description": "Server instance."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 817,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_request_before_callbacks",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the response before executing any REST API callbacks.",
    "params": [
        {
            "type": "WP_HTTP_Response",
            "name": "$response",
            "description": "Result to send to the client. Usually a WP_REST_Response."
        },
        {
            "type": "WP_REST_Server",
            "name": "$handler",
            "description": "ResponseHandler instance (usually WP_REST_Server)."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 901,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_dispatch_request",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the REST dispatch request result.",
    "params": [
        {
            "type": "bool",
            "name": "$dispatch_result",
            "description": "Dispatch result, will be used if not empty."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        },
        {
            "type": "string",
            "name": "$route",
            "description": "Route matched for the request."
        },
        {
            "type": "array",
            "name": "$handler",
            "description": "Route handler used for the request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 930,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_request_after_callbacks",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the response immediately after executing any REST API",
    "params": [
        {
            "type": "WP_HTTP_Response",
            "name": "$response",
            "description": "Result to send to the client. Usually a WP_REST_Response."
        },
        {
            "type": "WP_REST_Server",
            "name": "$handler",
            "description": "ResponseHandler instance (usually WP_REST_Server)."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 960,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_index",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the API root index data.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "Response data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1046,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_namespace_index",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the namespace index data.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "Response data."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request data. The namespace is passed as the 'namespace' parameter."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1088,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_endpoints_description",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the REST endpoint data.",
    "params": [
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request data. The namespace is passed as the 'namespace' parameter."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1117,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_route_data",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the publicly-visible data for routes.",
    "params": [
        {
            "type": "array",
            "name": "$available",
            "description": "Map of route to route data."
        },
        {
            "type": "array",
            "name": "$routes",
            "description": "Internal route data as an associative array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1132,
        "name": "wp-includes\/rest-api\/class-wp-rest-server.php"
    }
},
{
    "text": "rest_request_parameter_order",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the parameter order.",
    "params": [
        {
            "type": "array",
            "name": "$order",
            "description": "{"
        },
        {
            "type": "*    @param string",
            "name": "$type",
            "description": "The type to check."
        },
        {
            "type": "WP_REST_Request",
            "name": "$this",
            "description": "The request object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 375,
        "name": "wp-includes\/rest-api\/class-wp-rest-request.php"
    }
},
{
    "text": "rest_request_from_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the request generated from a URL.",
    "params": [
        {
            "type": "WP_REST_Request|false",
            "name": "$request",
            "description": "Generated request object, or false if URL"
        },
        {
            "type": "string",
            "name": "$url",
            "description": "URL the request was generated from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 981,
        "name": "wp-includes\/rest-api\/class-wp-rest-request.php"
    }
},
{
    "text": "rest_comment_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters arguments, before passing to WP_Comment_Query, when querying comments via the REST API.",
    "params": [
        {
            "type": "array",
            "name": "$prepared_args",
            "description": "Array of arguments for WP_Comment_Query."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "The current request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 246,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_allow_anonymous_comments",
    "type": "filter",
    "params_count": 2,
    "description": "Filter whether comments can be created without authentication.",
    "params": [
        {
            "type": "bool",
            "name": "$allow_anonymous",
            "description": "Whether to allow anonymous comments to"
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 410,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_pre_insert_comment",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a comment before it is inserted via the REST API.",
    "params": [
        {
            "type": "array|WP_Error",
            "name": "$prepared_comment",
            "description": "The prepared comment data for wp_insert_comment()."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to insert the comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 579,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_comment_trashable",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether a comment can be trashed.",
    "params": [
        {
            "type": "bool",
            "name": "$supports_trash",
            "description": "Whether the post type support trashing."
        },
        {
            "type": "WP_Post",
            "name": "$comment",
            "description": "The comment object being considered for trashing support."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 801,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_prepare_comment",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a comment returned from the API.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response object."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The original comment object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 950,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_preprocess_comment",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a comment after it is prepared for the database.",
    "params": [
        {
            "type": "array",
            "name": "$prepared_comment",
            "description": "The prepared comment data for `wp_insert_comment`."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "The current request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1176,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_comment_collection_params",
    "type": "filter",
    "params_count": 1,
    "description": "Filter collection parameters for the comments controller.",
    "params": [
        {
            "type": "array",
            "name": "$query_params",
            "description": "JSON Schema-formatted collection parameters."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1493,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_insert_comment",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a comment is created or updated via the REST API.",
    "params": [
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "Inserted or updated comment object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request object."
        },
        {
            "type": "bool",
            "name": "$creating",
            "description": "True when creating a comment, false"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 606,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_delete_comment",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a comment is deleted via the REST API.",
    "params": [
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The deleted comment data."
        },
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response returned from the API."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "The request sent to the API."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 839,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php"
    }
},
{
    "text": "rest_prepare_attachment",
    "type": "filter",
    "params_count": 3,
    "description": "Filters an attachment returned from the REST API.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response object."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The original attachment post."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 388,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-attachments-controller.php"
    }
},
{
    "text": "rest_insert_attachment",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a single attachment is created or updated via the REST API.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$attachment",
            "description": "Inserted or updated attachment"
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "The request sent to the API."
        },
        {
            "type": "bool",
            "name": "$creating",
            "description": "True when creating an attachment, false when updating."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 170,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-attachments-controller.php"
    }
},
{
    "text": "rest_prepare_revision",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a revision returned from the API.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response object."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The original revision object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 420,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-revisions-controller.php"
    }
},
{
    "text": "rest_delete_revision",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a revision is deleted via the REST API.",
    "params": [
        {
            "type": "(mixed)",
            "name": "$result",
            "description": "The revision object (if it was deleted or moved to the trash successfully)"
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "The request sent to the API."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 309,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-revisions-controller.php"
    }
},
{
    "text": "rest_user_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters WP_User_Query arguments when querying users via the REST API.",
    "params": [
        {
            "type": "array",
            "name": "$prepared_args",
            "description": "Array of arguments for WP_User_Query."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "The current request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 286,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php"
    }
},
{
    "text": "rest_prepare_user",
    "type": "filter",
    "params_count": 3,
    "description": "Filters user data returned from the REST API.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response object."
        },
        {
            "type": "object",
            "name": "$user",
            "description": "User object used to create response."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 934,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php"
    }
},
{
    "text": "rest_pre_insert_user",
    "type": "filter",
    "params_count": 2,
    "description": "Filters user data before insertion via the REST API.",
    "params": [
        {
            "type": "object",
            "name": "$prepared_user",
            "description": "User object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1034,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php"
    }
},
{
    "text": "rest_user_collection_params",
    "type": "filter",
    "params_count": 1,
    "description": "Filter collection parameters for the users controller.",
    "params": [
        {
            "type": "array",
            "name": "$query_params",
            "description": "JSON Schema-formatted collection parameters."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1400,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php"
    }
},
{
    "text": "rest_insert_user",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a user is created or updated via the REST API.",
    "params": [
        {
            "type": "WP_User",
            "name": "$user",
            "description": "Inserted or updated user object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request object."
        },
        {
            "type": "bool",
            "name": "$creating",
            "description": "True when creating a user, false when updating."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 535,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php"
    }
},
{
    "text": "rest_delete_user",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a user is deleted via the REST API.",
    "params": [
        {
            "type": "WP_User",
            "name": "$user",
            "description": "The user data."
        },
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response returned from the API."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "The request sent to the API."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 795,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php"
    }
},
{
    "text": "rest_pre_get_setting",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the value of a setting recognized by the REST API.",
    "params": [
        {
            "type": "mixed",
            "name": "$result",
            "description": "Value to use for the requested setting. Can be a scalar"
        },
        {
            "type": "string",
            "name": "$name",
            "description": "Setting name (as shown in REST API responses)."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to register_setting() for this setting."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 95,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-settings-controller.php"
    }
},
{
    "text": "rest_pre_update_setting",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether to preempt a setting value update.",
    "params": [
        {
            "type": "bool",
            "name": "$result",
            "description": "Whether to override the default behavior for updating the"
        },
        {
            "type": "string",
            "name": "$name",
            "description": "Setting name (as shown in REST API responses)."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Updated setting value."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to register_setting() for this setting."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 163,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-settings-controller.php"
    }
},
{
    "text": "rest_prepare_status",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a status returned from the REST API.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response object."
        },
        {
            "type": "object",
            "name": "$status",
            "description": "The original status object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 252,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-post-statuses-controller.php"
    }
},
{
    "text": "rest_prepare_taxonomy",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a taxonomy returned from the REST API.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response object."
        },
        {
            "type": "object",
            "name": "$item",
            "description": "The original taxonomy object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 258,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-taxonomies-controller.php"
    }
},
{
    "text": "rest_prepare_post_type",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a post type returned from the API.",
    "params": [
        {
            "type": "WP_REST_Response",
            "name": "$response",
            "description": "The response object."
        },
        {
            "type": "object",
            "name": "$item",
            "description": "The original post type object."
        },
        {
            "type": "WP_REST_Request",
            "name": "$request",
            "description": "Request used to generate the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 224,
        "name": "wp-includes\/rest-api\/endpoints\/class-wp-rest-post-types-controller.php"
    }
},
{
    "text": "rest_response_link_curies",
    "type": "filter",
    "params_count": 1,
    "description": "Filters extra CURIEs available on API responses.",
    "params": [
        {
            "type": "array",
            "name": "$additional",
            "description": "Additional CURIEs to register with the API."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 287,
        "name": "wp-includes\/rest-api\/class-wp-rest-response.php"
    }
},
{
    "text": "secure_signon_cookie",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to use a secure sign-on cookie.",
    "params": [
        {
            "type": "bool",
            "name": "$secure_cookie",
            "description": "Whether to use a secure sign-on cookie."
        },
        {
            "type": "array",
            "name": "$credentials",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 83,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_authenticate_user",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the given user can be authenticated with the provided $password.",
    "params": [
        {
            "type": "WP_User|WP_Error",
            "name": "$user",
            "description": "WP_User or WP_Error object if a previous"
        },
        {
            "type": "string",
            "name": "$password",
            "description": "Password to check against the user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 163,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_authenticate_user",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the given user can be authenticated with the provided $password.",
    "params": [
        {
            "type": "WP_User|WP_Error",
            "name": "$user",
            "description": "WP_User or WP_Error object if a previous"
        },
        {
            "type": "string",
            "name": "$password",
            "description": "Password to check against the user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 163,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "check_is_user_spammed",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the user has been marked as a spammer.",
    "params": [
        {
            "type": "bool",
            "name": "$spammed",
            "description": "Whether the user is considered a spammer."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User to check against."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 312,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "get_usernumposts",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the number of posts a user has written.",
    "params": [
        {
            "type": "int",
            "name": "$count",
            "description": "The user's post count."
        },
        {
            "type": "int",
            "name": "$userid",
            "description": "User ID."
        },
        {
            "type": "string|array",
            "name": "$post_type",
            "description": "Single post type or array of post types to count the number of posts for."
        },
        {
            "type": "bool",
            "name": "$public_only",
            "description": "Whether to limit counted posts to public posts."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 381,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_get_blogs_of_user",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of a user's sites before it is populated.",
    "params": [
        {
            "type": "null|array",
            "name": "$sites",
            "description": "An array of site objects of which the user is a member."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "bool",
            "name": "$all",
            "description": "Whether the returned array should contain all sites, including"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 602,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "get_blogs_of_user",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of sites a user belongs to.",
    "params": [
        {
            "type": "array",
            "name": "$sites",
            "description": "An array of site objects belonging to the user."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "bool",
            "name": "$all",
            "description": "Whether the returned sites array should contain all sites, including"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 689,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_dropdown_users_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the query arguments for the list of users in the dropdown.",
    "params": [
        {
            "type": "array",
            "name": "$query_args",
            "description": "The query arguments for get_users()."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "The arguments passed to wp_dropdown_users() combined with the defaults."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1085,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_dropdown_users",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the wp_dropdown_users() HTML output.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "HTML output generated by wp_dropdown_users()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1147,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "username_exists",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the given username exists or not.",
    "params": [
        {
            "type": "int|false",
            "name": "$user_id",
            "description": "The user's ID on success, and false on failure."
        },
        {
            "type": "string",
            "name": "$username",
            "description": "Username to check."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1339,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "validate_username",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the provided username is valid or not.",
    "params": [
        {
            "type": "bool",
            "name": "$valid",
            "description": "Whether given username is valid."
        },
        {
            "type": "string",
            "name": "$username",
            "description": "Username to check."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1378,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_login",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a username after it has been sanitized.",
    "params": [
        {
            "type": "string",
            "name": "$sanitized_user_login",
            "description": "Username after it has been sanitized."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1473,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "illegal_user_logins",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of blacklisted usernames.",
    "params": [
        {
            "type": "array",
            "name": "$usernames",
            "description": "Array of blacklisted usernames."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1496,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_nicename",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's nicename before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$user_nicename",
            "description": "The user's nicename."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1527,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_url",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's URL before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$raw_user_url",
            "description": "The user's URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1538,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_email",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's email before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$raw_user_email",
            "description": "The user's email."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1549,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_nickname",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's nickname before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$nickname",
            "description": "The user's nickname."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1571,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_first_name",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's first name before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$first_name",
            "description": "The user's first name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1582,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_last_name",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's last name before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$last_name",
            "description": "The user's last name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1593,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_display_name",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's display name before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$display_name",
            "description": "The user's display name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1619,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "pre_user_description",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a user's description before the user is created or updated.",
    "params": [
        {
            "type": "string",
            "name": "$description",
            "description": "The user's description."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1630,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_pre_insert_user_data",
    "type": "filter",
    "params_count": 3,
    "description": "Filters user data before the record is created or updated.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "{"
        },
        {
            "type": "bool",
            "name": "$update",
            "description": "Whether the user is being updated rather than created."
        },
        {
            "type": "int|null",
            "name": "$id",
            "description": "ID of the user to be updated, or NULL if the user is being created."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1692,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "insert_user_meta",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a user's meta values and keys immediately after the user is created or updated",
    "params": [
        {
            "type": "array",
            "name": "$meta",
            "description": "{"
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object."
        },
        {
            "type": "bool",
            "name": "$update",
            "description": "Whether the user is being updated rather than created."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1734,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "send_password_change_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to send the password change email.",
    "params": [
        {
            "type": "bool",
            "name": "$send",
            "description": "Whether to send the email."
        },
        {
            "type": "array",
            "name": "$user",
            "description": "The original user array."
        },
        {
            "type": "array",
            "name": "$userdata",
            "description": "The updated user array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1840,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "send_email_change_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to send the email change email.",
    "params": [
        {
            "type": "bool",
            "name": "$send",
            "description": "Whether to send the email."
        },
        {
            "type": "array",
            "name": "$user",
            "description": "The original user array."
        },
        {
            "type": "array",
            "name": "$userdata",
            "description": "The updated user array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1856,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "password_change_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the contents of the email sent when the user's password is changed.",
    "params": [
        {
            "type": "array",
            "name": "$pass_change_email",
            "description": "{"
        },
        {
            "type": "array",
            "name": "$user",
            "description": "The original user array."
        },
        {
            "type": "array",
            "name": "$userdata",
            "description": "The updated user array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1920,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "email_change_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the contents of the email sent when the user's email is changed.",
    "params": [
        {
            "type": "array",
            "name": "$email_change_email",
            "description": "{"
        },
        {
            "type": "array",
            "name": "$user",
            "description": "The original user array."
        },
        {
            "type": "array",
            "name": "$userdata",
            "description": "The updated user array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1976,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_contactmethods",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the user contact methods.",
    "params": [
        {
            "type": "array",
            "name": "$methods",
            "description": "Array of contact methods and their labels."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2082,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "password_hint",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the text describing the site's password complexity policy.",
    "params": [
        {
            "type": "string",
            "name": "$hint",
            "description": "The password hint text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2117,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "allow_password_reset",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to allow a password to be reset.",
    "params": [
        {
            "type": "bool",
            "name": "$allow",
            "description": "Whether to allow the password to be reset. Default true."
        },
        {
            "type": "int",
            "name": "$user_data->ID",
            "description": "The ID of the user attempting to reset a password."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2169,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "password_reset_expiration",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the expiration time of password reset keys.",
    "params": [
        {
            "type": "int",
            "name": "$expiration",
            "description": "The expiration time in seconds."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2248,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "password_reset_key_expired",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the return value of check_password_reset_key() when an",
    "params": [
        {
            "type": "WP_Error",
            "name": "$return",
            "description": "A WP_Error object denoting an expired key."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "The matched user ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2286,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_registration_email",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the email address of a user being registered.",
    "params": [
        {
            "type": "string",
            "name": "$user_email",
            "description": "The email address of the new user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2345,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "registration_errors",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the errors encountered when a new user is being registered.",
    "params": [
        {
            "type": "WP_Error",
            "name": "$errors",
            "description": "A WP_Error object containing any errors encountered"
        },
        {
            "type": "string",
            "name": "$sanitized_user_login",
            "description": "User's username after it has been sanitized."
        },
        {
            "type": "string",
            "name": "$user_email",
            "description": "User's email."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2403,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "determine_current_user",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the current user.",
    "params": [
        {
            "type": "int|bool",
            "name": "$user_id",
            "description": "User ID if one has been determined, false otherwise."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2603,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "new_user_email_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text of the email sent when a change of user email address is attempted.",
    "params": [
        {
            "type": "string",
            "name": "$email_text",
            "description": "Text in the email."
        },
        {
            "type": "array",
            "name": "$new_user_email",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2700,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_request_confirmed_email_to",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the recipient of the data request confirmation notification.",
    "params": [
        {
            "type": "string",
            "name": "$admin_email",
            "description": "The email address of the notification recipient."
        },
        {
            "type": "WP_User_Request",
            "name": "$request_data",
            "description": "The request that is initiating the notification."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2911,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_confirmed_action_email_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the body of the user request confirmation email.",
    "params": [
        {
            "type": "string",
            "name": "$email_text",
            "description": "Text in the email."
        },
        {
            "type": "array",
            "name": "$email_data",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2968,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_request_confirmed_email_subject",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the subject of the user request confirmation email.",
    "params": [
        {
            "type": "string",
            "name": "$subject",
            "description": "The email subject."
        },
        {
            "type": "string",
            "name": "$sitename",
            "description": "The name of the site."
        },
        {
            "type": "array",
            "name": "$email_data",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3002,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_erasure_fulfillment_email_to",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the recipient of the data erasure fulfillment notification.",
    "params": [
        {
            "type": "string",
            "name": "$user_email",
            "description": "The email address of the notification recipient."
        },
        {
            "type": "WP_User_Request",
            "name": "$request_data",
            "description": "The request that is initiating the notification."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3041,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_erasure_complete_email_subject",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the subject of the email sent when an erasure request is completed.",
    "params": [
        {
            "type": "string",
            "name": "$subject",
            "description": "The email subject."
        },
        {
            "type": "string",
            "name": "$sitename",
            "description": "The name of the site."
        },
        {
            "type": "array",
            "name": "$email_data",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3076,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_confirmed_action_email_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the body of the user request confirmation email.",
    "params": [
        {
            "type": "string",
            "name": "$email_text",
            "description": "Text in the email."
        },
        {
            "type": "array",
            "name": "$email_data",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2968,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_request_action_confirmed_message",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the message displayed to a user when they confirm a data request.",
    "params": [
        {
            "type": "string",
            "name": "$message",
            "description": "The message to the user."
        },
        {
            "type": "int",
            "name": "$request_id",
            "description": "The ID of the request being confirmed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3181,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_request_action_description",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the user action description.",
    "params": [
        {
            "type": "string",
            "name": "$description",
            "description": "The default description."
        },
        {
            "type": "string",
            "name": "$action_name",
            "description": "The name of the request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3271,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_request_action_email_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text of the email sent when an account action is attempted.",
    "params": [
        {
            "type": "string",
            "name": "$email_text",
            "description": "Text in the email."
        },
        {
            "type": "array",
            "name": "$email_data",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3348,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_request_action_email_subject",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the subject of the email sent when an account action is attempted.",
    "params": [
        {
            "type": "string",
            "name": "$subject",
            "description": "The email subject."
        },
        {
            "type": "string",
            "name": "$sitename",
            "description": "The name of the site."
        },
        {
            "type": "array",
            "name": "$email_data",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3377,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_request_key_expiration",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the expiration time of confirm keys.",
    "params": [
        {
            "type": "int",
            "name": "$expiration",
            "description": "The expiration time in seconds."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3463,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_authenticate",
    "type": "action",
    "params_count": 2,
    "description": "Fires before the user is authenticated.",
    "params": [
        {
            "type": "string",
            "name": "$user_login",
            "description": "Username (passed by reference)."
        },
        {
            "type": "string",
            "name": "$user_password",
            "description": "User password (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 63,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_login",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the user has successfully logged in.",
    "params": [
        {
            "type": "string",
            "name": "$user_login",
            "description": "Username."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "WP_User object of the logged-in user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 109,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "clean_user_cache",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after the given user's cache is cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1313,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "profile_update",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after an existing user is updated.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        },
        {
            "type": "WP_User",
            "name": "$old_user_data",
            "description": "Object containing user's data prior to update."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1764,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "user_register",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a new user is registered.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1773,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "retreive_password",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a new password is retrieved.",
    "params": [
        {
            "type": "string",
            "name": "$user_login",
            "description": "The user login name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2145,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "retrieve_password",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a new password is retrieved.",
    "params": [
        {
            "type": "string",
            "name": "$user_login",
            "description": "The user login name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2154,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "retrieve_password_key",
    "type": "action",
    "params_count": 2,
    "description": "Fires when a password reset key is generated.",
    "params": [
        {
            "type": "string",
            "name": "$user_login",
            "description": "The username for the user."
        },
        {
            "type": "string",
            "name": "$key",
            "description": "The generated password reset key."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2188,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "password_reset",
    "type": "action",
    "params_count": 2,
    "description": "Fires before the user's password is reset.",
    "params": [
        {
            "type": "object",
            "name": "$user",
            "description": "The user."
        },
        {
            "type": "string",
            "name": "$new_pass",
            "description": "New user password."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2309,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "after_password_reset",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the user's password is reset.",
    "params": [
        {
            "type": "WP_User",
            "name": "$user",
            "description": "The user."
        },
        {
            "type": "string",
            "name": "$new_pass",
            "description": "New user password."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2322,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "register_post",
    "type": "action",
    "params_count": 3,
    "description": "Fires when submitting registration form data, before the user is created.",
    "params": [
        {
            "type": "string",
            "name": "$sanitized_user_login",
            "description": "The submitted username after being sanitized."
        },
        {
            "type": "string",
            "name": "$user_email",
            "description": "The submitted email."
        },
        {
            "type": "WP_Error",
            "name": "$errors",
            "description": "Contains any errors with submitted username and email,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2385,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "register_new_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a new user registration has been recorded.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the newly registered user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2424,
        "name": "wp-includes\/user.php"
    }
},
{
    "text": "wp_print_styles",
    "type": "action",
    "params_count": 0,
    "description": "Fires before styles in the $handles queue are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 52,
        "name": "wp-includes\/functions.wp-styles.php"
    }
},
{
    "text": "get_terms_defaults",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the terms query default arguments.",
    "params": [
        {
            "type": "array",
            "name": "$defaults",
            "description": "An array of default get_terms() arguments."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of taxonomies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 244,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "get_terms_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the terms query arguments.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of get_terms() arguments."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of taxonomies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 357,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "list_terms_exclusions",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the terms to exclude from the terms query.",
    "params": [
        {
            "type": "string",
            "name": "$exclusions",
            "description": "`NOT IN` clause of the terms query."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of terms query arguments."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of taxonomies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 463,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "get_terms_fields",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the fields to select in the terms query.",
    "params": [
        {
            "type": "array",
            "name": "$selects",
            "description": "An array of fields to select for the terms query."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of term query arguments."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of taxonomies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 628,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "terms_clauses",
    "type": "filter",
    "params_count": 9,
    "description": "Filters the terms query SQL clauses.",
    "params": [
        {
            "type": "array",
            "name": "$pieces",
            "description": "Terms query SQL clauses."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of taxonomies."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of terms query arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 647,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "get_terms_orderby",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the ORDERBY clause of the terms query.",
    "params": [
        {
            "type": "string",
            "name": "$orderby",
            "description": "`ORDERBY` clause of the terms query."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of terms query arguments."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of taxonomies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 860,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "parse_term_query",
    "type": "action",
    "params_count": 1,
    "description": "Fires after term query vars have been parsed.",
    "params": [
        {
            "type": "WP_Term_Query",
            "name": "$this",
            "description": "Current instance of WP_Term_Query."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 275,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "pre_get_terms",
    "type": "action",
    "params_count": 1,
    "description": "Fires before terms are retrieved.",
    "params": [
        {
            "type": "WP_Term_Query",
            "name": "$this",
            "description": "Current instance of WP_Term_Query."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 317,
        "name": "wp-includes\/class-wp-term-query.php"
    }
},
{
    "text": "list_pages",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the page title when creating an HTML drop-down list of pages.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Page title."
        },
        {
            "type": "object",
            "name": "$page",
            "description": "Page data object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 82,
        "name": "wp-includes\/class-walker-page-dropdown.php"
    }
},
{
    "text": "register_taxonomy_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the arguments for registering a taxonomy.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Array of arguments for registering a taxonomy."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy key."
        },
        {
            "type": "array",
            "name": "$object_type",
            "description": "Array of names of object types for the taxonomy."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 245,
        "name": "wp-includes\/class-wp-taxonomy.php"
    }
},
{
    "text": "print_media_templates",
    "type": "action",
    "params_count": 0,
    "description": "Fires when the custom Backbone media templates are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1271,
        "name": "wp-includes\/media-template.php"
    }
},
{
    "text": "template_redirect",
    "type": "action",
    "params_count": 0,
    "description": "Fires before determining which template to load.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 12,
        "name": "wp-includes\/template-loader.php"
    }
},
{
    "text": "do_robots",
    "type": "action",
    "params_count": 0,
    "description": "Fired when the template loader determines a robots.txt request.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 34,
        "name": "wp-includes\/template-loader.php"
    }
},
{
    "text": "get_categories_taxonomy",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the taxonomy used to retrieve terms when calling get_categories().",
    "params": [
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy to retrieve terms from."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments. See get_terms()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 40,
        "name": "wp-includes\/category.php"
    }
},
{
    "text": "get_tags",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of term objects returned for the 'post_tag' taxonomy.",
    "params": [
        {
            "type": "array",
            "name": "$tags",
            "description": "Array of 'post_tag' term objects."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments. @see get_terms()"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 283,
        "name": "wp-includes\/category.php"
    }
},
{
    "text": "atom_comments_ns",
    "type": "action",
    "params_count": 0,
    "description": "Fires inside the feed tag in the Atom comment feed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 27,
        "name": "wp-includes\/feed-atom-comments.php"
    }
},
{
    "text": "comments_atom_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the Atom comment feed header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 68,
        "name": "wp-includes\/feed-atom-comments.php"
    }
},
{
    "text": "comment_atom_entry",
    "type": "action",
    "params_count": 2,
    "description": "Fires at the end of each Atom comment feed item.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "ID of the current comment."
        },
        {
            "type": "int",
            "name": "$comment_post_id",
            "description": "ID of the post the current comment is connected to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 120,
        "name": "wp-includes\/feed-atom-comments.php"
    }
},
{
    "text": "the_comments",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment query results.",
    "params": [
        {
            "type": "array",
            "name": "$_comments",
            "description": "An array of comments."
        },
        {
            "type": "WP_Comment_Query",
            "name": "$this",
            "description": "Current instance of WP_Comment_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 455,
        "name": "wp-includes\/class-wp-comment-query.php"
    }
},
{
    "text": "comments_clauses",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment query clauses.",
    "params": [
        {
            "type": "array",
            "name": "$pieces",
            "description": "A compacted array of comment query clauses."
        },
        {
            "type": "WP_Comment_Query",
            "name": "$this",
            "description": "Current instance of WP_Comment_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 853,
        "name": "wp-includes\/class-wp-comment-query.php"
    }
},
{
    "text": "found_comments_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the query used to retrieve found comment count.",
    "params": [
        {
            "type": "string",
            "name": "$found_comments_query",
            "description": "SQL query. Default 'SELECT FOUND_ROWS()'."
        },
        {
            "type": "WP_Comment_Query",
            "name": "$comment_query",
            "description": "The `WP_Comment_Query` instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 917,
        "name": "wp-includes\/class-wp-comment-query.php"
    }
},
{
    "text": "parse_comment_query",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the comment query vars have been parsed.",
    "params": [
        {
            "type": "WP_Comment_Query",
            "name": "$this",
            "description": "The WP_Comment_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 328,
        "name": "wp-includes\/class-wp-comment-query.php"
    }
},
{
    "text": "pre_get_comments",
    "type": "action",
    "params_count": 1,
    "description": "Fires before comments are retrieved.",
    "params": [
        {
            "type": "WP_Comment_Query",
            "name": "$this",
            "description": "Current instance of WP_Comment_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 374,
        "name": "wp-includes\/class-wp-comment-query.php"
    }
},
{
    "text": "get_the_categories",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of categories to return for a post.",
    "params": [
        {
            "type": "array",
            "name": "$categories",
            "description": "An array of categories to return for the post."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "ID of the post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 94,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "the_category_list",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the categories before building the category list.",
    "params": [
        {
            "type": "array",
            "name": "$categories",
            "description": "An array of the post's categories."
        },
        {
            "type": "int|bool",
            "name": "$post_id",
            "description": "ID of the post we're retrieving categories for. When `false`, we assume the"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 144,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "the_category",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the category or list of categories.",
    "params": [
        {
            "type": "string",
            "name": "$thelist",
            "description": "List of categories for the current post."
        },
        {
            "type": "string",
            "name": "$separator",
            "description": "Separator used between the categories."
        },
        {
            "type": "string",
            "name": "$parents",
            "description": "How to display the category parents. Accepts 'multiple',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 211,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "list_cats",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a taxonomy drop-down display element.",
    "params": [
        {
            "type": "string",
            "name": "$element",
            "description": "Category name."
        },
        {
            "type": "WP_Term|null",
            "name": "$category",
            "description": "The category object, or null if there's no corresponding category."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 397,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "list_cats",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a taxonomy drop-down display element.",
    "params": [
        {
            "type": "string",
            "name": "$element",
            "description": "Category name."
        },
        {
            "type": "WP_Term|null",
            "name": "$category",
            "description": "The category object, or null if there's no corresponding category."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 397,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "wp_dropdown_cats",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the taxonomy drop-down output.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "HTML output."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "Arguments used to build the drop-down."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 438,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "wp_list_categories",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the HTML output of a taxonomy list.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "HTML output."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of taxonomy-listing arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 631,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "wp_tag_cloud",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the tag cloud output.",
    "params": [
        {
            "type": "string",
            "name": "$return",
            "description": "HTML output of the tag cloud."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of tag cloud arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 711,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "tag_cloud_sort",
    "type": "filter",
    "params_count": 2,
    "description": "Filters how the items in a tag cloud are sorted.",
    "params": [
        {
            "type": "array",
            "name": "$tags",
            "description": "Ordered array of terms."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of tag cloud arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 821,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "wp_generate_tag_cloud_data",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the data used to generate the tag cloud.",
    "params": [
        {
            "type": "array",
            "name": "$tags_data",
            "description": "An array of term data for term used to generate the tag cloud."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 917,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "wp_generate_tag_cloud",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the generated output of a tag cloud.",
    "params": [
        {
            "type": "array|string",
            "name": "$return",
            "description": "String containing the generated HTML tag cloud output"
        },
        {
            "type": "array",
            "name": "$tags",
            "description": "An array of terms used in the tag cloud."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of wp_generate_tag_cloud() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 972,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "get_the_tags",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of tags for the given post.",
    "params": [
        {
            "type": "array",
            "name": "$terms",
            "description": "An array of tags for the given post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1090,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "the_tags",
    "type": "filter",
    "params_count": 9,
    "description": "Filters the tags list for a given post.",
    "params": [
        {
            "type": "string",
            "name": "$tag_list",
            "description": "List of tags."
        },
        {
            "type": "string",
            "name": "$before",
            "description": "String to use before tags."
        },
        {
            "type": "string",
            "name": "$sep",
            "description": "String to use between the tags."
        },
        {
            "type": "string",
            "name": "$after",
            "description": "String to use after tags."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1117,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "get_the_terms",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of terms attached to the given post.",
    "params": [
        {
            "type": "array|WP_Error",
            "name": "$terms",
            "description": "List of attached terms, or WP_Error on failure."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Name of the taxonomy."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1205,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "the_terms",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the list of terms to display.",
    "params": [
        {
            "type": "array",
            "name": "$term_list",
            "description": "List of terms to display."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy name."
        },
        {
            "type": "string",
            "name": "$before",
            "description": "String to use before the terms."
        },
        {
            "type": "string",
            "name": "$sep",
            "description": "String to use between the terms."
        },
        {
            "type": "string",
            "name": "$after",
            "description": "String to use after the terms."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1353,
        "name": "wp-includes\/category-template.php"
    }
},
{
    "text": "pre_get_main_site_id",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the main site ID.",
    "params": [
        {
            "type": "int|null",
            "name": "$main_site_id",
            "description": "If a positive integer is returned, it is interpreted as the main site ID."
        },
        {
            "type": "WP_Network",
            "name": "$network",
            "description": "The network object for which the main site was detected."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 225,
        "name": "wp-includes\/class-wp-network.php"
    }
},
{
    "text": "network_by_path_segments_count",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the number of path segments to consider when searching for a site.",
    "params": [
        {
            "type": "int|null",
            "name": "$segments",
            "description": "The number of path segments to consider. WordPress by default looks at"
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "The requested domain."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The requested path, in full."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 377,
        "name": "wp-includes\/class-wp-network.php"
    }
},
{
    "text": "pre_get_network_by_path",
    "type": "filter",
    "params_count": 5,
    "description": "Determine a network by its domain and path.",
    "params": [
        {
            "type": "null|bool|object",
            "name": "$network",
            "description": "Network value to return by path."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "The requested domain."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The requested path, in full."
        },
        {
            "type": "int|null",
            "name": "$segments",
            "description": "The suggested number of paths to consult."
        },
        {
            "type": "array",
            "name": "$paths",
            "description": "The paths to search for, based on $path and $segments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 410,
        "name": "wp-includes\/class-wp-network.php"
    }
},
{
    "text": "metadata_lazyloader_queued_objects",
    "type": "action",
    "params_count": 3,
    "description": "Fires after objects are added to the metadata lazy-load queue.",
    "params": [
        {
            "type": "array",
            "name": "$object_ids",
            "description": "Object IDs."
        },
        {
            "type": "string",
            "name": "$object_type",
            "description": "Type of object being queued."
        },
        {
            "type": "WP_Metadata_Lazyloader",
            "name": "$lazyloader",
            "description": "The lazy-loader object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 104,
        "name": "wp-includes\/class-wp-metadata-lazyloader.php"
    }
},
{
    "text": "_deprecated blog_details",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a blog's details.",
    "params": [
        {
            "type": "object",
            "name": "$details",
            "description": "The blog details."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 245,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "get_site",
    "type": "filter",
    "params_count": 1,
    "description": "Fires after a site is retrieved.",
    "params": [
        {
            "type": "WP_Site",
            "name": "$_site",
            "description": "Site data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 541,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "get_network",
    "type": "filter",
    "params_count": 1,
    "description": "Fires after a network is retrieved.",
    "params": [
        {
            "type": "WP_Network",
            "name": "$_network",
            "description": "Network data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1166,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "wpmu_blog_updated",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the blog details are updated.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 27,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_spam_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'spam' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 325,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_ham_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'spam' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 334,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "mature_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'mature' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 348,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "unmature_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'mature' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 357,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "archive_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'archived' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 371,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "unarchive_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'archived' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 380,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_delete_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'deleted' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 394,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_undelete_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'deleted' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 403,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "clean_site_cache",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a site has been removed from the object cache.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Blog ID."
        },
        {
            "type": "WP_Site",
            "name": "$blog",
            "description": "Site object."
        },
        {
            "type": "string",
            "name": "$domain_path_key",
            "description": "md5 hash of domain and path."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 474,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "_deprecated refresh_blog_details",
    "type": "action",
    "params_count": 3,
    "description": "Fires after the blog details cache is cleared.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 486,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "switch_blog",
    "type": "action",
    "params_count": 2,
    "description": "Fires when the blog is switched.",
    "params": [
        {
            "type": "int",
            "name": "$new_blog",
            "description": "New blog ID."
        },
        {
            "type": "int",
            "name": "$new_blog",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 825,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_spam_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'spam' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 325,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_ham_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'spam' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 334,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "mature_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'mature' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 348,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "unmature_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'mature' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 357,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "archive_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'archived' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 371,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "unarchive_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'archived' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 380,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_delete_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'deleted' status is added to a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 394,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "make_undelete_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires when the 'deleted' status is removed from a blog.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 403,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "update_blog_public",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the current blog's 'public' setting is updated.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "Blog ID."
        },
        {
            "type": "string",
            "name": "$value",
            "description": "The value of blog status."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1064,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "clean_network_cache",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a network has been removed from the object cache.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Network ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1197,
        "name": "wp-includes\/ms-blogs.php"
    }
},
{
    "text": "pre_http_send_through_proxy",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether to preempt sending the request through the proxy server.",
    "params": [
        {
            "type": "null",
            "name": "$override",
            "description": "Whether to override the request result. Default null."
        },
        {
            "type": "string",
            "name": "$uri",
            "description": "URL to check."
        },
        {
            "type": "array",
            "name": "$check",
            "description": "Associative array result of parsing the URI."
        },
        {
            "type": "array",
            "name": "$home",
            "description": "Associative array result of parsing the site URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 191,
        "name": "wp-includes\/class-wp-http-proxy.php"
    }
},
{
    "text": "customize_partial_render",
    "type": "filter",
    "params_count": 3,
    "description": "Filters partial rendering.",
    "params": [
        {
            "type": "string|array|false",
            "name": "$rendered",
            "description": "The partial value. Default false."
        },
        {
            "type": "WP_Customize_Partial",
            "name": "$partial",
            "description": "WP_Customize_Setting instance."
        },
        {
            "type": "array",
            "name": "$container_context",
            "description": "Optional array of context data associated with"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 227,
        "name": "wp-includes\/customize\/class-wp-customize-partial.php"
    }
},
{
    "text": "customize_dynamic_partial_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a dynamic partial's constructor arguments.",
    "params": [
        {
            "type": "false|array",
            "name": "$partial_args",
            "description": "The arguments to the WP_Customize_Partial constructor."
        },
        {
            "type": "string",
            "name": "$partial_id",
            "description": "ID for dynamic partial."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 250,
        "name": "wp-includes\/customize\/class-wp-customize-selective-refresh.php"
    }
},
{
    "text": "customize_dynamic_partial_class",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the class used to construct partials.",
    "params": [
        {
            "type": "string",
            "name": "$partial_class",
            "description": "WP_Customize_Partial or a subclass."
        },
        {
            "type": "string",
            "name": "$partial_id",
            "description": "ID for dynamic partial."
        },
        {
            "type": "array",
            "name": "$partial_args",
            "description": "The arguments to the WP_Customize_Partial constructor."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 266,
        "name": "wp-includes\/customize\/class-wp-customize-selective-refresh.php"
    }
},
{
    "text": "customize_render_partials_response",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the response from rendering the partials.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "{"
        },
        {
            "type": "WP_Customize_Selective_Refresh",
            "name": "$this",
            "description": "Selective refresh component."
        },
        {
            "type": "array",
            "name": "$partials",
            "description": "Placements' context data for the partials rendered in the request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 452,
        "name": "wp-includes\/customize\/class-wp-customize-selective-refresh.php"
    }
},
{
    "text": "customize_render_partials_before",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before partials are rendered.",
    "params": [
        {
            "type": "WP_Customize_Selective_Refresh",
            "name": "$this",
            "description": "Selective refresh component."
        },
        {
            "type": "array",
            "name": "$partials",
            "description": "Placements' context data for the partials rendered in the request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 359,
        "name": "wp-includes\/customize\/class-wp-customize-selective-refresh.php"
    }
},
{
    "text": "customize_render_partials_after",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after partials are rendered.",
    "params": [
        {
            "type": "WP_Customize_Selective_Refresh",
            "name": "$this",
            "description": "Selective refresh component."
        },
        {
            "type": "array",
            "name": "$partials",
            "description": "Placements' context data for the partials rendered in the request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 408,
        "name": "wp-includes\/customize\/class-wp-customize-selective-refresh.php"
    }
},
{
    "text": "wp_query_search_exclusion_prefix",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the prefix that indicates that a search term should be excluded from results.",
    "params": [
        {
            "type": "string",
            "name": "$exclusion_prefix",
            "description": "The prefix. Default '-'. Returning"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1286,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "wp_search_stopwords",
    "type": "filter",
    "params_count": 1,
    "description": "Filters stopwords used when parsing search terms.",
    "params": [
        {
            "type": "array",
            "name": "$stopwords",
            "description": "Stopwords."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1390,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_search",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the search SQL that is used in the WHERE clause of WP_Query.",
    "params": [
        {
            "type": "string",
            "name": "$search",
            "description": "Search SQL for WHERE clause."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The current WP_Query object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1956,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_search_orderby",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the ORDER BY used when ordering search results.",
    "params": [
        {
            "type": "string",
            "name": "$search_orderby",
            "description": "The ORDER BY clause."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The current WP_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2204,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_where",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WHERE clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$where",
            "description": "The WHERE clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2376,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_join",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the JOIN clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$join",
            "description": "The JOIN clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2386,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_feed_join",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the JOIN clause of the comments feed query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$cjoin",
            "description": "The JOIN clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2426,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_feed_where",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WHERE clause of the comments feed query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$cwhere",
            "description": "The WHERE clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2436,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_feed_groupby",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the GROUP BY clause of the comments feed query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$cgroupby",
            "description": "The GROUP BY clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2446,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_feed_orderby",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the ORDER BY clause of the comments feed query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$corderby",
            "description": "The ORDER BY clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2456,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_feed_limits",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the LIMIT clause of the comments feed query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$climits",
            "description": "The JOIN clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2466,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_where_paged",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WHERE clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$where",
            "description": "The WHERE clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2507,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_groupby",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the GROUP BY clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$groupby",
            "description": "The GROUP BY clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2517,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_join_paged",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the JOIN clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$join",
            "description": "The JOIN clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2529,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_orderby",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the ORDER BY clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$orderby",
            "description": "The ORDER BY clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2539,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_distinct",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the DISTINCT clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$distinct",
            "description": "The DISTINCT clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2549,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "post_limits",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the LIMIT clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$limits",
            "description": "The LIMIT clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2559,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_fields",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the SELECT clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$fields",
            "description": "The SELECT clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2569,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_clauses",
    "type": "filter",
    "params_count": 2,
    "description": "Filters all query clauses at once, for convenience.",
    "params": [
        {
            "type": "array",
            "name": "$clauses",
            "description": "The list of clauses for the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2582,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_where_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WHERE clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$where",
            "description": "The WHERE clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2619,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_groupby_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the GROUP BY clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$groupby",
            "description": "The GROUP BY clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2631,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_join_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the JOIN clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$join",
            "description": "The JOIN clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2643,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_orderby_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the ORDER BY clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$orderby",
            "description": "The ORDER BY clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2655,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_distinct_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the DISTINCT clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$distinct",
            "description": "The DISTINCT clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2667,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_fields_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the SELECT clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$fields",
            "description": "The SELECT clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2679,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "post_limits_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the LIMIT clause of the query.",
    "params": [
        {
            "type": "string",
            "name": "$limits",
            "description": "The LIMIT clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2691,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_clauses_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters all query clauses at once, for convenience.",
    "params": [
        {
            "type": "array",
            "name": "$pieces",
            "description": "The pieces of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2706,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_request",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the completed SQL query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$request",
            "description": "The complete SQL query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2737,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_pre_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the posts array before the query takes place.",
    "params": [
        {
            "type": "array|null",
            "name": "$posts",
            "description": "Return an array of post data to short-circuit WP's query,"
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2756,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "split_the_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to split the query.",
    "params": [
        {
            "type": "bool",
            "name": "$split_the_query",
            "description": "Whether or not to split the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2804,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_request_ids",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Post IDs SQL request before sending.",
    "params": [
        {
            "type": "string",
            "name": "$request",
            "description": "The post ID request."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2819,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_results",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the raw post results array, prior to status checks.",
    "params": [
        {
            "type": "array",
            "name": "$posts",
            "description": "The post results array."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2850,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_feed_orderby",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the ORDER BY clause of the comments feed query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$corderby",
            "description": "The ORDER BY clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2456,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_feed_limits",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the LIMIT clause of the comments feed query before sending.",
    "params": [
        {
            "type": "string",
            "name": "$climits",
            "description": "The JOIN clause of the query."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2466,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "the_preview",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the single post for preview mode.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post_preview",
            "description": "The Post object."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2922,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "the_posts",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of retrieved posts after they've been fetched and",
    "params": [
        {
            "type": "array",
            "name": "$posts",
            "description": "The array of retrieved posts."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2982,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "found_posts_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the query to run for retrieving the found posts.",
    "params": [
        {
            "type": "string",
            "name": "$found_posts",
            "description": "The query to run to find the found posts."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3033,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "found_posts",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the number of found posts for the query.",
    "params": [
        {
            "type": "int",
            "name": "$found_posts",
            "description": "The number of posts found."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3054,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "content_pagination",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the \"pages\" derived from splitting the post content.",
    "params": [
        {
            "type": "array",
            "name": "$pages",
            "description": "Array of \"pages\" derived from the post content."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Current post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4024,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "parse_query",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the main query vars have been parsed.",
    "params": [
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1006,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "parse_tax_query",
    "type": "action",
    "params_count": 1,
    "description": "Fires after taxonomy-related query vars have been parsed.",
    "params": [
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1235,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "pre_get_posts",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the query variable object is created, but before the actual query is run.",
    "params": [
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1634,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "posts_selection",
    "type": "action",
    "params_count": 1,
    "description": "Fires to announce the query's current selection parameters.",
    "params": [
        {
            "type": "string",
            "name": "$selection",
            "description": "The assembled selection query."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2602,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "loop_start",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the loop is started.",
    "params": [
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3097,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "loop_end",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the loop has ended.",
    "params": [
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3123,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "loop_no_results",
    "type": "action",
    "params_count": 1,
    "description": "Fires if no results are found in a post query.",
    "params": [
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The WP_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3134,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "comment_loop_start",
    "type": "action",
    "params_count": 0,
    "description": "Fires once the comment loop is started.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 3184,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "the_post",
    "type": "action",
    "params_count": 2,
    "description": "Fires once the post data has been setup.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The Post object (passed by reference)."
        },
        {
            "type": "WP_Query",
            "name": "$this",
            "description": "The current Query object (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4046,
        "name": "wp-includes\/class-wp-query.php"
    }
},
{
    "text": "embed_handler_html",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned embed handler.",
    "params": [
        {
            "type": "mixed",
            "name": "$return",
            "description": "The shortcode callback function to call."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The attempted embed URL."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "An array of shortcode attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 184,
        "name": "wp-includes\/class-wp-embed.php"
    }
},
{
    "text": "oembed_ttl",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the oEmbed TTL value (time to live).",
    "params": [
        {
            "type": "int",
            "name": "$time",
            "description": "Time to live (in seconds)."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The attempted embed URL."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "An array of shortcode attributes."
        },
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 211,
        "name": "wp-includes\/class-wp-embed.php"
    }
},
{
    "text": "embed_oembed_html",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the cached oEmbed HTML.",
    "params": [
        {
            "type": "mixed",
            "name": "$cache",
            "description": "The cached HTML result, stored in post meta."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The attempted embed URL."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "An array of shortcode attributes."
        },
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 253,
        "name": "wp-includes\/class-wp-embed.php"
    }
},
{
    "text": "embed_oembed_discover",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to inspect the given URL for discoverable link tags.",
    "params": [
        {
            "type": "bool",
            "name": "$enable",
            "description": "Whether to enable `<link>` tag discovery. Default true."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 267,
        "name": "wp-includes\/class-wp-embed.php"
    }
},
{
    "text": "embed_maybe_make_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the returned, maybe-linked embed URL.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The linked or original URL."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The original URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 438,
        "name": "wp-includes\/class-wp-embed.php"
    }
},
{
    "text": "is_protected_meta",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether a meta key is protected.",
    "params": [
        {
            "type": "bool",
            "name": "$protected",
            "description": "Whether the key is protected. Default false."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Meta key."
        },
        {
            "type": "string",
            "name": "$meta_type",
            "description": "Meta type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 937,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "register_meta_args",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the registration arguments when registering meta.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Array of meta registration arguments."
        },
        {
            "type": "array",
            "name": "$defaults",
            "description": "Array of default arguments."
        },
        {
            "type": "string",
            "name": "$object_type",
            "description": "Object type."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Meta key."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1071,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "update_postmeta",
    "type": "action",
    "params_count": 4,
    "description": "Fires immediately before updating a post's metadata.",
    "params": [
        {
            "type": "int",
            "name": "$meta_id",
            "description": "ID of metadata entry to update."
        },
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Meta key."
        },
        {
            "type": "mixed",
            "name": "$meta_value",
            "description": "Meta value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 247,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "updated_postmeta",
    "type": "action",
    "params_count": 4,
    "description": "Fires immediately after updating a post's metadata.",
    "params": [
        {
            "type": "int",
            "name": "$meta_id",
            "description": "ID of updated metadata entry."
        },
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Meta key."
        },
        {
            "type": "mixed",
            "name": "$meta_value",
            "description": "Meta value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 284,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "delete_postmeta",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before deleting metadata for a post.",
    "params": [
        {
            "type": "array",
            "name": "$meta_ids",
            "description": "An array of post metadata entry IDs to delete."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 402,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "deleted_postmeta",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after deleting metadata for a post.",
    "params": [
        {
            "type": "array",
            "name": "$meta_ids",
            "description": "An array of deleted post metadata entry IDs."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 444,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "update_postmeta",
    "type": "action",
    "params_count": 4,
    "description": "Fires immediately before updating a post's metadata.",
    "params": [
        {
            "type": "int",
            "name": "$meta_id",
            "description": "ID of metadata entry to update."
        },
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Meta key."
        },
        {
            "type": "mixed",
            "name": "$meta_value",
            "description": "Meta value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 247,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "updated_postmeta",
    "type": "action",
    "params_count": 4,
    "description": "Fires immediately after updating a post's metadata.",
    "params": [
        {
            "type": "int",
            "name": "$meta_id",
            "description": "ID of updated metadata entry."
        },
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "string",
            "name": "$meta_key",
            "description": "Meta key."
        },
        {
            "type": "mixed",
            "name": "$meta_value",
            "description": "Meta value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 284,
        "name": "wp-includes\/meta.php"
    }
},
{
    "text": "customizer_widgets_section_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filters Customizer widget section arguments for a given sidebar.",
    "params": [
        {
            "type": "array",
            "name": "$section_args",
            "description": "Array of Customizer widget section arguments."
        },
        {
            "type": "string",
            "name": "$section_id",
            "description": "Customizer section ID."
        },
        {
            "type": "int|string",
            "name": "$sidebar_id",
            "description": "Sidebar ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 461,
        "name": "wp-includes\/class-wp-customize-widgets.php"
    }
},
{
    "text": "is_wide_widget_in_customizer",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the given widget is considered \"wide\".",
    "params": [
        {
            "type": "bool",
            "name": "$is_wide",
            "description": "Whether the widget is wide, Default false."
        },
        {
            "type": "string",
            "name": "$widget_id",
            "description": "Widget ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 577,
        "name": "wp-includes\/class-wp-customize-widgets.php"
    }
},
{
    "text": "widget_customizer_setting_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the common arguments supplied when constructing a Customizer setting.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Array of Customizer setting arguments."
        },
        {
            "type": "string",
            "name": "$id",
            "description": "Widget setting ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 882,
        "name": "wp-includes\/class-wp-customize-widgets.php"
    }
},
{
    "text": "search_form_format",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML format of the search form.",
    "params": [
        {
            "type": "string",
            "name": "$format",
            "description": "The type of markup to use in the search form."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 201,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_search_form",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML output of the search form.",
    "params": [
        {
            "type": "string",
            "name": "$form",
            "description": "The search form HTML output."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 235,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "loginout",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML output for the Log In\/Log Out link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The HTML link content."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 272,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "loginout",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML output for the Log In\/Log Out link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The HTML link content."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 272,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "logout_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the logout URL.",
    "params": [
        {
            "type": "string",
            "name": "$logout_url",
            "description": "The HTML-encoded logout URL."
        },
        {
            "type": "string",
            "name": "$redirect",
            "description": "Path to redirect to on logout."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 306,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "login_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the login URL.",
    "params": [
        {
            "type": "string",
            "name": "$login_url",
            "description": "The login URL. Not HTML-encoded."
        },
        {
            "type": "string",
            "name": "$redirect",
            "description": "The path to redirect to on login, if supplied."
        },
        {
            "type": "bool",
            "name": "$force_reauth",
            "description": "Whether to force reauthorization, even if a cookie is present."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 338,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "register_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the user registration URL.",
    "params": [
        {
            "type": "string",
            "name": "$register",
            "description": "The user registration URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 356,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "login_form_defaults",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default login form output arguments.",
    "params": [
        {
            "type": "array",
            "name": "$defaults",
            "description": "An array of default login form arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 419,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "login_form_top",
    "type": "filter",
    "params_count": 2,
    "description": "Filters content to display at the top of the login form.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Content to display. Default empty."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Array of login form arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 431,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "login_form_middle",
    "type": "filter",
    "params_count": 2,
    "description": "Filters content to display in the middle of the login form.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Content to display. Default empty."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Array of login form arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 444,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "login_form_bottom",
    "type": "filter",
    "params_count": 2,
    "description": "Filters content to display at the bottom of the login form.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Content to display. Default empty."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Array of login form arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 456,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "lostpassword_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Lost Password URL.",
    "params": [
        {
            "type": "string",
            "name": "$lostpassword_url",
            "description": "The lost password page URL."
        },
        {
            "type": "string",
            "name": "$redirect",
            "description": "The path to redirect to on login."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 508,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "register",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML link to the Registration or Admin page.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The HTML code for the link to the Registration or Admin page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 546,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "bloginfo_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL returned by get_bloginfo().",
    "params": [
        {
            "type": "mixed",
            "name": "$output",
            "description": "The URL returned by bloginfo()."
        },
        {
            "type": "mixed",
            "name": "$show",
            "description": "Type of information requested."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 746,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "bloginfo",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the site information returned by get_bloginfo().",
    "params": [
        {
            "type": "mixed",
            "name": "$output",
            "description": "The requested non-URL site information."
        },
        {
            "type": "mixed",
            "name": "$show",
            "description": "Type of information requested."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 756,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_site_icon_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the site icon URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "Site icon URL."
        },
        {
            "type": "int",
            "name": "$size",
            "description": "Size of the site icon."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "ID of the blog to get the site icon for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 805,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_custom_logo",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the custom logo output.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "Custom logo HTML output."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "ID of the blog to get the custom logo for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 923,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "pre_get_document_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the document title before it is generated.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "The document title. Default empty string."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 959,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "document_title_separator",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the separator for the document title.",
    "params": [
        {
            "type": "string",
            "name": "$sep",
            "description": "Document title separator. Default '-'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1036,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "document_title_parts",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the parts of the document title.",
    "params": [
        {
            "type": "array",
            "name": "$title",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1052,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_title_parts",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the parts of the page title.",
    "params": [
        {
            "type": "array",
            "name": "$title_array",
            "description": "Parts of the page title."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1202,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_title",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the text of the page title.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Page title."
        },
        {
            "type": "string",
            "name": "$sep",
            "description": "Title separator."
        },
        {
            "type": "string",
            "name": "$seplocation",
            "description": "Location of the separator (left or right)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1221,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "single_post_title",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the page title for a single post.",
    "params": [
        {
            "type": "string",
            "name": "$_post_title",
            "description": "The single post page title."
        },
        {
            "type": "object",
            "name": "$_post",
            "description": "The current queried object as returned by get_queried_object()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1261,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "post_type_archive_title",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post type archive title.",
    "params": [
        {
            "type": "string",
            "name": "$post_type_name",
            "description": "Post type 'name' label."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1298,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "single_cat_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the category archive page title.",
    "params": [
        {
            "type": "string",
            "name": "$term_name",
            "description": "Category name for archive being displayed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1367,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "single_tag_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the tag archive page title.",
    "params": [
        {
            "type": "string",
            "name": "$term_name",
            "description": "Tag name for archive being displayed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1376,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "single_term_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the custom taxonomy archive page title.",
    "params": [
        {
            "type": "string",
            "name": "$term_name",
            "description": "Term name for archive being displayed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1385,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_the_archive_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the archive title.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Archive title to be displayed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1522,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_the_archive_description",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the archive description.",
    "params": [
        {
            "type": "string",
            "name": "$description",
            "description": "Archive description to be displayed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1569,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_the_post_type_description",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the description for a post type archive.",
    "params": [
        {
            "type": "string",
            "name": "$description",
            "description": "The post type description."
        },
        {
            "type": "WP_Post_Type",
            "name": "$post_type_obj",
            "description": "The post type object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1603,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_archives_link",
    "type": "filter",
    "params_count": 6,
    "description": "Filters the archive link content.",
    "params": [
        {
            "type": "string",
            "name": "$link_html",
            "description": "The archive HTML link content."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "URL to archive."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "Archive text description."
        },
        {
            "type": "string",
            "name": "$format",
            "description": "Link format. Can be 'link', 'option', 'html', or custom."
        },
        {
            "type": "string",
            "name": "$before",
            "description": "Content to prepend to the description."
        },
        {
            "type": "string",
            "name": "$after",
            "description": "Content to append to the description."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1665,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "getarchives_where",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the SQL WHERE clause for retrieving archives.",
    "params": [
        {
            "type": "string",
            "name": "$sql_where",
            "description": "Portion of SQL query containing the WHERE clause."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "An array of default arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1749,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "getarchives_join",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the SQL JOIN clause for retrieving archives.",
    "params": [
        {
            "type": "string",
            "name": "$sql_join",
            "description": "Portion of SQL query containing JOIN clause."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "An array of default arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1759,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_calendar",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML calendar output.",
    "params": [
        {
            "type": "string",
            "name": "$calendar_output",
            "description": "HTML output of the calendar."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2136,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_calendar",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML calendar output.",
    "params": [
        {
            "type": "string",
            "name": "$calendar_output",
            "description": "HTML output of the calendar."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2136,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_date",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the date a post was published for display.",
    "params": [
        {
            "type": "string",
            "name": "$the_date",
            "description": "The formatted date string."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "PHP date format. Defaults to 'date_format' option"
        },
        {
            "type": "string",
            "name": "$before",
            "description": "HTML output before the date."
        },
        {
            "type": "string",
            "name": "$after",
            "description": "HTML output after the date."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2232,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_the_date",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the date a post was published.",
    "params": [
        {
            "type": "string",
            "name": "$the_date",
            "description": "The formatted date."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "PHP date format. Defaults to 'date_format' option"
        },
        {
            "type": "int|WP_Post",
            "name": "$post",
            "description": "The post object or ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2276,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_modified_date",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the date a post was last modified for display.",
    "params": [
        {
            "type": "string",
            "name": "$the_modified_date",
            "description": "The last modified date."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "PHP date format. Defaults to 'date_format' option"
        },
        {
            "type": "string",
            "name": "$before",
            "description": "HTML output before the date."
        },
        {
            "type": "string",
            "name": "$after",
            "description": "HTML output after the date."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2304,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_the_modified_date",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the date a post was last modified.",
    "params": [
        {
            "type": "string|bool",
            "name": "$the_time",
            "description": "The formatted date or false if no post is found."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "PHP date format. Defaults to value specified in"
        },
        {
            "type": "WP_Post|null",
            "name": "$post",
            "description": "WP_Post object or null if no post is found."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2346,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_time",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the time a post was written for display.",
    "params": [
        {
            "type": "string",
            "name": "$get_the_time",
            "description": "The formatted time."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "The time format. Accepts 'G', 'U',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2366,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_the_time",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the time a post was written.",
    "params": [
        {
            "type": "string",
            "name": "$the_time",
            "description": "The formatted time."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "Format to use for retrieving the time the post was written."
        },
        {
            "type": "int|WP_Post",
            "name": "$post",
            "description": "WP_Post object or ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2403,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_post_time",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the localized time a post was written.",
    "params": [
        {
            "type": "string",
            "name": "$time",
            "description": "The formatted time."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "Format to use for retrieving the time the post was written."
        },
        {
            "type": "bool",
            "name": "$gmt",
            "description": "Whether to retrieve the GMT time. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2442,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_modified_time",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the localized time a post was last modified, for display.",
    "params": [
        {
            "type": "string",
            "name": "$get_the_modified_time",
            "description": "The formatted time."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "The time format. Accepts 'G', 'U',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2463,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_the_modified_time",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the localized time a post was last modified.",
    "params": [
        {
            "type": "string|bool",
            "name": "$the_time",
            "description": "The formatted time or false if no post is found."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "Format to use for retrieving the time the post was"
        },
        {
            "type": "WP_Post|null",
            "name": "$post",
            "description": "WP_Post object or null if no post is found."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2502,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_post_modified_time",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the localized time a post was last modified.",
    "params": [
        {
            "type": "string",
            "name": "$time",
            "description": "The formatted time."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "The date format. Accepts 'G', 'U', or php date format. Default 'U'."
        },
        {
            "type": "bool",
            "name": "$gmt",
            "description": "Whether to return the GMT time. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2539,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_weekday",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the weekday on which the post was written, for display.",
    "params": [
        {
            "type": "string",
            "name": "$the_weekday",
            "description": ""
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2560,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_weekday_date",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the localized date on which the post was written, for display.",
    "params": [
        {
            "type": "string",
            "name": "$the_weekday_date",
            "description": ""
        },
        {
            "type": "string",
            "name": "$before",
            "description": "The HTML to output before the date."
        },
        {
            "type": "string",
            "name": "$after",
            "description": "The HTML to output after the date."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2597,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "site_icon_meta_tags",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the site icon meta tags, so Plugins can add their own.",
    "params": [
        {
            "type": "array",
            "name": "$meta_tags",
            "description": "Site Icon meta elements."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2855,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_resource_hints",
    "type": "filter",
    "params_count": 2,
    "description": "Filters domains and URLs for resource hints of relation type.",
    "params": [
        {
            "type": "array",
            "name": "$urls",
            "description": "URLs to print for resource hints."
        },
        {
            "type": "string",
            "name": "$relation_type",
            "description": "The relation type the URLs are printed for, e.g. 'preconnect' or 'prerender'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2901,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "user_can_richedit",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether the user can access the visual editor.",
    "params": [
        {
            "type": "bool",
            "name": "$wp_rich_edit",
            "description": "Whether the user can access the visual editor."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3046,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_default_editor",
    "type": "filter",
    "params_count": 1,
    "description": "Filters which editor should be displayed by default.",
    "params": [
        {
            "type": "string",
            "name": "$r",
            "description": "Which editor should be displayed by default. Either 'tinymce', 'html', or 'test'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3073,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_code_editor_settings",
    "type": "filter",
    "params_count": 2,
    "description": "Filters settings that are passed into the code editor.",
    "params": [
        {
            "type": "array",
            "name": "$settings",
            "description": "The array of settings passed to the code editor. A falsey value disables the editor."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3446,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_search_query",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the contents of the search query variable.",
    "params": [
        {
            "type": "mixed",
            "name": "$search",
            "description": "Contents of the search query variable."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3531,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_search_query",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the contents of the search query variable for display.",
    "params": [
        {
            "type": "mixed",
            "name": "$search",
            "description": "Contents of the search query variable."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3554,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "language_attributes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the language attributes for display in the html tag.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "A space-separated list of language attributes."
        },
        {
            "type": "string",
            "name": "$doctype",
            "description": "The type of html document (xhtml|html)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3594,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "paginate_links",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the paginated links for the given archive pages.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The paginated link URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3784,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_admin_css_uri",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URI of a WordPress admin CSS file.",
    "params": [
        {
            "type": "string",
            "name": "$_file",
            "description": "Relative path to the file with query arguments attached."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "Relative path to the file, minus its \".css\" extension."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3964,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_admin_css",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the stylesheet link to the specified CSS file.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheet_link",
            "description": "HTML link element for the stylesheet."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "Style handle name or filename (without \".css\" extension)"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4010,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_generator_type",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the output of the XHTML generator tag.",
    "params": [
        {
            "type": "string",
            "name": "$generator_type",
            "description": "The XHTML generator."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4050,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "the_generator",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the output of the XHTML generator tag for display.",
    "params": [
        {
            "type": "string",
            "name": "$generator_type",
            "description": "The generator output."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of generator to output. Accepts 'html',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4073,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_header",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the header template file is loaded.",
    "params": [
        {
            "type": "string|null",
            "name": "$name",
            "description": "Name of the specific header file to use. null for the default header."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 31,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_footer",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the footer template file is loaded.",
    "params": [
        {
            "type": "string|null",
            "name": "$name",
            "description": "Name of the specific footer file to use. null for the default footer."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 66,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "get_sidebar",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the sidebar template file is loaded.",
    "params": [
        {
            "type": "string|null",
            "name": "$name",
            "description": "Name of the specific sidebar file to use. null for the default sidebar."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 101,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "pre_get_search_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the search form is retrieved, at the start of get_search_form().",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 189,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_meta",
    "type": "action",
    "params_count": 0,
    "description": "Fires before displaying echoed content in the sidebar.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 571,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_head",
    "type": "action",
    "params_count": 0,
    "description": "Prints scripts or data in the head tag on the front end.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2614,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_footer",
    "type": "action",
    "params_count": 0,
    "description": "Prints scripts or data before the closing body tag on the front end.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2630,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "wp_enqueue_code_editor",
    "type": "action",
    "params_count": 1,
    "description": "Fires when scripts and styles are enqueued for the code editor.",
    "params": [
        {
            "type": "array",
            "name": "$settings",
            "description": "Settings for the enqueued code editor."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3506,
        "name": "wp-includes\/general-template.php"
    }
},
{
    "text": "redirect_canonical",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the canonical redirect URL.",
    "params": [
        {
            "type": "string",
            "name": "$redirect_url",
            "description": "The redirect URL."
        },
        {
            "type": "string",
            "name": "$requested_url",
            "description": "The requested URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 523,
        "name": "wp-includes\/canonical.php"
    }
},
{
    "text": "role_has_cap",
    "type": "filter",
    "params_count": 3,
    "description": "Filters which capabilities a role has.",
    "params": [
        {
            "type": "array",
            "name": "$capabilities",
            "description": "Array of role capabilities."
        },
        {
            "type": "string",
            "name": "$cap",
            "description": "Capability name."
        },
        {
            "type": "string",
            "name": "$name",
            "description": "Role name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 101,
        "name": "wp-includes\/class-wp-role.php"
    }
},
{
    "text": "theme_templates",
    "type": "filter",
    "params_count": 4,
    "description": "Filters list of page templates for a theme.",
    "params": [
        {
            "type": "string[]",
            "name": "$post_templates",
            "description": "Array of page templates. Keys are filenames,"
        },
        {
            "type": "WP_Theme",
            "name": "$this",
            "description": "The theme object."
        },
        {
            "type": "WP_Post|null",
            "name": "$post",
            "description": "The post being edited, provided for context, or null."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type to get the templates for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1081,
        "name": "wp-includes\/class-wp-theme.php"
    }
},
{
    "text": "theme_scandir_exclusions",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the array of excluded directories and files while scanning theme folder.",
    "params": [
        {
            "type": "array",
            "name": "$exclusions",
            "description": "Array of excluded directories and files."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1146,
        "name": "wp-includes\/class-wp-theme.php"
    }
},
{
    "text": "network_allowed_themes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of themes allowed on the network.",
    "params": [
        {
            "type": "array",
            "name": "$allowed_themes",
            "description": "An array of theme stylesheet names."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "ID of the site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1272,
        "name": "wp-includes\/class-wp-theme.php"
    }
},
{
    "text": "allowed_themes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of themes allowed on the network.",
    "params": [
        {
            "type": "array",
            "name": "$allowed_themes",
            "description": "An array of theme stylesheet names."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1300,
        "name": "wp-includes\/class-wp-theme.php"
    }
},
{
    "text": "site_allowed_themes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of themes allowed on the site.",
    "params": [
        {
            "type": "array",
            "name": "$allowed_themes",
            "description": "An array of theme stylesheet names."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "ID of the site. Defaults to current site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1332,
        "name": "wp-includes\/class-wp-theme.php"
    }
},
{
    "text": "site_allowed_themes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of themes allowed on the site.",
    "params": [
        {
            "type": "array",
            "name": "$allowed_themes",
            "description": "An array of theme stylesheet names."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "ID of the site. Defaults to current site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1332,
        "name": "wp-includes\/class-wp-theme.php"
    }
},
{
    "text": "wp_http_accept_encoding",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the allowed encoding types.",
    "params": [
        {
            "type": "array",
            "name": "$type",
            "description": "Encoding types allowed. Accepts 'gzinflate',"
        },
        {
            "type": "string",
            "name": "$url",
            "description": "URL of the HTTP request."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "HTTP request arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 173,
        "name": "wp-includes\/class-wp-http-encoding.php"
    }
},
{
    "text": "",
    "type": "filter",
    "params_count": 1,
    "description": "Executes the callback functions hooked on a specific action hook.",
    "params": [
        {
            "type": "mixed",
            "name": "$args",
            "description": "Arguments to pass to the hook callbacks."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 310,
        "name": "wp-includes\/class-wp-hook.php"
    }
},
{
    "text": "incompatible_sql_modes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of incompatible SQL modes to exclude.",
    "params": [
        {
            "type": "array",
            "name": "$incompatible_modes",
            "description": "An array of incompatible modes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 827,
        "name": "wp-includes\/wp-db.php"
    }
},
{
    "text": "query",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the database query.",
    "params": [
        {
            "type": "string",
            "name": "$query",
            "description": "Database query."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1789,
        "name": "wp-includes\/wp-db.php"
    }
},
{
    "text": "pre_get_table_charset",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the table charset value before the DB is checked.",
    "params": [
        {
            "type": "string",
            "name": "$charset",
            "description": "The character set to use. Default null."
        },
        {
            "type": "string",
            "name": "$table",
            "description": "The name of the table being checked."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2550,
        "name": "wp-includes\/wp-db.php"
    }
},
{
    "text": "pre_get_col_charset",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the column charset value before the DB is checked.",
    "params": [
        {
            "type": "string",
            "name": "$charset",
            "description": "The character set to use. Default null."
        },
        {
            "type": "string",
            "name": "$table",
            "description": "The name of the table being checked."
        },
        {
            "type": "string",
            "name": "$column",
            "description": "The name of the column being checked."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2654,
        "name": "wp-includes\/wp-db.php"
    }
},
{
    "text": "stylesheet",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the name of current stylesheet.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "Name of the current stylesheet."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 160,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "stylesheet_directory",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the stylesheet directory path for current theme.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheet_dir",
            "description": "Absolute path to the current theme."
        },
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "Directory name of the current theme."
        },
        {
            "type": "string",
            "name": "$theme_root",
            "description": "Absolute path to themes directory."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 184,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "stylesheet_directory_uri",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the stylesheet directory URI.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheet_dir_uri",
            "description": "Stylesheet directory URI."
        },
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "Name of the activated theme's directory."
        },
        {
            "type": "string",
            "name": "$theme_root_uri",
            "description": "Themes root URI."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 208,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "stylesheet_uri",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URI of the current theme stylesheet.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheet_uri",
            "description": "Stylesheet URI for the current theme\/child theme."
        },
        {
            "type": "string",
            "name": "$stylesheet_dir_uri",
            "description": "Stylesheet directory URI for the current theme\/child theme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 232,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "locale_stylesheet_uri",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the localized stylesheet URI.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheet_uri",
            "description": "Localized stylesheet URI."
        },
        {
            "type": "string",
            "name": "$stylesheet_dir_uri",
            "description": "Stylesheet directory URI."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 275,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "template",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the name of the current theme.",
    "params": [
        {
            "type": "string",
            "name": "$template",
            "description": "Current theme's directory name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 293,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "template_directory",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the current theme directory path.",
    "params": [
        {
            "type": "string",
            "name": "$template_dir",
            "description": "The URI of the current theme directory."
        },
        {
            "type": "string",
            "name": "$template",
            "description": "Directory name of the current theme."
        },
        {
            "type": "string",
            "name": "$theme_root",
            "description": "Absolute path to the themes directory."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 317,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "template_directory_uri",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the current theme directory URI.",
    "params": [
        {
            "type": "string",
            "name": "$template_dir_uri",
            "description": "The URI of the current theme directory."
        },
        {
            "type": "string",
            "name": "$template",
            "description": "Directory name of the current theme."
        },
        {
            "type": "string",
            "name": "$theme_root_uri",
            "description": "The themes root URI."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 341,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "theme_root",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the absolute path to the themes directory.",
    "params": [
        {
            "type": "string",
            "name": "$theme_root",
            "description": "Absolute path to themes directory."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 562,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "theme_root_uri",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the URI for themes directory.",
    "params": [
        {
            "type": "string",
            "name": "$theme_root_uri",
            "description": "The URI for themes directory."
        },
        {
            "type": "string",
            "name": "$siteurl",
            "description": "WordPress web address which is set in General Options."
        },
        {
            "type": "string",
            "name": "$stylesheet_or_template",
            "description": "Stylesheet or template name of the theme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 613,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "get_header_image_tag",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the markup of header images.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "The HTML image tag markup being filtered."
        },
        {
            "type": "object",
            "name": "$header",
            "description": "The custom header object returned by 'get_custom_header()'."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "Array of the attributes for the image tag."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1082,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "get_header_video_url",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the header video URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "Header video URL, if available."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1353,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "header_video_settings",
    "type": "filter",
    "params_count": 1,
    "description": "Retrieve header video settings.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 1408,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "is_header_video_active",
    "type": "filter",
    "params_count": 1,
    "description": "Modify whether the custom header video is eligible to show on the current page.",
    "params": [
        {
            "type": "bool",
            "name": "$show_video",
            "description": "Whether the custom header video should be shown. Returns the value"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1455,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "wp_get_custom_css",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Custom CSS Output into the .",
    "params": [
        {
            "type": "string",
            "name": "$css",
            "description": "CSS pulled in from the Custom CSS CPT."
        },
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "The theme stylesheet name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1711,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "update_custom_css_data",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the `css` (`post_content`) and `preprocessed` (`post_content_filtered`) args for a `custom_css` post being updated.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "{"
        },
        {
            "type": "array",
            "name": "$args",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1776,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "editor_stylesheets",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of stylesheets applied to the editor.",
    "params": [
        {
            "type": "array",
            "name": "$stylesheets",
            "description": "Array of stylesheets to be applied to the editor."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1923,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "get_theme_starter_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the expanded array of starter content.",
    "params": [
        {
            "type": "array",
            "name": "$content",
            "description": "Array of starter content."
        },
        {
            "type": "array",
            "name": "$config",
            "description": "Array of theme-specific starter content configuration."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2197,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "switch_theme",
    "type": "action",
    "params_count": 3,
    "description": "Fires after the theme is switched.",
    "params": [
        {
            "type": "string",
            "name": "$new_name",
            "description": "Name of the new theme."
        },
        {
            "type": "WP_Theme",
            "name": "$new_theme",
            "description": "WP_Theme instance of the new theme."
        },
        {
            "type": "WP_Theme",
            "name": "$old_theme",
            "description": "WP_Theme instance of the old theme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 753,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "after_switch_theme",
    "type": "action",
    "params_count": 2,
    "description": "Fires on the first WP load after a theme switch if the old theme still exists.",
    "params": [
        {
            "type": "string",
            "name": "$old_name",
            "description": "Old theme name."
        },
        {
            "type": "WP_Theme",
            "name": "$old_theme",
            "description": "WP_Theme instance of the old theme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2749,
        "name": "wp-includes\/theme.php"
    }
},
{
    "text": "rss_update_period",
    "type": "filter",
    "params_count": 1,
    "description": "Filters how often to update the RSS feed.",
    "params": [
        {
            "type": "string",
            "name": "$duration",
            "description": "The update period. Accepts 'hourly', 'daily', 'weekly', 'monthly',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 61,
        "name": "wp-includes\/feed-rss2.php"
    }
},
{
    "text": "rss_update_frequency",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the RSS update frequency.",
    "params": [
        {
            "type": "string",
            "name": "$frequency",
            "description": "An integer passed as a string representing the frequency"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 74,
        "name": "wp-includes\/feed-rss2.php"
    }
},
{
    "text": "rss_tag_pre",
    "type": "action",
    "params_count": 1,
    "description": "Fires between the xml and rss tags in a feed.",
    "params": [
        {
            "type": "string",
            "name": "$context",
            "description": "Type of feed. Possible values include 'rss2', 'rss2-comments',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 21,
        "name": "wp-includes\/feed-rss2.php"
    }
},
{
    "text": "rss2_ns",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the RSS root to add namespaces.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 36,
        "name": "wp-includes\/feed-rss2.php"
    }
},
{
    "text": "rss2_head);",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the RSS2 Feed Header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 82,
        "name": "wp-includes\/feed-rss2.php"
    }
},
{
    "text": "rss2_item",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of each RSS2 feed item.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 119,
        "name": "wp-includes\/feed-rss2.php"
    }
},
{
    "text": "pre_cache_alloptions",
    "type": "filter",
    "params_count": 1,
    "description": "Filters all options before caching them.",
    "params": [
        {
            "type": "array",
            "name": "$alloptions",
            "description": "Array with all options."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 215,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "alloptions",
    "type": "filter",
    "params_count": 1,
    "description": "Filters all options after retrieving them.",
    "params": [
        {
            "type": "array",
            "name": "$alloptions",
            "description": "Array with all options."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 227,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "pre_update_option",
    "type": "filter",
    "params_count": 3,
    "description": "Filters an option before its value is (maybe) serialized and updated.",
    "params": [
        {
            "type": "mixed",
            "name": "$value",
            "description": "The new, unserialized option value."
        },
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the option."
        },
        {
            "type": "mixed",
            "name": "$old_value",
            "description": "The old option value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 323,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "register_setting_args",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the registration arguments when registering a setting.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Array of setting registration arguments."
        },
        {
            "type": "array",
            "name": "$defaults",
            "description": "Array of default arguments."
        },
        {
            "type": "string",
            "name": "$option_group",
            "description": "Setting group."
        },
        {
            "type": "string",
            "name": "$option_name",
            "description": "Setting name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1997,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "update_option",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately before an option value is updated.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the option to update."
        },
        {
            "type": "mixed",
            "name": "$old_value",
            "description": "The old option value."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "The new option value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 359,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "updated_option",
    "type": "action",
    "params_count": 3,
    "description": "Fires after the value of an option has been successfully updated.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the updated option."
        },
        {
            "type": "mixed",
            "name": "$old_value",
            "description": "The old option value."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "The new option value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 412,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "add_option",
    "type": "action",
    "params_count": 2,
    "description": "Fires before an option is added.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the option to add."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Value of the option."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 474,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "added_option",
    "type": "action",
    "params_count": 2,
    "description": "Fires after an option has been added.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the added option."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Value of the option."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 518,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "delete_option",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before an option is deleted.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the option to delete."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 553,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "deleted_option",
    "type": "action",
    "params_count": 1,
    "description": "Fires after an option has been deleted.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the deleted option."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 587,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "deleted_transient",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a transient is deleted.",
    "params": [
        {
            "type": "string",
            "name": "$transient",
            "description": "Deleted transient name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 633,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "setted_transient",
    "type": "action",
    "params_count": 3,
    "description": "Fires after the value for a transient has been set.",
    "params": [
        {
            "type": "string",
            "name": "$transient",
            "description": "The name of the transient."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Transient value."
        },
        {
            "type": "int",
            "name": "$expiration",
            "description": "Time until expiration in seconds."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 814,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "add_site_option",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a network option has been successfully added.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the network option."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Value of the network option."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "ID of the network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1396,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "delete_site_option",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a network option has been deleted.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the network option."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "ID of the network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1483,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "update_site_option",
    "type": "action",
    "params_count": 4,
    "description": "Fires after the value of a network option has been successfully updated.",
    "params": [
        {
            "type": "string",
            "name": "$option",
            "description": "Name of the network option."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Current value of the network option."
        },
        {
            "type": "mixed",
            "name": "$old_value",
            "description": "Old value of the network option."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "ID of the network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1598,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "deleted_site_transient",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a transient is deleted.",
    "params": [
        {
            "type": "string",
            "name": "$transient",
            "description": "Deleted transient name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1645,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "setted_site_transient",
    "type": "action",
    "params_count": 3,
    "description": "Fires after the value for a site transient has been set.",
    "params": [
        {
            "type": "string",
            "name": "$transient",
            "description": "The name of the site transient."
        },
        {
            "type": "mixed",
            "name": "$value",
            "description": "Site transient value."
        },
        {
            "type": "int",
            "name": "$expiration",
            "description": "Time until expiration in seconds."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1807,
        "name": "wp-includes\/option.php"
    }
},
{
    "text": "post_thumbnail_size",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post thumbnail size.",
    "params": [
        {
            "type": "string|array",
            "name": "$size",
            "description": "The post thumbnail size. Image size or array of width and height"
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 131,
        "name": "wp-includes\/post-thumbnail-template.php"
    }
},
{
    "text": "post_thumbnail_html",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the post thumbnail HTML.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "The post thumbnail HTML."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        },
        {
            "type": "string",
            "name": "$post_thumbnail_id",
            "description": "The post thumbnail ID."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "The post thumbnail size. Image size or array of width and height"
        },
        {
            "type": "string",
            "name": "$attr",
            "description": "Query string of attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 179,
        "name": "wp-includes\/post-thumbnail-template.php"
    }
},
{
    "text": "the_post_thumbnail_caption",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the displayed post thumbnail caption.",
    "params": [
        {
            "type": "string",
            "name": "$caption",
            "description": "Caption for the given attachment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 254,
        "name": "wp-includes\/post-thumbnail-template.php"
    }
},
{
    "text": "begin_fetch_post_thumbnail_html",
    "type": "action",
    "params_count": 3,
    "description": "Fires before fetching the post thumbnail HTML.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        },
        {
            "type": "string",
            "name": "$post_thumbnail_id",
            "description": "The post thumbnail ID."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "The post thumbnail size. Image size or array of width"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 147,
        "name": "wp-includes\/post-thumbnail-template.php"
    }
},
{
    "text": "end_fetch_post_thumbnail_html",
    "type": "action",
    "params_count": 3,
    "description": "Fires after fetching the post thumbnail HTML.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        },
        {
            "type": "string",
            "name": "$post_thumbnail_id",
            "description": "The post thumbnail ID."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "The post thumbnail size. Image size or array of width"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 162,
        "name": "wp-includes\/post-thumbnail-template.php"
    }
},
{
    "text": "category_description",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the category description for display.",
    "params": [
        {
            "type": "string",
            "name": "$description",
            "description": "Category description."
        },
        {
            "type": "object",
            "name": "$category",
            "description": "Category object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 116,
        "name": "wp-includes\/class-walker-category.php"
    }
},
{
    "text": "category_css_class",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the list of CSS classes to include with each category in the list.",
    "params": [
        {
            "type": "array",
            "name": "$css_classes",
            "description": "An array of CSS classes to be applied to each list item."
        },
        {
            "type": "object",
            "name": "$category",
            "description": "Category data object."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of page, used for padding."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of wp_list_categories() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 198,
        "name": "wp-includes\/class-walker-category.php"
    }
},
{
    "text": "rss2_comments_ns",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the RSS root to add namespaces.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 31,
        "name": "wp-includes\/feed-rss2-comments.php"
    }
},
{
    "text": "commentsrss2_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the RSS2 comment feed header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 68,
        "name": "wp-includes\/feed-rss2-comments.php"
    }
},
{
    "text": "commentrss2_item",
    "type": "action",
    "params_count": 2,
    "description": "Fires at the end of each RSS2 comment feed item.",
    "params": [
        {
            "type": "int",
            "name": "$comment->comment_ID",
            "description": "The ID of the comment being displayed."
        },
        {
            "type": "int",
            "name": "$comment_post->ID",
            "description": "The ID of the post the comment is connected to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 105,
        "name": "wp-includes\/feed-rss2-comments.php"
    }
},
{
    "text": "map_meta_cap",
    "type": "filter",
    "params_count": 4,
    "description": "Filters a user's capabilities depending on specific context and\/or privilege.",
    "params": [
        {
            "type": "array",
            "name": "$caps",
            "description": "Returns the user's actual capabilities."
        },
        {
            "type": "string",
            "name": "$cap",
            "description": "Capability name."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Adds the context to the cap. Typically the object ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 572,
        "name": "wp-includes\/capabilities.php"
    }
},
{
    "text": "grant_super_admin",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the user is granted Super Admin privileges.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the user that is about to be granted Super Admin privileges."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 817,
        "name": "wp-includes\/capabilities.php"
    }
},
{
    "text": "granted_super_admin",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the user is granted Super Admin privileges.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the user that was granted Super Admin privileges."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 834,
        "name": "wp-includes\/capabilities.php"
    }
},
{
    "text": "revoke_super_admin",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the user's Super Admin privileges are revoked.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the user Super Admin privileges are being revoked from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 864,
        "name": "wp-includes\/capabilities.php"
    }
},
{
    "text": "revoked_super_admin",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the user's Super Admin privileges are revoked.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the user Super Admin privileges were revoked from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 882,
        "name": "wp-includes\/capabilities.php"
    }
},
{
    "text": "editor_max_image_size",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the maximum image size dimensions for the editor.",
    "params": [
        {
            "type": "array",
            "name": "$max_image_size",
            "description": "An array with the width as the first element,"
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Size of what the result image should be."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The context the image is being resized for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 129,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "get_image_tag_class",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the value of the attachment's image tag class attribute.",
    "params": [
        {
            "type": "string",
            "name": "$class",
            "description": "CSS class name or space-separated list of classes."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "Attachment ID."
        },
        {
            "type": "string",
            "name": "$align",
            "description": "Part of the class name for aligning the image."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Size of image. Image size or array of width and height values (in that order)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 380,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "get_image_tag",
    "type": "filter",
    "params_count": 6,
    "description": "Filters the HTML content for the image tag.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "HTML content for the image."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "Attachment ID."
        },
        {
            "type": "string",
            "name": "$alt",
            "description": "Alternate text."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "Attachment title."
        },
        {
            "type": "string",
            "name": "$align",
            "description": "Part of the class name for aligning the image."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Size of image. Image size or array of width and height values (in that order)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 397,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_constrain_dimensions",
    "type": "filter",
    "params_count": 6,
    "description": "Filters dimensions to constrain down-sampled images to.",
    "params": [
        {
            "type": "array",
            "name": "$dimensions",
            "description": "The image width and height."
        },
        {
            "type": "int",
            "name": "$current_width",
            "description": "The current width of the image."
        },
        {
            "type": "int",
            "name": "$current_height",
            "description": "The current height of the image."
        },
        {
            "type": "int",
            "name": "$max_width",
            "description": "The maximum width permitted."
        },
        {
            "type": "int",
            "name": "$max_height",
            "description": "The maximum height permitted."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 472,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "image_resize_dimensions",
    "type": "filter",
    "params_count": 6,
    "description": "Filters whether to preempt calculating the image resize dimensions.",
    "params": [
        {
            "type": "null|mixed",
            "name": "$null",
            "description": "Whether to preempt output of the resize dimensions."
        },
        {
            "type": "int",
            "name": "$orig_w",
            "description": "Original width in pixels."
        },
        {
            "type": "int",
            "name": "$orig_h",
            "description": "Original height in pixels."
        },
        {
            "type": "int",
            "name": "$dest_w",
            "description": "New width in pixels."
        },
        {
            "type": "int",
            "name": "$dest_h",
            "description": "New height in pixels."
        },
        {
            "type": "bool|array",
            "name": "$crop",
            "description": "Whether to crop image to specified width and height or resize."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 523,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "image_get_intermediate_size",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the output of image_get_intermediate_size()",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "Array of file relative path, width, and height on success. May also include"
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post_id of the image attachment"
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Registered image size or flat array of initially-requested height and width"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 776,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "intermediate_image_sizes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of intermediate image sizes.",
    "params": [
        {
            "type": "array",
            "name": "$image_sizes",
            "description": "An array of intermediate image sizes. Defaults"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 801,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_get_attachment_image_src",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the image src result.",
    "params": [
        {
            "type": "array|false",
            "name": "$image",
            "description": "Either array with src, width & height, icon src, or false."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Image attachment ID."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Size of image. Image size or array of width and height values"
        },
        {
            "type": "bool",
            "name": "$icon",
            "description": "Whether the image should be treated as an icon. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 851,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_get_attachment_image_attributes",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of attachment image attributes.",
    "params": [
        {
            "type": "array",
            "name": "$attr",
            "description": "Attributes for the image markup."
        },
        {
            "type": "WP_Post",
            "name": "$attachment",
            "description": "Image attachment post."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Requested size. Image size or array of width and height values"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 919,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_calculate_image_srcset_meta",
    "type": "filter",
    "params_count": 4,
    "description": "Let plugins pre-filter the image meta to be able to fix inconsistencies in the stored data.",
    "params": [
        {
            "type": "array",
            "name": "$image_meta",
            "description": "The image meta data as returned by 'wp_get_attachment_metadata()'."
        },
        {
            "type": "array",
            "name": "$size_array",
            "description": "Array of width and height values in pixels (in that order)."
        },
        {
            "type": "string",
            "name": "$image_src",
            "description": "The 'src' of the image."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "The image attachment ID or 0 if not supplied."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1055,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "max_srcset_image_width",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the maximum image width to be included in a 'srcset' attribute.",
    "params": [
        {
            "type": "int",
            "name": "$max_width",
            "description": "The maximum image width to be included in the 'srcset'. Default '1600'."
        },
        {
            "type": "array",
            "name": "$size_array",
            "description": "Array of width and height values in pixels (in that order)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1122,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_calculate_image_srcset",
    "type": "filter",
    "params_count": 5,
    "description": "Filters an image's 'srcset' sources.",
    "params": [
        {
            "type": "array",
            "name": "$sources",
            "description": "{"
        },
        {
            "type": "array",
            "name": "$size_array",
            "description": "Array of width and height values in pixels (in that order)."
        },
        {
            "type": "string",
            "name": "$image_src",
            "description": "The 'src' of the image."
        },
        {
            "type": "array",
            "name": "$image_meta",
            "description": "The image meta data as returned by 'wp_get_attachment_metadata()'."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Image attachment ID or 0."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1203,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_calculate_image_sizes",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the output of 'wp_calculate_image_sizes()'.",
    "params": [
        {
            "type": "string",
            "name": "$sizes",
            "description": "A source size value for use in a 'sizes' attribute."
        },
        {
            "type": "array|string",
            "name": "$size",
            "description": "Requested size. Image size or array of width and height values"
        },
        {
            "type": "string|null",
            "name": "$image_src",
            "description": "The URL to the image file or null."
        },
        {
            "type": "array|null",
            "name": "$image_meta",
            "description": "The image meta data as returned by wp_get_attachment_metadata() or null."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Image attachment ID of the original image or 0."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1302,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "img_caption_shortcode",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the default caption shortcode output.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The caption output. Default empty."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "Attributes of the caption shortcode."
        },
        {
            "type": "string",
            "name": "$content",
            "description": "The image element, possibly wrapped in a hyperlink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1537,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "img_caption_shortcode_width",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the width of an image's caption.",
    "params": [
        {
            "type": "int",
            "name": "$width",
            "description": "Width of the caption in pixels. To remove this inline style,"
        },
        {
            "type": "array",
            "name": "$atts",
            "description": "Attributes of the caption shortcode."
        },
        {
            "type": "string",
            "name": "$content",
            "description": "The image element, possibly wrapped in a hyperlink."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1577,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "post_gallery",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the default gallery shortcode output.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The gallery output. Default empty."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "Attributes of the gallery shortcode."
        },
        {
            "type": "int",
            "name": "$instance",
            "description": "Unique numeric ID of this gallery shortcode instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1660,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "gallery_style",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default gallery shortcode CSS styles.",
    "params": [
        {
            "type": "string",
            "name": "$gallery_style",
            "description": "Default CSS styles and opening HTML div container"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1771,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "post_playlist",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the playlist output.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "Playlist output. Default empty."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "An array of shortcode attributes."
        },
        {
            "type": "int",
            "name": "$instance",
            "description": "Unique numeric ID of this playlist shortcode instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1944,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_mediaelement_fallback",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the Mediaelement fallback output for no-JS.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "Fallback output for no-JS."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "Media file URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2143,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_audio_extensions",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the list of supported audio formats.",
    "params": [
        {
            "type": "array",
            "name": "$extensions",
            "description": "An array of support audio formats. Defaults are"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2162,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_get_attachment_id3_keys",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the editable list of keys to look up data from an attachment's metadata.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "Key\/value pairs of field keys to labels."
        },
        {
            "type": "WP_Post",
            "name": "$attachment",
            "description": "Attachment object."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The context. Accepts 'edit', 'display'. Default 'display'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2198,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_audio_shortcode_override",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the default audio shortcode output.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "Empty variable to be replaced with shortcode markup."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "Attributes of the shortcode. @see wp_audio_shortcode()"
        },
        {
            "type": "string",
            "name": "$content",
            "description": "Shortcode content."
        },
        {
            "type": "int",
            "name": "$instance",
            "description": "Unique numeric ID of this audio shortcode instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2241,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_audio_shortcode_library",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the media library used for the audio shortcode.",
    "params": [
        {
            "type": "string",
            "name": "$library",
            "description": "Media library used for the audio shortcode."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2304,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_audio_shortcode_class",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the class attribute for the audio shortcode output container.",
    "params": [
        {
            "type": "string",
            "name": "$class",
            "description": "CSS class or list of space-separated classes."
        },
        {
            "type": "array",
            "name": "$atts",
            "description": "Array of audio shortcode attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2319,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_audio_shortcode",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the audio shortcode output.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "Audio shortcode HTML output."
        },
        {
            "type": "array",
            "name": "$atts",
            "description": "Array of audio shortcode attributes."
        },
        {
            "type": "string",
            "name": "$audio",
            "description": "Audio file."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$library",
            "description": "Media library used for the audio shortcode."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2377,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_video_extensions",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the list of supported video formats.",
    "params": [
        {
            "type": "array",
            "name": "$extensions",
            "description": "An array of support video formats. Defaults are"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2397,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_video_shortcode_override",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the default video shortcode output.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "Empty variable to be replaced with shortcode markup."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "Attributes of the shortcode. @see wp_video_shortcode()"
        },
        {
            "type": "string",
            "name": "$content",
            "description": "Video shortcode content."
        },
        {
            "type": "int",
            "name": "$instance",
            "description": "Unique numeric ID of this video shortcode instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2450,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_video_shortcode_library",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the media library used for the video shortcode.",
    "params": [
        {
            "type": "string",
            "name": "$library",
            "description": "Media library used for the video shortcode."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2543,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_video_shortcode_class",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the class attribute for the video shortcode output container.",
    "params": [
        {
            "type": "string",
            "name": "$class",
            "description": "CSS class or list of space-separated classes."
        },
        {
            "type": "array",
            "name": "$atts",
            "description": "Array of video shortcode attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2577,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_video_shortcode",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the output of the video shortcode.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "Video shortcode HTML output."
        },
        {
            "type": "array",
            "name": "$atts",
            "description": "Array of video shortcode attributes."
        },
        {
            "type": "string",
            "name": "$video",
            "description": "Video file."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$library",
            "description": "Media library used for the video shortcode."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2656,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "upload_size_limit",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the maximum upload size allowed in php.ini.",
    "params": [
        {
            "type": "int",
            "name": "$size",
            "description": "Max upload size limit in bytes."
        },
        {
            "type": "int",
            "name": "$u_bytes",
            "description": "Maximum upload filesize in bytes."
        },
        {
            "type": "int",
            "name": "$p_bytes",
            "description": "Maximum size of POST data in bytes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2886,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_image_editors",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of image editing library classes.",
    "params": [
        {
            "type": "array",
            "name": "$image_editors",
            "description": "List of available image editors. Defaults are"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2962,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "plupload_default_settings",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the Plupload default settings.",
    "params": [
        {
            "type": "array",
            "name": "$defaults",
            "description": "Default Plupload settings array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3033,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "plupload_default_params",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the Plupload default parameters.",
    "params": [
        {
            "type": "array",
            "name": "$params",
            "description": "Default Plupload parameters array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3046,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_prepare_attachment_for_js",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the attachment data prepared for JavaScript.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "Array of prepared attachment data."
        },
        {
            "type": "int|object",
            "name": "$attachment",
            "description": "Attachment ID or object."
        },
        {
            "type": "array",
            "name": "$meta",
            "description": "Array of attachment meta data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3290,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "media_library_show_audio_playlist",
    "type": "filter",
    "params_count": 1,
    "description": "Allows showing or hiding the \"Create Audio Playlist\" button in the media library.",
    "params": [
        {
            "type": "bool|null Whether to show the button, or `null` to decide based",
            "name": "$bool|null",
            "description": "Whether to show the button, or `null` to decide based"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3370,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "media_library_show_video_playlist",
    "type": "filter",
    "params_count": 1,
    "description": "Allows showing or hiding the \"Create Video Playlist\" button in the media library.",
    "params": [
        {
            "type": "bool|null Whether to show the button, or `null` to decide based",
            "name": "$bool|null",
            "description": "Whether to show the button, or `null` to decide based"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3398,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "media_library_months_with_files",
    "type": "filter",
    "params_count": 1,
    "description": "Allows overriding the list of months displayed in the media library.",
    "params": [
        {
            "type": "array|null An array of objects with `month` and `year`",
            "name": "$array|null",
            "description": "An array of objects with `month` and `year`"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3425,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "media_view_settings",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media view settings.",
    "params": [
        {
            "type": "array",
            "name": "$settings",
            "description": "List of media view settings."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3625,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "media_view_strings",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media view strings.",
    "params": [
        {
            "type": "array",
            "name": "$strings",
            "description": "List of media view strings."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3635,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "get_attached_media_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filters arguments used to retrieve media attached to the given post.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Post query arguments."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Mime type of the desired media."
        },
        {
            "type": "mixed",
            "name": "$post",
            "description": "Post ID or object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3697,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "get_attached_media",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of media attached to the given post.",
    "params": [
        {
            "type": "array",
            "name": "$children",
            "description": "Associative array of media attached to the given post."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Mime type of the media desired."
        },
        {
            "type": "mixed",
            "name": "$post",
            "description": "Post ID or object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3710,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "media_embedded_in_content_allowed_types",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the embedded media types that are allowed to be returned from the content blob.",
    "params": [
        {
            "type": "array",
            "name": "$allowed_media_types",
            "description": "An array of allowed media types. Default media types are"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3733,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "get_post_galleries",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of all found galleries in the given post.",
    "params": [
        {
            "type": "array",
            "name": "$galleries",
            "description": "Associative array of all found post galleries."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3817,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "get_post_gallery",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the first-found post gallery.",
    "params": [
        {
            "type": "array",
            "name": "$gallery",
            "description": "The first-found post gallery."
        },
        {
            "type": "int|WP_Post",
            "name": "$post",
            "description": "Post ID or object."
        },
        {
            "type": "array",
            "name": "$galleries",
            "description": "Associative array of all found post galleries."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3842,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "attachment_url_to_postid",
    "type": "filter",
    "params_count": 2,
    "description": "Filters an attachment id found by URL.",
    "params": [
        {
            "type": "int|null",
            "name": "$post_id",
            "description": "The post_id (if any) found by the function."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The URL being looked up."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3943,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_playlist_scripts",
    "type": "action",
    "params_count": 2,
    "description": "Prints and enqueues playlist scripts, styles, and JavaScript templates.",
    "params": [
        {
            "type": "string",
            "name": "$type",
            "description": "Type of playlist. Possible values are 'audio' or 'video'."
        },
        {
            "type": "string",
            "name": "$style",
            "description": "The 'theme' for the playlist. Core provides 'light' and 'dark'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2099,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "wp_enqueue_media",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the conclusion of wp_enqueue_media().",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 3663,
        "name": "wp-includes\/media.php"
    }
},
{
    "text": "site_details",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a site's extended properties.",
    "params": [
        {
            "type": "stdClass",
            "name": "$details",
            "description": "The site details."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 343,
        "name": "wp-includes\/class-wp-site.php"
    }
},
{
    "text": "page_css_class",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the list of CSS classes to include with each page item in the list.",
    "params": [
        {
            "type": "array",
            "name": "$css_class",
            "description": "An array of CSS classes to be applied"
        },
        {
            "type": "WP_Post",
            "name": "$page",
            "description": "Page data object."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of page, used for padding."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        },
        {
            "type": "int",
            "name": "$current_page",
            "description": "ID of the current page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 148,
        "name": "wp-includes\/class-walker-page.php"
    }
},
{
    "text": "page_menu_link_attributes",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the HTML attributes applied to a page menu item's anchor element.",
    "params": [
        {
            "type": "array",
            "name": "$atts",
            "description": "{"
        },
        {
            "type": "WP_Post",
            "name": "$page",
            "description": "Page data object."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of page, used for padding."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        },
        {
            "type": "int",
            "name": "$current_page",
            "description": "ID of the current page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 176,
        "name": "wp-includes\/class-walker-page.php"
    }
},
{
    "text": "xmlrpc_methods",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the methods exposed by the XML-RPC server.",
    "params": [
        {
            "type": "array",
            "name": "$methods",
            "description": "An array of XML-RPC methods."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 166,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "pre_option_enable_xmlrpc",
    "type": "filter",
    "params_count": 1,
    "description": "Log user in.",
    "params": [
        {
            "type": "string",
            "name": "$username",
            "description": "User's username."
        },
        {
            "type": "string",
            "name": "$password",
            "description": "User's password."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 238,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "option_enable_xmlrpc",
    "type": "filter",
    "params_count": 1,
    "description": "Log user in.",
    "params": [
        {
            "type": "string",
            "name": "$username",
            "description": "User's username."
        },
        {
            "type": "string",
            "name": "$password",
            "description": "User's password."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 240,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_enabled",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether XML-RPC methods requiring authentication are enabled.",
    "params": [
        {
            "type": "bool",
            "name": "$enabled",
            "description": "Whether XML-RPC is enabled. Default true."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 265,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_login_error",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the XML-RPC user login error message.",
    "params": [
        {
            "type": "string",
            "name": "$error",
            "description": "The XML-RPC error message."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 292,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_blog_options",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the XML-RPC blog options property.",
    "params": [
        {
            "type": "array",
            "name": "$blog_options",
            "description": "An array of XML-RPC blog options."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 628,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_taxonomy",
    "type": "filter",
    "params_count": 3,
    "description": "Filters XML-RPC-prepared data for the given taxonomy.",
    "params": [
        {
            "type": "array",
            "name": "$_taxonomy",
            "description": "An array of taxonomy data."
        },
        {
            "type": "WP_Taxonomy",
            "name": "$taxonomy",
            "description": "Taxonomy object."
        },
        {
            "type": "array",
            "name": "$fields",
            "description": "The subset of taxonomy fields to return."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 774,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_term",
    "type": "filter",
    "params_count": 2,
    "description": "Filters XML-RPC-prepared data for the given term.",
    "params": [
        {
            "type": "array",
            "name": "$_term",
            "description": "An array of term data."
        },
        {
            "type": "array|object",
            "name": "$term",
            "description": "Term object or array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 809,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_post",
    "type": "filter",
    "params_count": 3,
    "description": "Filters XML-RPC-prepared date for the given post.",
    "params": [
        {
            "type": "array",
            "name": "$_post",
            "description": "An array of modified post data."
        },
        {
            "type": "array",
            "name": "$post",
            "description": "An array of post data."
        },
        {
            "type": "array",
            "name": "$fields",
            "description": "An array of post fields."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 936,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_post_type",
    "type": "filter",
    "params_count": 2,
    "description": "Filters XML-RPC-prepared date for the given post type.",
    "params": [
        {
            "type": "array",
            "name": "$_post_type",
            "description": "An array of post type data."
        },
        {
            "type": "WP_Post_Type",
            "name": "$post_type",
            "description": "Post type object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 988,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_media_item",
    "type": "filter",
    "params_count": 3,
    "description": "Filters XML-RPC-prepared data for the given media item.",
    "params": [
        {
            "type": "array",
            "name": "$_media_item",
            "description": "An array of media item data."
        },
        {
            "type": "object",
            "name": "$media_item",
            "description": "Media item object."
        },
        {
            "type": "string",
            "name": "$thumbnail_size",
            "description": "Image size."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1027,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_page",
    "type": "filter",
    "params_count": 2,
    "description": "Filters XML-RPC-prepared data for the given page.",
    "params": [
        {
            "type": "array",
            "name": "$_page",
            "description": "An array of page data."
        },
        {
            "type": "WP_Post",
            "name": "$page",
            "description": "Page object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1107,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_comment",
    "type": "filter",
    "params_count": 2,
    "description": "Filters XML-RPC-prepared data for the given comment.",
    "params": [
        {
            "type": "array",
            "name": "$_comment",
            "description": "An array of prepared comment data."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "Comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1155,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_prepare_user",
    "type": "filter",
    "params_count": 3,
    "description": "Filters XML-RPC-prepared data for the given user.",
    "params": [
        {
            "type": "array",
            "name": "$_user",
            "description": "An array of user data."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object."
        },
        {
            "type": "array",
            "name": "$fields",
            "description": "An array of user fields."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1203,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_wp_insert_post_data",
    "type": "filter",
    "params_count": 2,
    "description": "Filters post data array to be inserted via XML-RPC.",
    "params": [
        {
            "type": "array",
            "name": "$post_data",
            "description": "Parsed array of post data."
        },
        {
            "type": "array",
            "name": "$content_struct",
            "description": "Post data array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1588,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_default_post_fields",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the list of post query fields used by the given XML-RPC method.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "Array of post fields. Default array contains 'post', 'terms', and 'custom_fields'."
        },
        {
            "type": "string",
            "name": "$method",
            "description": "Method name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1791,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_default_taxonomy_fields",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the taxonomy query fields used by the given XML-RPC method.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "An array of taxonomy fields to retrieve."
        },
        {
            "type": "string",
            "name": "$method",
            "description": "The method name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2355,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_default_user_fields",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default user query fields used by the given XML-RPC method.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "User query fields for given method. Default 'all'."
        },
        {
            "type": "string",
            "name": "$method",
            "description": "The method name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2490,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_allow_anonymous_comments",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to allow anonymous comments over XML-RPC.",
    "params": [
        {
            "type": "bool",
            "name": "$allow",
            "description": "Whether to allow anonymous commenting via XML-RPC."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3605,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_default_posttype_fields",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the default query fields used by the given XML-RPC method.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "An array of post type query fields for the given method."
        },
        {
            "type": "string",
            "name": "$method",
            "description": "The method name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4186,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_default_revision_fields",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the default revision query fields used by the given XML-RPC method.",
    "params": [
        {
            "type": "array",
            "name": "$field",
            "description": "An array of revision query fields."
        },
        {
            "type": "string",
            "name": "$method",
            "description": "The method name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4304,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_text_filters",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the MoveableType text filters list for XML-RPC.",
    "params": [
        {
            "type": "array",
            "name": "$filters",
            "description": "An array of text filters."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6197,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "pingback_ping_source_uri",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the pingback source URI.",
    "params": [
        {
            "type": "string",
            "name": "$pagelinkedfrom",
            "description": "URI of the page linked from."
        },
        {
            "type": "string",
            "name": "$pagelinkedto",
            "description": "URI of the page linked to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6323,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "pre_remote_source",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the pingback remote source.",
    "params": [
        {
            "type": "string",
            "name": "$remote_source",
            "description": "Response source for the page linked from."
        },
        {
            "type": "string",
            "name": "$pagelinkedto",
            "description": "URL of the page linked to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6420,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_pingback_error",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the XML-RPC pingback error return.",
    "params": [
        {
            "type": "IXR_Error",
            "name": "$error",
            "description": "An IXR_Error object containing the error code and message."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6571,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the XML-RPC user has been authenticated but before the rest of",
    "params": [
        {
            "type": "string",
            "name": "$name",
            "description": "The method name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 680,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_wp_deletePage",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a page has been successfully deleted via XML-RPC.",
    "params": [
        {
            "type": "int",
            "name": "$page_id",
            "description": "ID of the deleted page."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to delete the page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2897,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_wp_newCategory",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a new category has been successfully created via XML-RPC.",
    "params": [
        {
            "type": "int",
            "name": "$cat_id",
            "description": "ID of the new category."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of new category arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3183,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_wp_deleteCategory",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a category has been successfully deleted via XML-RPC.",
    "params": [
        {
            "type": "int",
            "name": "$category_id",
            "description": "ID of the deleted category."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to delete the category."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3231,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_wp_deleteComment",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a comment has been successfully deleted via XML-RPC.",
    "params": [
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "ID of the deleted comment."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to delete the comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3465,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_wp_editComment",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a comment has been successfully updated via XML-RPC.",
    "params": [
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "ID of the updated comment."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to update the comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3568,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_wp_newComment",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a new comment has been successfully created via XML-RPC.",
    "params": [
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "ID of the new comment."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of new comment arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3700,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_blogger_newPost",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a new post has been successfully created via the XML-RPC Blogger API.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "ID of the new post."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of new post arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4739,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_blogger_editPost",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a post has been successfully updated via the XML-RPC Blogger API.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "ID of the updated post."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments for the post to edit."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4817,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_blogger_deletePost",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a post has been successfully deleted via the XML-RPC Blogger API.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "ID of the deleted post."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to delete the post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4874,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_mw_newPost",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a new post has been successfully created via the XML-RPC MovableType API.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "ID of the new post."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to create the new post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5196,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_mw_editPost",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a post has been successfully updated via the XML-RPC MovableType API.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "ID of the updated post."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to update the post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5553,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "xmlrpc_call_success_mw_newMediaObject",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a new attachment has been added via the XML-RPC MovableType API.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "ID of the new attachment."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to add the attachment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 5953,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "pingback_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a post pingback has been sent.",
    "params": [
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 6501,
        "name": "wp-includes\/class-wp-xmlrpc-server.php"
    }
},
{
    "text": "url_to_postid",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the URL to derive the post ID from.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The URL to derive the post ID from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 472,
        "name": "wp-includes\/rewrite.php"
    }
},
{
    "text": "wp_editor_set_quality",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default image compression quality setting.",
    "params": [
        {
            "type": "int",
            "name": "$quality",
            "description": "Quality level between 1 (low) and 100 (high)."
        },
        {
            "type": "string",
            "name": "$mime_type",
            "description": "Image mime type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 238,
        "name": "wp-includes\/class-wp-image-editor.php"
    }
},
{
    "text": "jpeg_quality",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the JPEG compression quality for backward-compatibility.",
    "params": [
        {
            "type": "int",
            "name": "$quality",
            "description": "Quality level between 0 (low) and 100 (high) of the JPEG."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Context of the filter."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 257,
        "name": "wp-includes\/class-wp-image-editor.php"
    }
},
{
    "text": "image_editor_default_mime_type",
    "type": "filter",
    "params_count": 1,
    "description": "Filters default mime type prior to getting the file extension.",
    "params": [
        {
            "type": "string",
            "name": "$mime_type",
            "description": "Mime type string."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 329,
        "name": "wp-includes\/class-wp-image-editor.php"
    }
},
{
    "text": "post_format_rewrite_base",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post formats rewrite base.",
    "params": [
        {
            "type": "string",
            "name": "$context",
            "description": "Context of the rewrite base. Default 'type'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 38,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "get_term",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a term.",
    "params": [
        {
            "type": "int|WP_Term",
            "name": "$_term",
            "description": "Term object or ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 783,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "get_terms",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the found terms.",
    "params": [
        {
            "type": "array",
            "name": "$terms",
            "description": "Array of found terms."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of taxonomies."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of get_terms() arguments."
        },
        {
            "type": "WP_Term_Query",
            "name": "$term_query",
            "description": "The WP_Term_Query object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1121,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "pre_category_nicename",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the category nicename before it is sanitized.",
    "params": [
        {
            "type": "string",
            "name": "$value",
            "description": "The category nicename."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1550,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "wp_get_object_terms_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filter arguments for retrieving object terms.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments for retrieving terms for the given object(s)."
        },
        {
            "type": "int|array",
            "name": "$object_ids",
            "description": "Object ID or array of IDs."
        },
        {
            "type": "string|array",
            "name": "$taxonomies",
            "description": "The taxonomies to retrieve terms from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1920,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "get_object_terms",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the terms for a given object or objects.",
    "params": [
        {
            "type": "array",
            "name": "$terms",
            "description": "An array of terms for the given object or objects."
        },
        {
            "type": "array",
            "name": "$object_ids",
            "description": "Array of object IDs for which `$terms` were retrieved."
        },
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "Array of taxonomies from which `$terms` were retrieved."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments for retrieving terms for the given"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1968,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "wp_get_object_terms",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the terms for a given object or objects.",
    "params": [
        {
            "type": "array",
            "name": "$terms",
            "description": "An array of terms for the given object or objects."
        },
        {
            "type": "int|array",
            "name": "$object_ids",
            "description": "Object ID or array of IDs."
        },
        {
            "type": "string",
            "name": "$taxonomies",
            "description": "SQL-formatted (comma-separated and quoted) list of taxonomy names."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments for retrieving terms for the given object(s)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1987,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "pre_insert_term",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a term before it is sanitized and inserted into the database.",
    "params": [
        {
            "type": "string",
            "name": "$term",
            "description": "The term to add or update."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2047,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "wp_insert_term_data",
    "type": "filter",
    "params_count": 3,
    "description": "Filters term data before it is inserted into the database.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "Term data to be inserted."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to wp_insert_term()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2162,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "term_id_filter",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the term ID after a new term is created.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Taxonomy term ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2240,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "wp_unique_term_slug",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the unique term slug.",
    "params": [
        {
            "type": "string",
            "name": "$slug",
            "description": "Unique term slug."
        },
        {
            "type": "object",
            "name": "$term",
            "description": "Term object."
        },
        {
            "type": "string",
            "name": "$original_slug",
            "description": "Slug originally passed to the function for testing."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2607,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "wp_update_term_parent",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the term parent.",
    "params": [
        {
            "type": "int",
            "name": "$parent",
            "description": "ID of the parent term."
        },
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        },
        {
            "type": "array",
            "name": "$parsed_args",
            "description": "An array of potentially altered update arguments for the given term."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of update arguments for the given term."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2732,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "wp_update_term_data",
    "type": "filter",
    "params_count": 4,
    "description": "Filters term data before it is updated in the database.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "Term data to be updated."
        },
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to wp_update_term()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2777,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "term_id_filter",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the term ID after a new term is created.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Taxonomy term ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2240,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "pre_term_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the permalink structure for a terms before token replacement occurs.",
    "params": [
        {
            "type": "string",
            "name": "$termlink",
            "description": "The permalink structure for the term's taxonomy."
        },
        {
            "type": "WP_Term",
            "name": "$term",
            "description": "The term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3975,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "tag_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the tag link.",
    "params": [
        {
            "type": "string",
            "name": "$termlink",
            "description": "Tag link URL."
        },
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4016,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "category_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the category link.",
    "params": [
        {
            "type": "string",
            "name": "$termlink",
            "description": "Category link URL."
        },
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4028,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "term_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the term link.",
    "params": [
        {
            "type": "string",
            "name": "$termlink",
            "description": "Term link URL."
        },
        {
            "type": "object",
            "name": "$term",
            "description": "Term object."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4040,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "registered_taxonomy",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a taxonomy is registered.",
    "params": [
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        },
        {
            "type": "array|string",
            "name": "$object_type",
            "description": "Object type or array of object types."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Array of taxonomy registration arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 402,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "unregistered_taxonomy",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a taxonomy is unregistered.",
    "params": [
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 445,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "pre_delete_term",
    "type": "action",
    "params_count": 2,
    "description": "Fires when deleting a term, before any modifications are made to posts or terms.",
    "params": [
        {
            "type": "int",
            "name": "$term",
            "description": "Term ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy Name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1738,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "edit_term_taxonomies",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before a term to delete's children are reassigned a parent.",
    "params": [
        {
            "type": "array",
            "name": "$edit_tt_ids",
            "description": "An array of term taxonomy IDs for the given term."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1757,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "edited_term_taxonomies",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a term to delete's children are reassigned a parent.",
    "params": [
        {
            "type": "array",
            "name": "$edit_tt_ids",
            "description": "An array of term taxonomy IDs for the given term."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1772,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "delete_term_taxonomy",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before a term taxonomy ID is deleted.",
    "params": [
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1810,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "deleted_term_taxonomy",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a term taxonomy ID is deleted.",
    "params": [
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1820,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "delete_term",
    "type": "action",
    "params_count": 5,
    "description": "Fires after a term is deleted from the database and the cache is cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$term",
            "description": "Term ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        },
        {
            "type": "mixed",
            "name": "$deleted_term",
            "description": "Copy of the already-deleted term, in the form specified"
        },
        {
            "type": "array",
            "name": "$object_ids",
            "description": "List of term object IDs."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1841,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "create_term",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a new term is created, before the term cache is cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2217,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "created_term",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a new term is created, and after the term cache has been cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2253,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "add_term_relationship",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately before an object-term relationship is added.",
    "params": [
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2344,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "added_term_relationship",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after an object-term relationship is added.",
    "params": [
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2357,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "set_object_terms",
    "type": "action",
    "params_count": 6,
    "description": "Fires after an object's terms have been set.",
    "params": [
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "array",
            "name": "$terms",
            "description": "An array of object terms."
        },
        {
            "type": "array",
            "name": "$tt_ids",
            "description": "An array of term taxonomy IDs."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        },
        {
            "type": "bool",
            "name": "$append",
            "description": "Whether to append new terms to the old terms."
        },
        {
            "type": "array",
            "name": "$old_tt_ids",
            "description": "Old array of term taxonomy IDs."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2407,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "delete_term_relationships",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately before an object-term relationship is deleted.",
    "params": [
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "array",
            "name": "$tt_ids",
            "description": "An array of term taxonomy IDs."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2484,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "deleted_term_relationships",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after an object-term relationship is deleted.",
    "params": [
        {
            "type": "int",
            "name": "$object_id",
            "description": "Object ID."
        },
        {
            "type": "array",
            "name": "$tt_ids",
            "description": "An array of term taxonomy IDs."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2500,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "edit_term_taxonomy",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediate before a term-taxonomy relationship is updated.",
    "params": [
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2803,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "edited_term_taxonomy",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a term-taxonomy relationship is updated.",
    "params": [
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2815,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "edit_term",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a term has been updated, but before the term cache has been cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2826,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "edited_term",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a term has been updated, and the term cache has been cleaned.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "Term ID."
        },
        {
            "type": "int",
            "name": "$tt_id",
            "description": "Term taxonomy ID."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2855,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "clean_object_term_cache",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the object term cache has been cleaned.",
    "params": [
        {
            "type": "array",
            "name": "$object_ids",
            "description": "An array of object IDs."
        },
        {
            "type": "string",
            "name": "$object_type",
            "description": "Object type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3022,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "clean_term_cache",
    "type": "action",
    "params_count": 3,
    "description": "Fires once after each taxonomy's term cache has been cleaned.",
    "params": [
        {
            "type": "array",
            "name": "$ids",
            "description": "An array of term IDs."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        },
        {
            "type": "bool",
            "name": "$clean_taxonomy",
            "description": "Whether or not to clean taxonomy-wide caches"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3086,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "clean_taxonomy_cache",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a taxonomy's caches have been cleaned.",
    "params": [
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3114,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "split_shared_term",
    "type": "action",
    "params_count": 4,
    "description": "Fires after a previously shared taxonomy term is split into two separate terms.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "ID of the formerly shared term."
        },
        {
            "type": "int",
            "name": "$new_term_id",
            "description": "ID of the new term created for the $term_taxonomy_id."
        },
        {
            "type": "int",
            "name": "$term_taxonomy_id",
            "description": "ID for the term_taxonomy row affected by the split."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "Taxonomy for the split term."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3674,
        "name": "wp-includes\/taxonomy.php"
    }
},
{
    "text": "https_local_ssl_verify",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether SSL should be verified for local requests.",
    "params": [
        {
            "type": "bool",
            "name": "$ssl_verify",
            "description": "Whether to verify the SSL connection. Default true."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 97,
        "name": "wp-includes\/class-wp-http-streams.php"
    }
},
{
    "text": "https_ssl_verify",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether SSL should be verified for non-local requests.",
    "params": [
        {
            "type": "bool",
            "name": "$ssl_verify",
            "description": "Whether to verify the SSL connection. Default true."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 106,
        "name": "wp-includes\/class-wp-http-streams.php"
    }
},
{
    "text": "use_streams_transport",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether streams can be used as a transport for retrieving a URL.",
    "params": [
        {
            "type": "bool",
            "name": "$use_class",
            "description": "Whether the class can be used. Default true."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Request arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 415,
        "name": "wp-includes\/class-wp-http-streams.php"
    }
},
{
    "text": "embed_defaults",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the default array of embed dimensions.",
    "params": [
        {
            "type": "array",
            "name": "$size",
            "description": "An array of embed width and height values"
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The URL that should be embedded."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 81,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "wp_audio_embed_handler",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the audio embed handler callback.",
    "params": [
        {
            "type": "callable",
            "name": "$handler",
            "description": "Audio embed handler callback function."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 199,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "wp_video_embed_handler",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the video embed handler callback.",
    "params": [
        {
            "type": "callable",
            "name": "$handler",
            "description": "Video embed handler callback function."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 208,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "wp_embed_handler_youtube",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the YoutTube embed output.",
    "params": [
        {
            "type": "string",
            "name": "$embed",
            "description": "YouTube embed output."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "An array of embed attributes."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The original URL that was matched by the regex."
        },
        {
            "type": "array",
            "name": "$rawattr",
            "description": "The original unmodified attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 243,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "wp_embed_handler_audio",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the audio embed output.",
    "params": [
        {
            "type": "string",
            "name": "$audio",
            "description": "Audio embed output."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "An array of embed attributes."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The original URL that was matched by the regex."
        },
        {
            "type": "array",
            "name": "$rawattr",
            "description": "The original unmodified attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 270,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "wp_embed_handler_video",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the video embed output.",
    "params": [
        {
            "type": "string",
            "name": "$video",
            "description": "Video embed output."
        },
        {
            "type": "array",
            "name": "$attr",
            "description": "An array of embed attributes."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The original URL that was matched by the regex."
        },
        {
            "type": "array",
            "name": "$rawattr",
            "description": "The original unmodified attributes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 302,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "oembed_discovery_links",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the oEmbed discovery links HTML.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "HTML of the discovery links."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 338,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "post_embed_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URL to embed a specific post.",
    "params": [
        {
            "type": "string",
            "name": "$embed_url",
            "description": "The post embed URL."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The corresponding post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 380,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "oembed_endpoint_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the oEmbed endpoint URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The URL to the oEmbed endpoint."
        },
        {
            "type": "string",
            "name": "$permalink",
            "description": "The permalink used for the `url` query arg."
        },
        {
            "type": "string",
            "name": "$format",
            "description": "The requested response format."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 413,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "embed_html",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the embed HTML output for a given post.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The default iframe tag to display embedded content."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Current post object."
        },
        {
            "type": "int",
            "name": "$width",
            "description": "Width of the response."
        },
        {
            "type": "int",
            "name": "$height",
            "description": "Height of the response."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 484,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "oembed_response_data",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the oEmbed response data.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "The response data."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post object."
        },
        {
            "type": "int",
            "name": "$width",
            "description": "The requested width."
        },
        {
            "type": "int",
            "name": "$height",
            "description": "The calculated height."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 555,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "the_excerpt_embed",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post excerpt for the embed template.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "The current post excerpt."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 825,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "embed_site_title_html",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the site title HTML in the embed footer.",
    "params": [
        {
            "type": "string",
            "name": "$site_title",
            "description": "The site title HTML."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1056,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "enqueue_embed_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Fires when scripts and styles are enqueued for the embed iframe.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 864,
        "name": "wp-includes\/embed.php"
    }
},
{
    "text": "xmlrpc_element_limit",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of elements to parse in an XML-RPC response.",
    "params": [
        {
            "type": "int",
            "name": "$element_limit",
            "description": "Default elements limit."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 86,
        "name": "wp-includes\/IXR\/class-IXR-message.php"
    }
},
{
    "text": "xmlrpc_chunk_parsing_size",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the chunk size that can be used to parse an XML-RPC reponse message.",
    "params": [
        {
            "type": "int",
            "name": "$chunk_size",
            "description": "Chunk size to parse in bytes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 110,
        "name": "wp-includes\/IXR\/class-IXR-message.php"
    }
},
{
    "text": "wp_roles_init",
    "type": "action",
    "params_count": 1,
    "description": "After the roles have been initialized, allow plugins to add their own roles.",
    "params": [
        {
            "type": "WP_Roles",
            "name": "$this",
            "description": "A reference to the WP_Roles object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 290,
        "name": "wp-includes\/class-wp-roles.php"
    }
},
{
    "text": "embed_thumbnail_id",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the thumbnail image ID for use in the embed template.",
    "params": [
        {
            "type": "int",
            "name": "$thumbnail_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 32,
        "name": "wp-includes\/theme-compat\/embed-content.php"
    }
},
{
    "text": "embed_thumbnail_image_size",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the thumbnail image size for use in the embed template.",
    "params": [
        {
            "type": "string",
            "name": "$image_size",
            "description": "Thumbnail image size."
        },
        {
            "type": "int",
            "name": "$thumbnail_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 59,
        "name": "wp-includes\/theme-compat\/embed-content.php"
    }
},
{
    "text": "embed_thumbnail_image_shape",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the thumbnail shape for use in the embed template.",
    "params": [
        {
            "type": "string",
            "name": "$shape",
            "description": "Thumbnail image shape. Either 'rectangular' or 'square'."
        },
        {
            "type": "int",
            "name": "$thumbnail_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 75,
        "name": "wp-includes\/theme-compat\/embed-content.php"
    }
},
{
    "text": "embed_content",
    "type": "action",
    "params_count": 0,
    "description": "Prints additional content after the embed excerpt.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 108,
        "name": "wp-includes\/theme-compat\/embed-content.php"
    }
},
{
    "text": "embed_content_meta);",
    "type": "action",
    "params_count": 0,
    "description": "Prints additional meta content in the embed template.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 121,
        "name": "wp-includes\/theme-compat\/embed-content.php"
    }
},
{
    "text": "embed_head",
    "type": "action",
    "params_count": 0,
    "description": "Prints scripts or data in the embed template  tag.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 29,
        "name": "wp-includes\/theme-compat\/header-embed.php"
    }
},
{
    "text": "embed_footer",
    "type": "action",
    "params_count": 0,
    "description": "Prints scripts or data before the closing body tag in the embed template.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 18,
        "name": "wp-includes\/theme-compat\/footer-embed.php"
    }
},
{
    "text": "http_headers_useragent",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the user agent value sent with an HTTP request.",
    "params": [
        {
            "type": "string",
            "name": "$user_agent",
            "description": "WordPress user agent string."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 183,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "http_request_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the arguments used in an HTTP request.",
    "params": [
        {
            "type": "array",
            "name": "$r",
            "description": "An array of HTTP request arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The request URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 222,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "pre_http_request",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to preempt an HTTP request's return value.",
    "params": [
        {
            "type": "false|array|WP_Error",
            "name": "$preempt",
            "description": "Whether to preempt an HTTP request's return value. Default false."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "HTTP request arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The request URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 246,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "https_ssl_verify",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether SSL should be verified for non-local requests.",
    "params": [
        {
            "type": "bool",
            "name": "$ssl_verify",
            "description": "Whether to verify the SSL connection. Default true."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 352,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "http_response",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the HTTP API response immediately before the response is returned.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "HTTP response."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "HTTP request arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The request URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 423,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "http_api_transports",
    "type": "filter",
    "params_count": 3,
    "description": "Filters which HTTP transports are available and in what order.",
    "params": [
        {
            "type": "array",
            "name": "$transports",
            "description": "Array of HTTP transports to check. Default array contains"
        },
        {
            "type": "array",
            "name": "$args",
            "description": "HTTP request arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The URL to request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 509,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "http_response",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the HTTP API response immediately before the response is returned.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "HTTP response."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "HTTP request arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The request URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 572,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "block_local_requests",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to block local requests through the proxy.",
    "params": [
        {
            "type": "bool",
            "name": "$block",
            "description": "Whether to block local requests through proxy."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 833,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "http_api_debug",
    "type": "action",
    "params_count": 5,
    "description": "Fires after an HTTP API response is received and before the response is returned.",
    "params": [
        {
            "type": "array|WP_Error",
            "name": "$response",
            "description": "HTTP response or WP_Error object."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Context under which the hook is fired."
        },
        {
            "type": "string",
            "name": "$class",
            "description": "HTTP transport used."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "HTTP request arguments."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The request URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 396,
        "name": "wp-includes\/class-http.php"
    }
},
{
    "text": "schedule_event",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a single event before it is scheduled.",
    "params": [
        {
            "type": "stdClass",
            "name": "$event",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 55,
        "name": "wp-includes\/cron.php"
    }
},
{
    "text": "schedule_event",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a single event before it is scheduled.",
    "params": [
        {
            "type": "stdClass",
            "name": "$event",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 55,
        "name": "wp-includes\/cron.php"
    }
},
{
    "text": "cron_schedules",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the non-default cron schedules.",
    "params": [
        {
            "type": "array",
            "name": "$new_schedules",
            "description": "An array of non-default cron schedules. Default empty."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 439,
        "name": "wp-includes\/cron.php"
    }
},
{
    "text": "run_wptexturize",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to skip running wptexturize().",
    "params": [
        {
            "type": "bool",
            "name": "$run_texturize",
            "description": "Whether to short-circuit wptexturize()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 92,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "no_texturize_tags",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of HTML elements not to texturize.",
    "params": [
        {
            "type": "array",
            "name": "$default_no_texturize_tags",
            "description": "An array of HTML element names."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 214,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "no_texturize_shortcodes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of shortcodes not to texturize.",
    "params": [
        {
            "type": "array",
            "name": "$default_no_texturize_shortcodes",
            "description": "An array of shortcode names."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 222,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_file_name_chars",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of characters to remove from a filename.",
    "params": [
        {
            "type": "array",
            "name": "$special_chars",
            "description": "Characters to remove."
        },
        {
            "type": "string",
            "name": "$filename_raw",
            "description": "Filename as it was passed into sanitize_file_name()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1787,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_file_name",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a sanitized filename string.",
    "params": [
        {
            "type": "string",
            "name": "$filename",
            "description": "Sanitized filename."
        },
        {
            "type": "string",
            "name": "$filename_raw",
            "description": "The filename prior to sanitization."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1815,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_user",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a sanitized username string.",
    "params": [
        {
            "type": "string",
            "name": "$username",
            "description": "Sanitized username."
        },
        {
            "type": "string",
            "name": "$raw_username",
            "description": "The username prior to sanitization."
        },
        {
            "type": "bool",
            "name": "$strict",
            "description": "Whether to limit the sanitization to specific characters. Default false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1887,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_key",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a sanitized key string.",
    "params": [
        {
            "type": "string",
            "name": "$key",
            "description": "Sanitized key."
        },
        {
            "type": "string",
            "name": "$raw_key",
            "description": "The key prior to sanitization."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1913,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_title",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a sanitized title string.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Sanitized title."
        },
        {
            "type": "string",
            "name": "$raw_title",
            "description": "The title prior to sanitization."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The context for which the title is being sanitized."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1945,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_html_class",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a sanitized HTML class string.",
    "params": [
        {
            "type": "string",
            "name": "$sanitized",
            "description": "The sanitized HTML class."
        },
        {
            "type": "string",
            "name": "$class",
            "description": "HTML class before sanitization."
        },
        {
            "type": "string",
            "name": "$fallback",
            "description": "The fallback string."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2092,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "format_to_edit",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the text to be formatted for editing.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The text, prior to formatting for editing."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2339,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "smilies_src",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the Smiley image URL before it's used in the image element.",
    "params": [
        {
            "type": "string",
            "name": "$smiley_url",
            "description": "URL for the smiley image."
        },
        {
            "type": "string",
            "name": "$img",
            "description": "Filename for the smiley image."
        },
        {
            "type": "string",
            "name": "$site_url",
            "description": "Site URL, as returned by site_url()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2818,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "is_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether an email address is valid.",
    "params": [
        {
            "type": "bool",
            "name": "$is_email",
            "description": "Whether the email address has passed the is_email() checks. Default false."
        },
        {
            "type": "string",
            "name": "$email",
            "description": "The email address being checked."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Context under which the email was tested."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2905,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a sanitized email address.",
    "params": [
        {
            "type": "string",
            "name": "$email",
            "description": "The sanitized email address."
        },
        {
            "type": "string",
            "name": "$email",
            "description": "The email address, as provided to sanitize_email()."
        },
        {
            "type": "string",
            "name": "$message",
            "description": "A message to pass to the user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3142,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "human_time_diff",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the human readable difference between two timestamps.",
    "params": [
        {
            "type": "string",
            "name": "$since",
            "description": "The difference in human readable text."
        },
        {
            "type": "int",
            "name": "$diff",
            "description": "The difference in seconds."
        },
        {
            "type": "int",
            "name": "$from",
            "description": "Unix timestamp from which the difference begins."
        },
        {
            "type": "int",
            "name": "$to",
            "description": "Unix timestamp to end the time difference."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3287,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "excerpt_length",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of words in an excerpt.",
    "params": [
        {
            "type": "int",
            "name": "$number",
            "description": "The number of words. Default 55."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3323,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "excerpt_more",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the string in the \"more\" link displayed after a trimmed excerpt.",
    "params": [
        {
            "type": "string",
            "name": "$more_string",
            "description": "The string shown within the more link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3331,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "wp_trim_excerpt",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the trimmed excerpt string.",
    "params": [
        {
            "type": "string",
            "name": "$text",
            "description": "The trimmed text."
        },
        {
            "type": "string",
            "name": "$raw_excerpt",
            "description": "The text prior to trimming."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3342,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "wp_trim_words",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the text content after words have been trimmed.",
    "params": [
        {
            "type": "string",
            "name": "$text",
            "description": "The trimmed text."
        },
        {
            "type": "int",
            "name": "$num_words",
            "description": "The number of words to trim the text to. Default 55."
        },
        {
            "type": "string",
            "name": "$more",
            "description": "An optional string to append to the end of the trimmed text, e.g. &hellip;."
        },
        {
            "type": "string",
            "name": "$original_text",
            "description": "The text before it was trimmed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3400,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "pre_ent2ncr",
    "type": "filter",
    "params_count": 2,
    "description": "Filters text before named entities are converted into numbered entities.",
    "params": [
        {
            "type": "null",
            "name": "$converted_text",
            "description": "The text to be converted. Default null."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "The text prior to entity conversion."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3423,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "format_for_editor",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text after it is formatted for the editor.",
    "params": [
        {
            "type": "string",
            "name": "$text",
            "description": "The formatted text."
        },
        {
            "type": "string",
            "name": "$default_editor",
            "description": "The default editor for the current user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3721,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "clean_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a string cleaned and escaped for output as a URL.",
    "params": [
        {
            "type": "string",
            "name": "$good_protocol_url",
            "description": "The cleaned URL to be returned."
        },
        {
            "type": "string",
            "name": "$original_url",
            "description": "The URL prior to cleaning."
        },
        {
            "type": "string",
            "name": "$_context",
            "description": "If 'display', replace ampersands and single quotes only."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3879,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "js_escape",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a string cleaned and escaped for output in JavaScript.",
    "params": [
        {
            "type": "string",
            "name": "$safe_text",
            "description": "The text after it has been escaped."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "The text prior to being escaped."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3940,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "esc_html",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a string cleaned and escaped for output in HTML.",
    "params": [
        {
            "type": "string",
            "name": "$safe_text",
            "description": "The text after it has been escaped."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "The text prior to being escaped."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3965,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "attribute_escape",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a string cleaned and escaped for output in an HTML attribute.",
    "params": [
        {
            "type": "string",
            "name": "$safe_text",
            "description": "The text after it has been escaped."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "The text prior to being escaped."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3990,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "esc_textarea",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a string cleaned and escaped for output in a textarea element.",
    "params": [
        {
            "type": "string",
            "name": "$safe_text",
            "description": "The text after it has been escaped."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "The text prior to being escaped."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4011,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "tag_escape",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a string cleaned and escaped for output as an HTML tag.",
    "params": [
        {
            "type": "string",
            "name": "$safe_tag",
            "description": "The tag name after it has been escaped."
        },
        {
            "type": "string",
            "name": "$tag_name",
            "description": "The text before it was escaped."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4032,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "wp_parse_str",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of variables derived from a parsed string.",
    "params": [
        {
            "type": "array",
            "name": "$array",
            "description": "The array populated with variables."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4367,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "wp_sprintf",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a fragment from the pattern passed to wp_sprintf().",
    "params": [
        {
            "type": "string",
            "name": "$fragment",
            "description": "A fragment from the pattern."
        },
        {
            "type": "string",
            "name": "$arg",
            "description": "The argument."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4455,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_text_field",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a sanitized text field string.",
    "params": [
        {
            "type": "string",
            "name": "$filtered",
            "description": "The sanitized string."
        },
        {
            "type": "string",
            "name": "$str",
            "description": "The string prior to being sanitized."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4707,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_textarea_field",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a sanitized textarea field string.",
    "params": [
        {
            "type": "string",
            "name": "$filtered",
            "description": "The sanitized string."
        },
        {
            "type": "string",
            "name": "$str",
            "description": "The string prior to being sanitized."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4735,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_mime_type",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a mime type following sanitization.",
    "params": [
        {
            "type": "string",
            "name": "$sani_mime_type",
            "description": "The sanitized mime type."
        },
        {
            "type": "string",
            "name": "$mime_type",
            "description": "The mime type prior to sanitization."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4839,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "sanitize_trackback_urls",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a list of trackback URLs following sanitization.",
    "params": [
        {
            "type": "string",
            "name": "$urls_to_ping",
            "description": "Sanitized space or carriage return separated URLs."
        },
        {
            "type": "string",
            "name": "$to_ping",
            "description": "Space or carriage return separated URLs before sanitization."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4869,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "wp_spaces_regexp",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the regexp for common whitespace characters.",
    "params": [
        {
            "type": "string",
            "name": "$spaces",
            "description": "Regexp pattern for matching common whitespace characters."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4963,
        "name": "wp-includes\/formatting.php"
    }
},
{
    "text": "process_text_diff_html",
    "type": "filter",
    "params_count": 3,
    "description": "Contextually filters a diffed line.",
    "params": [
        {
            "type": "String",
            "name": "$processed_line",
            "description": "The processed diffed line."
        },
        {
            "type": "String",
            "name": "$line",
            "description": "The unprocessed diffed line."
        },
        {
            "type": "string null            The line context. Values are 'added', 'deleted' or 'unchanged'.",
            "name": "$string",
            "description": "null            The line context. Values are 'added', 'deleted' or 'unchanged'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 158,
        "name": "wp-includes\/class-wp-text-diff-renderer-table.php"
    }
},
{
    "text": "user_search_columns",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the columns to search in a WP_User_Query search.",
    "params": [
        {
            "type": "array",
            "name": "$search_columns",
            "description": "Array of column names to be searched."
        },
        {
            "type": "string",
            "name": "$search",
            "description": "Text being searched."
        },
        {
            "type": "WP_User_Query",
            "name": "$this",
            "description": "The current WP_User_Query instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 544,
        "name": "wp-includes\/class-wp-user-query.php"
    }
},
{
    "text": "found_users_query",
    "type": "filter",
    "params_count": 1,
    "description": "Filters SELECT FOUND_ROWS() query for the current WP_User_Query instance.",
    "params": [
        {
            "type": "string",
            "name": "$sql",
            "description": "The SELECT FOUND_ROWS() query for the current WP_User_Query."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 609,
        "name": "wp-includes\/class-wp-user-query.php"
    }
},
{
    "text": "pre_get_users",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the WP_User_Query has been parsed.",
    "params": [
        {
            "type": "WP_User_Query",
            "name": "$this",
            "description": "The current WP_User_Query instance,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 230,
        "name": "wp-includes\/class-wp-user-query.php"
    }
},
{
    "text": "pre_user_query",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the WP_User_Query has been parsed, and before",
    "params": [
        {
            "type": "WP_User_Query",
            "name": "$this",
            "description": "The current WP_User_Query instance,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 576,
        "name": "wp-includes\/class-wp-user-query.php"
    }
},
{
    "text": "wp_get_nav_menu_object",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the nav_menu term retrieved for wp_get_nav_menu_object().",
    "params": [
        {
            "type": "WP_Term|false",
            "name": "$menu_obj",
            "description": "Term from nav_menu taxonomy, or false if nothing had been found."
        },
        {
            "type": "int|string|WP_Term",
            "name": "$menu",
            "description": "The menu ID, slug, name, or object passed to wp_get_nav_menu_object()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 49,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "has_nav_menu",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether a nav menu is assigned to the specified location.",
    "params": [
        {
            "type": "bool",
            "name": "$has_nav_menu",
            "description": "Whether there is a menu assigned to a location."
        },
        {
            "type": "string",
            "name": "$location",
            "description": "Menu location."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 184,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_get_nav_menu_name",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the navigation menu name being returned.",
    "params": [
        {
            "type": "string",
            "name": "$menu_name",
            "description": "Menu name."
        },
        {
            "type": "string",
            "name": "$location",
            "description": "Menu location identifier."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 216,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_get_nav_menus",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the navigation menu objects being returned.",
    "params": [
        {
            "type": "array",
            "name": "$menus",
            "description": "An array of menu objects."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments used to retrieve menu objects."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 590,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_get_nav_menu_items",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the navigation menu items being returned.",
    "params": [
        {
            "type": "array",
            "name": "$items",
            "description": "An array of menu item post objects."
        },
        {
            "type": "object",
            "name": "$menu",
            "description": "The menu object."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments used to retrieve menu item objects."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 724,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "nav_menu_attr_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a navigation menu item's title attribute.",
    "params": [
        {
            "type": "string",
            "name": "$item_title",
            "description": "The menu item title attribute."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 835,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "nav_menu_description",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a navigation menu item's description.",
    "params": [
        {
            "type": "string",
            "name": "$description",
            "description": "The menu item description."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 845,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_setup_nav_menu_item",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a navigation menu item object.",
    "params": [
        {
            "type": "object",
            "name": "$menu_item",
            "description": "The menu item object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 906,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_delete_nav_menu",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a navigation menu has been successfully deleted.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "ID of the deleted menu."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 285,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_create_nav_menu",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a navigation menu is successfully created.",
    "params": [
        {
            "type": "int",
            "name": "$term_id",
            "description": "ID of the new menu."
        },
        {
            "type": "array",
            "name": "$menu_data",
            "description": "An array of menu data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 356,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_update_nav_menu",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a navigation menu has been successfully updated.",
    "params": [
        {
            "type": "int",
            "name": "$menu_id",
            "description": "ID of the updated menu."
        },
        {
            "type": "array",
            "name": "$menu_data",
            "description": "An array of menu data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 381,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_add_nav_menu_item",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a new navigation menu item has been added.",
    "params": [
        {
            "type": "int",
            "name": "$menu_id",
            "description": "ID of the updated menu."
        },
        {
            "type": "int",
            "name": "$menu_item_db_id",
            "description": "ID of the new menu item."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments used to update\/add the menu item."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 509,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "wp_update_nav_menu_item",
    "type": "action",
    "params_count": 3,
    "description": "Fires after a navigation menu item has been updated.",
    "params": [
        {
            "type": "int",
            "name": "$menu_id",
            "description": "ID of the updated menu."
        },
        {
            "type": "int",
            "name": "$menu_item_db_id",
            "description": "ID of the updated menu item."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments used to update a menu item."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 560,
        "name": "wp-includes\/nav-menu.php"
    }
},
{
    "text": "_wp_post_revision_fields",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of fields saved in post revisions.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "List of fields to revision. Contains 'post_title',"
        },
        {
            "type": "array",
            "name": "$post",
            "description": "A post array being processed for insertion as a post revision."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 56,
        "name": "wp-includes\/revision.php"
    }
},
{
    "text": "wp_save_post_revision_post_has_changed",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether a post has changed.",
    "params": [
        {
            "type": "bool",
            "name": "$post_has_changed",
            "description": "Whether the post has changed."
        },
        {
            "type": "WP_Post",
            "name": "$last_revision",
            "description": "The last revision post object."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 177,
        "name": "wp-includes\/revision.php"
    }
},
{
    "text": "wp_revisions_to_keep",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the number of revisions to save for the given post.",
    "params": [
        {
            "type": "int",
            "name": "$num",
            "description": "Number of revisions to store."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 505,
        "name": "wp-includes\/revision.php"
    }
},
{
    "text": "_wp_put_post_revision",
    "type": "action",
    "params_count": 1,
    "description": "Fires once a revision has been saved.",
    "params": [
        {
            "type": "int",
            "name": "$revision_id",
            "description": "Post revision ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 312,
        "name": "wp-includes\/revision.php"
    }
},
{
    "text": "wp_restore_post_revision",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a post revision has been restored.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "int",
            "name": "$revision_id",
            "description": "Post revision ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 393,
        "name": "wp-includes\/revision.php"
    }
},
{
    "text": "wp_delete_post_revision",
    "type": "action",
    "params_count": 2,
    "description": "Fires once a post revision has been deleted.",
    "params": [
        {
            "type": "int",
            "name": "$revision_id",
            "description": "Post revision ID."
        },
        {
            "type": "object|array",
            "name": "$revision",
            "description": "Post revision object or array."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 423,
        "name": "wp-includes\/revision.php"
    }
},
{
    "text": "ms_site_check",
    "type": "filter",
    "params_count": 1,
    "description": "Filters checking the status of the current blog.",
    "params": [
        {
            "type": "bool null Whether to skip the blog status check. Default null.",
            "name": "$bool",
            "description": "null Whether to skip the blog status check. Default null."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 79,
        "name": "wp-includes\/ms-load.php"
    }
},
{
    "text": "site_by_path_segments_count",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the number of path segments to consider when searching for a site.",
    "params": [
        {
            "type": "int|null",
            "name": "$segments",
            "description": "The number of path segments to consider. WordPress by default looks at"
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "The requested domain."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The requested path, in full."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 170,
        "name": "wp-includes\/ms-load.php"
    }
},
{
    "text": "pre_get_site_by_path",
    "type": "filter",
    "params_count": 5,
    "description": "Determine a site by its domain and path.",
    "params": [
        {
            "type": "null|bool|WP_Site",
            "name": "$site",
            "description": "Site value to return by path."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "The requested domain."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The requested path, in full."
        },
        {
            "type": "int|null",
            "name": "$segments",
            "description": "The suggested number of paths to consult."
        },
        {
            "type": "array",
            "name": "$paths",
            "description": "The paths to search for, based on $path and $segments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 204,
        "name": "wp-includes\/ms-load.php"
    }
},
{
    "text": "ms_network_not_found",
    "type": "action",
    "params_count": 2,
    "description": "Fires when a network cannot be found based on the requested domain and path.",
    "params": [
        {
            "type": "string",
            "name": "$domain",
            "description": "The domain used to search for a network."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The path used to search for a path."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 342,
        "name": "wp-includes\/ms-load.php"
    }
},
{
    "text": "ms_network_not_found",
    "type": "action",
    "params_count": 2,
    "description": "Fires when a network cannot be found based on the requested domain and path.",
    "params": [
        {
            "type": "string",
            "name": "$domain",
            "description": "The domain used to search for a network."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The path used to search for a path."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 342,
        "name": "wp-includes\/ms-load.php"
    }
},
{
    "text": "ms_site_not_found",
    "type": "action",
    "params_count": 3,
    "description": "Fires when a network can be determined but a site cannot.",
    "params": [
        {
            "type": "object",
            "name": "$current_site",
            "description": "The network that had been determined."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "The domain used to search for a site."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "The path used to search for a site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 400,
        "name": "wp-includes\/ms-load.php"
    }
},
{
    "text": "the_author",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the display name of the current post's author.",
    "params": [
        {
            "type": "string",
            "name": "$authordata->display_name",
            "description": "The author's display name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 36,
        "name": "wp-includes\/author-template.php"
    }
},
{
    "text": "the_modified_author",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the display name of the author who last edited the current post.",
    "params": [
        {
            "type": "string",
            "name": "$last_user->display_name",
            "description": "The author's display name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 97,
        "name": "wp-includes\/author-template.php"
    }
},
{
    "text": "the_author_posts_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the link to the author page of the author of the current post.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "HTML link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 305,
        "name": "wp-includes\/author-template.php"
    }
},
{
    "text": "author_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the URL to the author's page.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The URL to the author's page."
        },
        {
            "type": "int",
            "name": "$author_id",
            "description": "The author's id."
        },
        {
            "type": "string",
            "name": "$author_nicename",
            "description": "The author's nice name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 361,
        "name": "wp-includes\/author-template.php"
    }
},
{
    "text": "is_multi_author",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether the site has more than one author with published posts.",
    "params": [
        {
            "type": "bool",
            "name": "$is_multi_author",
            "description": "Whether $is_multi_author should evaluate as true."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 532,
        "name": "wp-includes\/author-template.php"
    }
},
{
    "text": "get_comment_author",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned comment author name.",
    "params": [
        {
            "type": "string",
            "name": "$author",
            "description": "The comment author's username."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 46,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_author",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment author's name for display.",
    "params": [
        {
            "type": "string",
            "name": "$author",
            "description": "The comment author's username."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 71,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_author_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment author's returned email address.",
    "params": [
        {
            "type": "string",
            "name": "$comment_author_email",
            "description": "The comment author's email address."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 97,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "author_email",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment author's email for display.",
    "params": [
        {
            "type": "string",
            "name": "$author_email",
            "description": "The comment author's email address."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 128,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_email",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment author's email for display.",
    "params": [
        {
            "type": "string",
            "name": "$comment_author_email",
            "description": "The comment author's email address."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 190,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_author_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment author's link for display.",
    "params": [
        {
            "type": "string",
            "name": "$return",
            "description": "The HTML-formatted comment author link."
        },
        {
            "type": "string",
            "name": "$author",
            "description": "The comment author's username."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 237,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_author_IP",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment author's returned IP address.",
    "params": [
        {
            "type": "string",
            "name": "$comment_author_IP",
            "description": "The comment author's IP address."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 276,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_author_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment author's URL.",
    "params": [
        {
            "type": "string",
            "name": "$url",
            "description": "The comment author's URL."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 322,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment author's URL for display.",
    "params": [
        {
            "type": "string",
            "name": "$author_url",
            "description": "The comment author's URL."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 347,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_author_url_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment author's returned URL link.",
    "params": [
        {
            "type": "string",
            "name": "$return",
            "description": "The HTML-formatted comment author URL link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 392,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_class",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the returned CSS classes for the current comment.",
    "params": [
        {
            "type": "array",
            "name": "$classes",
            "description": "An array of comment classes."
        },
        {
            "type": "string",
            "name": "$class",
            "description": "A comma-separated list of additional classes added to the list."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment id."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        },
        {
            "type": "int|WP_Post",
            "name": "$post_id",
            "description": "The post ID or WP_Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 525,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_date",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned comment date.",
    "params": [
        {
            "type": "string|int",
            "name": "$date",
            "description": "Formatted date string or Unix timestamp."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "The format of the date."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 554,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_excerpt_length",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the amount of words used in the comment excerpt.",
    "params": [
        {
            "type": "int",
            "name": "$comment_excerpt_length",
            "description": "The amount of words you want to display in the comment excerpt."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 597,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_excerpt",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the retrieved comment excerpt.",
    "params": [
        {
            "type": "string",
            "name": "$excerpt",
            "description": "The comment excerpt text."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 618,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_excerpt",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comment excerpt for display.",
    "params": [
        {
            "type": "string",
            "name": "$comment_excerpt",
            "description": "The comment excerpt text."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 643,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_ID",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the returned comment ID.",
    "params": [
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The current comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 665,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_link",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the returned single comment permalink.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The comment permalink with '#comment-$id' appended."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The current comment object."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments to override the defaults."
        },
        {
            "type": "int",
            "name": "$cpage",
            "description": "The calculated 'cpage' value."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 790,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comments_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the returned post comments permalink.",
    "params": [
        {
            "type": "string",
            "name": "$comments_link",
            "description": "Post comments permalink with '#comments' appended."
        },
        {
            "type": "int|WP_Post",
            "name": "$post_id",
            "description": "Post ID or WP_Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 813,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comments_number",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the returned comment count for a post.",
    "params": [
        {
            "type": "string|int",
            "name": "$count",
            "description": "A string representing the number of comments a post has, otherwise 0."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 859,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comments_number",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comments count for display.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "A translatable string formatted based on whether the count"
        },
        {
            "type": "int",
            "name": "$number",
            "description": "The number of post comments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 936,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_text",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the text of a comment.",
    "params": [
        {
            "type": "string",
            "name": "$comment_content",
            "description": "Text of the comment."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 966,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_text",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the text of a comment to be displayed.",
    "params": [
        {
            "type": "string",
            "name": "$comment_text",
            "description": "Text of the current comment."
        },
        {
            "type": "WP_Comment|null",
            "name": "$comment",
            "description": "The comment object."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 996,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_time",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the returned comment time.",
    "params": [
        {
            "type": "string|int",
            "name": "$date",
            "description": "The comment time, formatted as a date string or Unix timestamp."
        },
        {
            "type": "string",
            "name": "$d",
            "description": "Date format."
        },
        {
            "type": "bool",
            "name": "$gmt",
            "description": "Whether the GMT date is in use."
        },
        {
            "type": "bool",
            "name": "$translate",
            "description": "Whether the time is translated."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1030,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_comment_type",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned comment type.",
    "params": [
        {
            "type": "string",
            "name": "$comment_type",
            "description": "The type of comment, such as 'comment', 'pingback', or 'trackback'."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1069,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "trackback_url",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the returned trackback URL.",
    "params": [
        {
            "type": "string",
            "name": "$tb_url",
            "description": "The trackback URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1122,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comments_open",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the current post is open for comments.",
    "params": [
        {
            "type": "bool",
            "name": "$open",
            "description": "Whether the current post is open for comments."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1206,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "pings_open",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the current post is open for pings.",
    "params": [
        {
            "type": "bool",
            "name": "$open",
            "description": "Whether the current post is open for pings."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1232,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comments_template_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used to query comments in comments_template().",
    "params": [
        {
            "type": "array",
            "name": "$comment_args",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1409,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comments_array",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comments array.",
    "params": [
        {
            "type": "array",
            "name": "$comments",
            "description": "Array of comments supplied to the comments template."
        },
        {
            "type": "int",
            "name": "$post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1440,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comments_template",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the path to the theme template file used for the comments template.",
    "params": [
        {
            "type": "string",
            "name": "$theme_template",
            "description": "The path to the theme template file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1470,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "respond_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the respond link when a post has no comments.",
    "params": [
        {
            "type": "string",
            "name": "$respond_link",
            "description": "The default response link."
        },
        {
            "type": "integer",
            "name": "$id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1540,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comments_popup_link_attributes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comments link attributes for display.",
    "params": [
        {
            "type": "string",
            "name": "$attributes",
            "description": "The comments link attributes. Default empty."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1558,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_reply_link_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment reply link arguments.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Comment reply link arguments. See get_comment_reply_link()"
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The object of the comment being replied to."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The WP_Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1635,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_reply_link",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the comment reply link.",
    "params": [
        {
            "type": "string",
            "name": "$link",
            "description": "The HTML markup for the comment reply link."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments overriding the defaults."
        },
        {
            "type": "object",
            "name": "$comment",
            "description": "The object of the comment being replied."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The WP_Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1665,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "post_comments_link",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the formatted post comments link HTML.",
    "params": [
        {
            "type": "string",
            "name": "$formatted",
            "description": "The HTML-formatted post comments link."
        },
        {
            "type": "int|WP_Post",
            "name": "$post",
            "description": "The post ID or WP_Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1752,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "cancel_comment_reply_link",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the cancel comment reply link HTML.",
    "params": [
        {
            "type": "string",
            "name": "$formatted_link",
            "description": "The HTML-formatted cancel comment reply link."
        },
        {
            "type": "string",
            "name": "$link",
            "description": "Cancel comment reply link URL."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "Cancel comment reply link text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1797,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_id_fields",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned comment id fields.",
    "params": [
        {
            "type": "string",
            "name": "$result",
            "description": "The HTML-formatted hidden id field comment elements."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "The post ID."
        },
        {
            "type": "int",
            "name": "$replytoid",
            "description": "The id of the comment being replied to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1836,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "wp_list_comments_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used in retrieving the comment list.",
    "params": [
        {
            "type": "array",
            "name": "$r",
            "description": "An array of arguments for displaying comments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1962,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_default_fields",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default comment form fields.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "The default comment fields."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2228,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_defaults",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment form default arguments.",
    "params": [
        {
            "type": "array",
            "name": "$defaults",
            "description": "The default comment form arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2278,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_logged_in",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the 'logged in' message for the comment form for display.",
    "params": [
        {
            "type": "string",
            "name": "$args_logged_in",
            "description": "The logged-in-as HTML-formatted message."
        },
        {
            "type": "array",
            "name": "$commenter",
            "description": "An array containing the comment author's"
        },
        {
            "type": "string",
            "name": "$user_identity",
            "description": "If the commenter is a registered user,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2334,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_fields",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment form fields, including the textarea.",
    "params": [
        {
            "type": "array",
            "name": "$comment_fields",
            "description": "The comment fields."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2364,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_field_comment",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the content of the comment textarea field for display.",
    "params": [
        {
            "type": "string",
            "name": "$args_comment_field",
            "description": "The content of the comment textarea field."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2384,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_submit_button",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the submit button for the comment form to display.",
    "params": [
        {
            "type": "string",
            "name": "$submit_button",
            "description": "HTML markup for the submit button."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to `comment_form()`."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2438,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_submit_field",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the submit field for the comment form to display.",
    "params": [
        {
            "type": "string",
            "name": "$submit_field",
            "description": "HTML markup for the submit field."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to comment_form()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2457,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_comments_closed",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the comment form if comments are closed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2183,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_before",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the comment form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2288,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_must_log_in_after",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the HTML-formatted 'must log in after' message in the comment form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2311,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_top",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the top of the comment form, inside the form tag.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2320,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_logged_in_after",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the is_user_logged_in() check in the comment form.",
    "params": [
        {
            "type": "array",
            "name": "$commenter",
            "description": "An array containing the comment author's"
        },
        {
            "type": "string",
            "name": "$user_identity",
            "description": "If the commenter is a registered user,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2346,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_before_fields",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the comment fields in the comment form, excluding the textarea.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2396,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_after_fields",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the comment fields in the comment form, excluding the textarea.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2417,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the bottom of the comment form, inside the closing  tag.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2466,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "comment_form_after",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the comment form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2478,
        "name": "wp-includes\/comment-template.php"
    }
},
{
    "text": "get_bookmarks",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the returned list of bookmarks.",
    "params": [
        {
            "type": "array",
            "name": "$bookmarks",
            "description": "List of the cached bookmarks."
        },
        {
            "type": "array",
            "name": "$r",
            "description": "An array of bookmark query arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 151,
        "name": "wp-includes\/bookmark.php"
    }
},
{
    "text": "dynamic_sidebar_params",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the parameters passed to a widget's display callback.",
    "params": [
        {
            "type": "array",
            "name": "$params",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 711,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "dynamic_sidebar_has_widgets",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether a sidebar has widgets.",
    "params": [
        {
            "type": "bool",
            "name": "$did_one",
            "description": "Whether at least one widget was rendered in the sidebar."
        },
        {
            "type": "int|string",
            "name": "$index",
            "description": "Index, name, or ID of the dynamic sidebar."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 774,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "is_active_sidebar",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether a dynamic sidebar is considered \"active\".",
    "params": [
        {
            "type": "bool",
            "name": "$is_active_sidebar",
            "description": "Whether or not the sidebar should be considered \"active\"."
        },
        {
            "type": "int|string",
            "name": "$index",
            "description": "Index, name, or ID of the dynamic sidebar."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 869,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "sidebars_widgets",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of sidebars and their widgets.",
    "params": [
        {
            "type": "array",
            "name": "$sidebars_widgets",
            "description": "An associative array of sidebars and their widgets."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 918,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "register_sidebar",
    "type": "action",
    "params_count": 1,
    "description": "Fires once a sidebar has been registered.",
    "params": [
        {
            "type": "array",
            "name": "$sidebar",
            "description": "Parsed arguments for the registered sidebar."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 276,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "wp_register_sidebar_widget",
    "type": "action",
    "params_count": 1,
    "description": "Fires once for each registered widget.",
    "params": [
        {
            "type": "array",
            "name": "$widget",
            "description": "An array of default widget arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 375,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "wp_unregister_sidebar_widget",
    "type": "action",
    "params_count": 1,
    "description": "Fires just before a widget is removed from a sidebar.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "The widget ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 444,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "dynamic_sidebar_before",
    "type": "action",
    "params_count": 2,
    "description": "Fires before widgets are rendered in a dynamic sidebar.",
    "params": [
        {
            "type": "int|string",
            "name": "$index",
            "description": "Index, name, or ID of the dynamic sidebar."
        },
        {
            "type": "bool",
            "name": "$has_widgets",
            "description": "Whether the sidebar is populated with widgets."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 655,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "dynamic_sidebar",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a widget's display callback is called.",
    "params": [
        {
            "type": "array",
            "name": "$widget_id",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 740,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "dynamic_sidebar_after",
    "type": "action",
    "params_count": 2,
    "description": "Fires after widgets are rendered in a dynamic sidebar.",
    "params": [
        {
            "type": "int|string",
            "name": "$index",
            "description": "Index, name, or ID of the dynamic sidebar."
        },
        {
            "type": "bool",
            "name": "$has_widgets",
            "description": "Whether the sidebar is populated with widgets."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 760,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "the_widget",
    "type": "action",
    "params_count": 3,
    "description": "Fires before rendering the requested widget.",
    "params": [
        {
            "type": "string",
            "name": "$widget",
            "description": "The widget's class name."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "The current widget instance's settings."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of the widget's sidebar arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1083,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "widgets_init",
    "type": "action",
    "params_count": 0,
    "description": "Fires after all default WordPress widgets have been registered.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1649,
        "name": "wp-includes\/widgets.php"
    }
},
{
    "text": "customize_control_active",
    "type": "filter",
    "params_count": 2,
    "description": "Filters response of WP_Customize_Control::active().",
    "params": [
        {
            "type": "bool",
            "name": "$active",
            "description": "Whether the Customizer control is active."
        },
        {
            "type": "WP_Customize_Control",
            "name": "$control",
            "description": "WP_Customize_Control instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 266,
        "name": "wp-includes\/class-wp-customize-control.php"
    }
},
{
    "text": "customize_render_control",
    "type": "action",
    "params_count": 1,
    "description": "Fires just before the current Customizer control is rendered.",
    "params": [
        {
            "type": "WP_Customize_Control",
            "name": "$this",
            "description": "WP_Customize_Control instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 398,
        "name": "wp-includes\/class-wp-customize-control.php"
    }
},
{
    "text": "locale",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the locale ID of the WordPress installation.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The locale ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 41,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "locale",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the locale ID of the WordPress installation.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The locale ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 41,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "gettext",
    "type": "filter",
    "params_count": 3,
    "description": "Filters text with its translation.",
    "params": [
        {
            "type": "string",
            "name": "$translation",
            "description": "Translated text."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "Text to translate."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 134,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "gettext_with_context",
    "type": "filter",
    "params_count": 4,
    "description": "Filters text with its translation based on context information.",
    "params": [
        {
            "type": "string",
            "name": "$translation",
            "description": "Translated text."
        },
        {
            "type": "string",
            "name": "$text",
            "description": "Text to translate."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Context information for the translators."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 186,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "ngettext",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the singular or plural form of a string.",
    "params": [
        {
            "type": "string",
            "name": "$translation",
            "description": "Translated text."
        },
        {
            "type": "string",
            "name": "$single",
            "description": "The text to be used if the number is singular."
        },
        {
            "type": "string",
            "name": "$plural",
            "description": "The text to be used if the number is plural."
        },
        {
            "type": "string",
            "name": "$number",
            "description": "The number to compare against to use either the singular or plural form."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 377,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "ngettext_with_context",
    "type": "filter",
    "params_count": 6,
    "description": "Filters the singular or plural form of a string with gettext context.",
    "params": [
        {
            "type": "string",
            "name": "$translation",
            "description": "Translated text."
        },
        {
            "type": "string",
            "name": "$single",
            "description": "The text to be used if the number is singular."
        },
        {
            "type": "string",
            "name": "$plural",
            "description": "The text to be used if the number is plural."
        },
        {
            "type": "string",
            "name": "$number",
            "description": "The number to compare against to use either the singular or plural form."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Context information for the translators."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 419,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "override_load_textdomain",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to override the .mo file loading.",
    "params": [
        {
            "type": "bool",
            "name": "$override",
            "description": "Whether to override the .mo file loading. Default false."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        },
        {
            "type": "string",
            "name": "$mofile",
            "description": "Path to the MO file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 556,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "load_textdomain_mofile",
    "type": "filter",
    "params_count": 2,
    "description": "Filters MO file path for loading translations for a specific text domain.",
    "params": [
        {
            "type": "string",
            "name": "$mofile",
            "description": "Path to the MO file."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 582,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "override_unload_textdomain",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to override the text domain unloading.",
    "params": [
        {
            "type": "bool",
            "name": "$override",
            "description": "Whether to override the text domain unloading. Default false."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 623,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "plugin_locale",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a plugin's locale.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The plugin's current locale."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 714,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "plugin_locale",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a plugin's locale.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The plugin's current locale."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 714,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "theme_locale",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a theme's locale.",
    "params": [
        {
            "type": "string",
            "name": "$locale",
            "description": "The theme's current locale."
        },
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 787,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "get_available_languages",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of available language codes.",
    "params": [
        {
            "type": "array",
            "name": "$languages",
            "description": "An array of available language codes."
        },
        {
            "type": "string",
            "name": "$dir",
            "description": "The directory where the language files were found."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1030,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "load_textdomain",
    "type": "action",
    "params_count": 2,
    "description": "Fires before the MO translation file is loaded.",
    "params": [
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        },
        {
            "type": "string",
            "name": "$mofile",
            "description": "Path to the .mo file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 572,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "unload_textdomain",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the text domain is unloaded.",
    "params": [
        {
            "type": "string",
            "name": "$domain",
            "description": "Text domain. Unique identifier for retrieving translated strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 638,
        "name": "wp-includes\/l10n.php"
    }
},
{
    "text": "the_networks",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the network query results.",
    "params": [
        {
            "type": "array",
            "name": "$_networks",
            "description": "An array of WP_Network objects."
        },
        {
            "type": "WP_Network_Query",
            "name": "$this",
            "description": "Current instance of WP_Network_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 266,
        "name": "wp-includes\/class-wp-network-query.php"
    }
},
{
    "text": "networks_clauses",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the network query clauses.",
    "params": [
        {
            "type": "array",
            "name": "$pieces",
            "description": "A compacted array of network query clauses."
        },
        {
            "type": "WP_Network_Query",
            "name": "$this",
            "description": "Current instance of WP_Network_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 406,
        "name": "wp-includes\/class-wp-network-query.php"
    }
},
{
    "text": "found_networks_query",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the query used to retrieve found network count.",
    "params": [
        {
            "type": "string",
            "name": "$found_networks_query",
            "description": "SQL query. Default 'SELECT FOUND_ROWS()'."
        },
        {
            "type": "WP_Network_Query",
            "name": "$network_query",
            "description": "The `WP_Network_Query` instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 469,
        "name": "wp-includes\/class-wp-network-query.php"
    }
},
{
    "text": "parse_network_query",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the network query vars have been parsed.",
    "params": [
        {
            "type": "WP_Network_Query",
            "name": "$this",
            "description": "The WP_Network_Query instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 164,
        "name": "wp-includes\/class-wp-network-query.php"
    }
},
{
    "text": "pre_get_networks",
    "type": "action",
    "params_count": 1,
    "description": "Fires before networks are retrieved.",
    "params": [
        {
            "type": "WP_Network_Query",
            "name": "$this",
            "description": "Current instance of WP_Network_Query (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 199,
        "name": "wp-includes\/class-wp-network-query.php"
    }
},
{
    "text": "query_vars",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the query variables whitelist before processing.",
    "params": [
        {
            "type": "array",
            "name": "$public_query_vars",
            "description": "The array of whitelisted query variables."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 281,
        "name": "wp-includes\/class-wp.php"
    }
},
{
    "text": "request",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of parsed query variables.",
    "params": [
        {
            "type": "array",
            "name": "$query_vars",
            "description": "The array of requested query variables."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 364,
        "name": "wp-includes\/class-wp.php"
    }
},
{
    "text": "wp_headers",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the HTTP headers before they're sent to the browser.",
    "params": [
        {
            "type": "array",
            "name": "$headers",
            "description": "The list of headers to be sent."
        },
        {
            "type": "WP",
            "name": "$this",
            "description": "Current WordPress environment instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 467,
        "name": "wp-includes\/class-wp.php"
    }
},
{
    "text": "query_string",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the query string before parsing.",
    "params": [
        {
            "type": "string",
            "name": "$query_string",
            "description": "The query string to modify."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 535,
        "name": "wp-includes\/class-wp.php"
    }
},
{
    "text": "parse_request",
    "type": "action",
    "params_count": 1,
    "description": "Fires once all query variables for the current request have been parsed.",
    "params": [
        {
            "type": "WP",
            "name": "$this",
            "description": "Current WordPress environment instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 373,
        "name": "wp-includes\/class-wp.php"
    }
},
{
    "text": "send_headers",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the requested HTTP headers for caching, content type, etc. have been sent.",
    "params": [
        {
            "type": "WP",
            "name": "$this",
            "description": "Current WordPress environment instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 504,
        "name": "wp-includes\/class-wp.php"
    }
},
{
    "text": "wp",
    "type": "action",
    "params_count": 1,
    "description": "Fires once the WordPress environment has been set up.",
    "params": [
        {
            "type": "WP",
            "name": "$this",
            "description": "Current WordPress environment instance (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 726,
        "name": "wp-includes\/class-wp.php"
    }
},
{
    "text": "widget_categories_dropdown_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the arguments for the Categories widget drop-down.",
    "params": [
        {
            "type": "array",
            "name": "$cat_args",
            "description": "An array of Categories widget drop-down arguments."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "Array of settings for the current widget."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 89,
        "name": "wp-includes\/widgets\/class-wp-widget-categories.php"
    }
},
{
    "text": "widget_categories_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the arguments for the Categories widget.",
    "params": [
        {
            "type": "array",
            "name": "$cat_args",
            "description": "An array of Categories widget options."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "Array of settings for the current widget."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 124,
        "name": "wp-includes\/widgets\/class-wp-widget-categories.php"
    }
},
{
    "text": "widget_title",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the widget title.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "The widget title. Default 'Pages'."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "Array of settings for the current widget."
        },
        {
            "type": "mixed",
            "name": "$id_base",
            "description": "The widget ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 54,
        "name": "wp-includes\/widgets\/class-wp-widget-pages.php"
    }
},
{
    "text": "widget_links_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the arguments for the Links widget.",
    "params": [
        {
            "type": "array",
            "name": "$widget_links_args",
            "description": "An array of arguments to retrieve the links list."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "The settings for the particular instance of the widget."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 80,
        "name": "wp-includes\/widgets\/class-wp-widget-links.php"
    }
},
{
    "text": "widget_nav_menu_args",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the arguments for the Navigation Menu widget.",
    "params": [
        {
            "type": "array",
            "name": "$nav_menu_args",
            "description": "{"
        },
        {
            "type": "WP_Term",
            "name": "$nav_menu",
            "description": "Nav menu object for the current menu."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Display arguments for the current widget."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "Array of settings for the current widget."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 81,
        "name": "wp-includes\/widgets\/class-wp-nav-menu-widget.php"
    }
},
{
    "text": "widget_text",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the content of the Text widget.",
    "params": [
        {
            "type": "string",
            "name": "$text",
            "description": "The widget content."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "Array of settings for the current widget."
        },
        {
            "type": "WP_Widget_Text|WP_Widget_Custom_HTML",
            "name": "$this",
            "description": "Current Text widget instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 270,
        "name": "wp-includes\/widgets\/class-wp-widget-text.php"
    }
},
{
    "text": "widget_text_content",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the content of the Text widget to apply changes expected from the visual (TinyMCE) editor.",
    "params": [
        {
            "type": "string",
            "name": "$text",
            "description": "The widget content."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "Array of settings for the current widget."
        },
        {
            "type": "WP_Widget_Text",
            "name": "$this",
            "description": "Current Text widget instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 285,
        "name": "wp-includes\/widgets\/class-wp-widget-text.php"
    }
},
{
    "text": "widget_custom_html_content",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the content of the Custom HTML widget.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The widget content."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "Array of settings for the current widget."
        },
        {
            "type": "WP_Widget_Custom_HTML",
            "name": "$this",
            "description": "Current Custom HTML widget instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 152,
        "name": "wp-includes\/widgets\/class-wp-widget-custom-html.php"
    }
},
{
    "text": "comment_max_links_url",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the number of links found in a comment.",
    "params": [
        {
            "type": "int",
            "name": "$num_links",
            "description": "The number of links found."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "Comment author's URL. Included in allowed links total."
        },
        {
            "type": "string",
            "name": "$comment",
            "description": "Content of the comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 63,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "get_comment",
    "type": "filter",
    "params_count": 1,
    "description": "Fires after a comment is retrieved.",
    "params": [
        {
            "type": "mixed",
            "name": "$_comment",
            "description": "Comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 201,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "get_default_comment_status",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the default comment status for the given post type.",
    "params": [
        {
            "type": "string",
            "name": "$status",
            "description": "Default status for the given post type,"
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type. Default is `post`."
        },
        {
            "type": "string",
            "name": "$comment_type",
            "description": "Type of comment. Default is `comment`."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 290,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_cookie_lifetime",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the lifetime of the comment cookie in seconds.",
    "params": [
        {
            "type": "int",
            "name": "$seconds",
            "description": "Comment cookie lifetime. Default 30000000."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 555,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_author_name",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment author's name cookie before it is set.",
    "params": [
        {
            "type": "string",
            "name": "$author_cookie",
            "description": "The comment author name cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 582,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_author_email",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment author's email cookie before it is set.",
    "params": [
        {
            "type": "string",
            "name": "$author_email_cookie",
            "description": "The comment author email cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 599,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_author_url",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment author's URL cookie before it is set.",
    "params": [
        {
            "type": "string",
            "name": "$author_url_cookie",
            "description": "The comment author URL cookie."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 616,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "duplicate_comment_id",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the ID, if any, of the duplicate comment found when creating a new comment.",
    "params": [
        {
            "type": "int",
            "name": "$dupe_id",
            "description": "ID of the comment identified as a duplicate."
        },
        {
            "type": "array",
            "name": "$commentdata",
            "description": "Data for the comment being created."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 672,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_approved",
    "type": "filter",
    "params_count": 2,
    "description": "Filters a comment's approval status before it is set.",
    "params": [
        {
            "type": "bool|string|WP_Error",
            "name": "$approved",
            "description": "The approval status. Accepts 1, 0, 'spam' or WP_Error."
        },
        {
            "type": "array",
            "name": "$commentdata",
            "description": "Comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 792,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_flood_filter",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment flood status.",
    "params": [
        {
            "type": "bool",
            "name": "$bool",
            "description": "Whether a comment flood is occurring. Default false."
        },
        {
            "type": "int",
            "name": "$time_lastcomment",
            "description": "Timestamp of when the last comment was posted."
        },
        {
            "type": "int",
            "name": "$time_newcomment",
            "description": "Timestamp of when the new comment was posted."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 871,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "get_page_of_comment",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the calculated page on which a comment appears.",
    "params": [
        {
            "type": "int",
            "name": "$page",
            "description": "Comment page."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "{"
        },
        {
            "type": "array",
            "name": "$original_args",
            "description": "{"
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "ID of the comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1089,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_get_comment_fields_max_lengths",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the lengths for the comment form fields.",
    "params": [
        {
            "type": "array",
            "name": "$lengths",
            "description": "Associative array `'field_name' => 'maximum length'`."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1144,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_count_comments",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comments count for a given post.",
    "params": [
        {
            "type": "array",
            "name": "$count",
            "description": "An empty array."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1267,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_get_current_commenter",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the current commenter's name, email, and URL.",
    "params": [
        {
            "type": "array",
            "name": "$comment_author_data",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1717,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_user_id",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment author's user id before it is set.",
    "params": [
        {
            "type": "int",
            "name": "$user_ID",
            "description": "The comment author's user ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1840,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_user_agent",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment author's browser user agent before it is set.",
    "params": [
        {
            "type": "string",
            "name": "$comment_agent",
            "description": "The comment author's browser user agent."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1853,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_content",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment content before it is set.",
    "params": [
        {
            "type": "string",
            "name": "$comment_content",
            "description": "The comment content."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1863,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_user_ip",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment author's IP address before it is set.",
    "params": [
        {
            "type": "string",
            "name": "$comment_author_ip",
            "description": "The comment author's IP address."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1871,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "preprocess_comment",
    "type": "filter",
    "params_count": 1,
    "description": "Filters a comment's data before it is sanitized and inserted into the database.",
    "params": [
        {
            "type": "array",
            "name": "$commentdata",
            "description": "Comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1958,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "notify_post_author",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to send the post author new comment notification emails,",
    "params": [
        {
            "type": "bool",
            "name": "$maybe_notify",
            "description": "Whether to notify the post author about the new comment."
        },
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The ID of the comment for the notification."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2083,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_save_pre",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment content before it is updated in the database.",
    "params": [
        {
            "type": "string",
            "name": "$comment_content",
            "description": "The comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2218,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_update_comment_data",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the comment data immediately before it is updated in the database.",
    "params": [
        {
            "type": "array",
            "name": "$data",
            "description": "The new, processed comment data."
        },
        {
            "type": "array",
            "name": "$comment",
            "description": "The old, unslashed comment data."
        },
        {
            "type": "array",
            "name": "$commentarr",
            "description": "The new, raw comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2244,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_wp_update_comment_count_now",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a post's comment count before it is updated in the database.",
    "params": [
        {
            "type": "int",
            "name": "$new",
            "description": "The new comment count. Default null."
        },
        {
            "type": "int",
            "name": "$old",
            "description": "The old comment count."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2384,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pingback_useragent",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the user agent sent when pinging-back a URL.",
    "params": [
        {
            "type": "string",
            "name": "$concat_useragent",
            "description": "The user agent concatenated with ' -- WordPress\/'"
        },
        {
            "type": "string",
            "name": "$useragent",
            "description": "The useragent."
        },
        {
            "type": "string",
            "name": "$pingback_server_url",
            "description": "The server URL being linked to."
        },
        {
            "type": "string",
            "name": "$pagelinkedto",
            "description": "URL of page linked to."
        },
        {
            "type": "string",
            "name": "$pagelinkedfrom",
            "description": "URL of page linked from."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2680,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "close_comments_for_post_types",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of post types to automatically close comments for.",
    "params": [
        {
            "type": "array",
            "name": "$post_types",
            "description": "An array of registered post types. Default array with 'post'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2902,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "close_comments_for_post_types",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of post types to automatically close comments for.",
    "params": [
        {
            "type": "array",
            "name": "$post_types",
            "description": "An array of registered post types. Default array with 'post'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2902,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_anonymize_comment",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to anonymize the comment.",
    "params": [
        {
            "type": "bool|string                    Whether to apply the comment anonymization (bool).",
            "name": "$bool|string",
            "description": "Whether to apply the comment anonymization (bool)."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "WP_Comment object."
        },
        {
            "type": "array",
            "name": "$anonymized_comment",
            "description": "Anonymized comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3352,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_duplicate_trigger",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a duplicate comment is detected.",
    "params": [
        {
            "type": "array",
            "name": "$commentdata",
            "description": "Comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 682,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_flood_trigger",
    "type": "action",
    "params_count": 2,
    "description": "Fires before the comment flood message is triggered.",
    "params": [
        {
            "type": "int",
            "name": "$time_lastcomment",
            "description": "Timestamp of when the last comment was posted."
        },
        {
            "type": "int",
            "name": "$time_newcomment",
            "description": "Timestamp of when the new comment was posted."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 881,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_blacklist_check",
    "type": "action",
    "params_count": 6,
    "description": "Fires before the comment is tested for blacklisted characters or words.",
    "params": [
        {
            "type": "string",
            "name": "$author",
            "description": "Comment author."
        },
        {
            "type": "string",
            "name": "$email",
            "description": "Comment author's email."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "Comment author's URL."
        },
        {
            "type": "string",
            "name": "$comment",
            "description": "Comment content."
        },
        {
            "type": "string",
            "name": "$user_ip",
            "description": "Comment author's IP address."
        },
        {
            "type": "string",
            "name": "$user_agent",
            "description": "Comment author's browser user agent."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1204,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "delete_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before a comment is deleted from the database.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment to be deleted."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1321,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "deleted_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a comment is deleted from the database.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The deleted comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1347,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "trash_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before a comment is sent to the Trash.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment to be trashed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1388,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "trashed_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a comment is sent to Trash.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The trashed comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1405,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "untrash_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before a comment is restored from the Trash.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment to be untrashed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1435,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "untrashed_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a comment is restored from the Trash.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The untrashed comment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1453,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "spam_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before a comment is marked as Spam.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment to be marked as spam."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1483,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "spammed_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a comment is marked as Spam.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment marked as spam."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1499,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "unspam_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before a comment is unmarked as Spam.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment to be unmarked as spam."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1529,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "unspammed_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a comment is unmarked as Spam.",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment unmarked as spam."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1547,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "transition_comment_status",
    "type": "action",
    "params_count": 3,
    "description": "Fires when the comment status is in transition.",
    "params": [
        {
            "type": "int|string",
            "name": "$new_status",
            "description": "The new comment status."
        },
        {
            "type": "int|string",
            "name": "$old_status",
            "description": "The old comment status."
        },
        {
            "type": "object",
            "name": "$comment",
            "description": "The comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1627,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_insert_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a comment is inserted into the database.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "The comment ID."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "Comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1811,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_post",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a comment is inserted into the database.",
    "params": [
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "int|string",
            "name": "$comment_approved",
            "description": "1 if the comment is approved, 0 if not, 'spam' if spam."
        },
        {
            "type": "array",
            "name": "$commentdata",
            "description": "Comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2029,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_set_comment_status",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before transitioning a comment's status from one to another",
    "params": [
        {
            "type": "int",
            "name": "$comment_id",
            "description": "Comment ID."
        },
        {
            "type": "string|bool",
            "name": "$comment_status",
            "description": "Current comment status. Possible values include"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2162,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "edit_comment",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a comment is updated in the database.",
    "params": [
        {
            "type": "int",
            "name": "$comment_ID",
            "description": "The comment ID."
        },
        {
            "type": "array",
            "name": "$data",
            "description": "Comment data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2271,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "wp_update_comment_count",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a post's comment count is updated in the database.",
    "params": [
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "int",
            "name": "$new",
            "description": "The new comment count."
        },
        {
            "type": "int",
            "name": "$old",
            "description": "The old comment count."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2405,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_ping",
    "type": "action",
    "params_count": 3,
    "description": "Fires just before pinging back links found in a post.",
    "params": [
        {
            "type": "array",
            "name": "$post_links",
            "description": "An array of post links to be checked (passed by reference)."
        },
        {
            "type": "array",
            "name": "$pung",
            "description": "Whether a link has already been pinged (passed by reference)."
        },
        {
            "type": "int",
            "name": "$post_ID",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2655,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "clean_comment_cache",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a comment has been removed from the object cache.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Comment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2821,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_id_not_found",
    "type": "action",
    "params_count": 1,
    "description": "Fires when a comment is attempted on a post that does not exist.",
    "params": [
        {
            "type": "int",
            "name": "$comment_post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3013,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_closed",
    "type": "action",
    "params_count": 1,
    "description": "Fires when a comment is attempted on a post that has comments closed.",
    "params": [
        {
            "type": "int",
            "name": "$comment_post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3037,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_on_trash",
    "type": "action",
    "params_count": 1,
    "description": "Fires when a comment is attempted on a trashed post.",
    "params": [
        {
            "type": "int",
            "name": "$comment_post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3050,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_on_draft",
    "type": "action",
    "params_count": 1,
    "description": "Fires when a comment is attempted on a post in draft mode.",
    "params": [
        {
            "type": "int",
            "name": "$comment_post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3063,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "comment_on_password_protected",
    "type": "action",
    "params_count": 1,
    "description": "Fires when a comment is attempted on a password-protected post.",
    "params": [
        {
            "type": "int",
            "name": "$comment_post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3080,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "pre_comment_on_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a comment is posted.",
    "params": [
        {
            "type": "int",
            "name": "$comment_post_ID",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3093,
        "name": "wp-includes\/comment.php"
    }
},
{
    "text": "customize_nav_menu_available_items",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the available menu items.",
    "params": [
        {
            "type": "array",
            "name": "$items",
            "description": "The array of menu items."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The object type."
        },
        {
            "type": "string",
            "name": "$object",
            "description": "The object name."
        },
        {
            "type": "int",
            "name": "$page",
            "description": "The current page number."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 246,
        "name": "wp-includes\/class-wp-customize-nav-menus.php"
    }
},
{
    "text": "customize_nav_menu_searched_items",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the available menu items during a search request.",
    "params": [
        {
            "type": "array",
            "name": "$items",
            "description": "The array of menu items."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "Includes 'pagenum' and 's' (search) arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 397,
        "name": "wp-includes\/class-wp-customize-nav-menus.php"
    }
},
{
    "text": "customize_nav_menu_available_item_types",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the available menu item types.",
    "params": [
        {
            "type": "array",
            "name": "$item_types",
            "description": "Navigation menu item types."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 783,
        "name": "wp-includes\/class-wp-customize-nav-menus.php"
    }
},
{
    "text": "wp_nav_menu_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used to display a navigation menu.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Array of wp_nav_menu() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 71,
        "name": "wp-includes\/nav-menu-template.php"
    }
},
{
    "text": "pre_wp_nav_menu",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to short-circuit the wp_nav_menu() output.",
    "params": [
        {
            "type": "string|null",
            "name": "$output",
            "description": "Nav menu output to short-circuit with. Default null."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object containing wp_nav_menu() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 88,
        "name": "wp-includes\/nav-menu-template.php"
    }
},
{
    "text": "wp_nav_menu_container_allowedtags",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of HTML tags that are valid for use as menu containers.",
    "params": [
        {
            "type": "array",
            "name": "$tags",
            "description": "The acceptable HTML tags for use as menu containers."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 152,
        "name": "wp-includes\/nav-menu-template.php"
    }
},
{
    "text": "wp_nav_menu_objects",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the sorted list of menu item objects before generating the menu's HTML.",
    "params": [
        {
            "type": "array",
            "name": "$sorted_menu_items",
            "description": "The menu items, sorted by each menu item's menu order."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object containing wp_nav_menu() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 189,
        "name": "wp-includes\/nav-menu-template.php"
    }
},
{
    "text": "wp_nav_menu_items",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the HTML list content for navigation menus.",
    "params": [
        {
            "type": "string",
            "name": "$items",
            "description": "The HTML list content for the menu items."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object containing wp_nav_menu() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 220,
        "name": "wp-includes\/nav-menu-template.php"
    }
},
{
    "text": "wp_nav_menu",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the HTML content for navigation menus.",
    "params": [
        {
            "type": "string",
            "name": "$nav_menu",
            "description": "The HTML content for the navigation menu."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object containing wp_nav_menu() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 253,
        "name": "wp-includes\/nav-menu-template.php"
    }
},
{
    "text": "nav_menu_submenu_css_class",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the CSS class(es) applied to a menu list element.",
    "params": [
        {
            "type": "array",
            "name": "$classes",
            "description": "The CSS classes that are applied to the menu `<ul>` element."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object of `wp_nav_menu()` arguments."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of menu item. Used for padding."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 72,
        "name": "wp-includes\/class-walker-nav-menu.php"
    }
},
{
    "text": "nav_menu_item_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the arguments for a single nav menu item.",
    "params": [
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object of wp_nav_menu() arguments."
        },
        {
            "type": "WP_Post",
            "name": "$item",
            "description": "Menu item data object."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of menu item. Used for padding."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 137,
        "name": "wp-includes\/class-walker-nav-menu.php"
    }
},
{
    "text": "nav_menu_css_class",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the CSS class(es) applied to a menu item's list item element.",
    "params": [
        {
            "type": "array",
            "name": "$classes",
            "description": "The CSS classes that are applied to the menu item's `<li>` element."
        },
        {
            "type": "WP_Post",
            "name": "$item",
            "description": "The current menu item."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object of wp_nav_menu() arguments."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of menu item. Used for padding."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 150,
        "name": "wp-includes\/class-walker-nav-menu.php"
    }
},
{
    "text": "nav_menu_item_id",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the ID applied to a menu item's list item element.",
    "params": [
        {
            "type": "string",
            "name": "$menu_id",
            "description": "The ID that is applied to the menu item's `<li>` element."
        },
        {
            "type": "WP_Post",
            "name": "$item",
            "description": "The current menu item."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object of wp_nav_menu() arguments."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of menu item. Used for padding."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 164,
        "name": "wp-includes\/class-walker-nav-menu.php"
    }
},
{
    "text": "nav_menu_link_attributes",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the HTML attributes applied to a menu item's anchor element.",
    "params": [
        {
            "type": "array",
            "name": "$atts",
            "description": "{"
        },
        {
            "type": "WP_Post",
            "name": "$item",
            "description": "The current menu item."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object of wp_nav_menu() arguments."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of menu item. Used for padding."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 193,
        "name": "wp-includes\/class-walker-nav-menu.php"
    }
},
{
    "text": "nav_menu_item_title",
    "type": "filter",
    "params_count": 4,
    "description": "Filters a menu item's title.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "The menu item's title."
        },
        {
            "type": "WP_Post",
            "name": "$item",
            "description": "The current menu item."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object of wp_nav_menu() arguments."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of menu item. Used for padding."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 216,
        "name": "wp-includes\/class-walker-nav-menu.php"
    }
},
{
    "text": "walker_nav_menu_start_el",
    "type": "filter",
    "params_count": 4,
    "description": "Filters a menu item's starting output.",
    "params": [
        {
            "type": "string",
            "name": "$item_output",
            "description": "The menu item's starting HTML output."
        },
        {
            "type": "WP_Post",
            "name": "$item",
            "description": "Menu item data object."
        },
        {
            "type": "int",
            "name": "$depth",
            "description": "Depth of menu item. Used for padding."
        },
        {
            "type": "stdClass",
            "name": "$args",
            "description": "An object of wp_nav_menu() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 238,
        "name": "wp-includes\/class-walker-nav-menu.php"
    }
},
{
    "text": "get_meta_sql",
    "type": "filter",
    "params_count": 6,
    "description": "Filters the meta query's generated SQL.",
    "params": [
        {
            "type": "array",
            "name": "$clauses",
            "description": "Array containing the query's JOIN and WHERE clauses."
        },
        {
            "type": "array",
            "name": "$queries",
            "description": "Array of meta queries."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Type of meta."
        },
        {
            "type": "string",
            "name": "$primary_table",
            "description": "Primary table."
        },
        {
            "type": "string",
            "name": "$primary_id_column",
            "description": "Primary column ID."
        },
        {
            "type": "object",
            "name": "$context",
            "description": "The main query object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 343,
        "name": "wp-includes\/class-wp-meta-query.php"
    }
},
{
    "text": "meta_query_find_compatible_table_alias",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the table alias identified as compatible with the current clause.",
    "params": [
        {
            "type": "string|bool",
            "name": "$alias",
            "description": "Table alias, or false if none was found."
        },
        {
            "type": "array",
            "name": "$clause",
            "description": "First-order query clause."
        },
        {
            "type": "array",
            "name": "$parent_query",
            "description": "Parent of $clause."
        },
        {
            "type": "object",
            "name": "$this",
            "description": "WP_Meta_Query object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 713,
        "name": "wp-includes\/class-wp-meta-query.php"
    }
},
{
    "text": "widget_display_callback",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the settings for a particular widget instance.",
    "params": [
        {
            "type": "array",
            "name": "$instance",
            "description": "The current widget instance's settings."
        },
        {
            "type": "WP_Widget",
            "name": "$this",
            "description": "The current widget instance."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of default widget arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 361,
        "name": "wp-includes\/class-wp-widget.php"
    }
},
{
    "text": "widget_update_callback",
    "type": "filter",
    "params_count": 4,
    "description": "Filters a widget's settings before saving.",
    "params": [
        {
            "type": "array",
            "name": "$instance",
            "description": "The current widget instance's settings."
        },
        {
            "type": "array",
            "name": "$new_instance",
            "description": "Array of new widget settings."
        },
        {
            "type": "array",
            "name": "$old_instance",
            "description": "Array of old widget settings."
        },
        {
            "type": "WP_Widget",
            "name": "$this",
            "description": "The current widget instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 451,
        "name": "wp-includes\/class-wp-widget.php"
    }
},
{
    "text": "widget_form_callback",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the widget instance's settings before displaying the control form.",
    "params": [
        {
            "type": "array",
            "name": "$instance",
            "description": "The current widget instance's settings."
        },
        {
            "type": "WP_Widget",
            "name": "$this",
            "description": "The current widget instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 503,
        "name": "wp-includes\/class-wp-widget.php"
    }
},
{
    "text": "in_widget_form",
    "type": "action",
    "params_count": 3,
    "description": "Fires at the end of the widget control form.",
    "params": [
        {
            "type": "WP_Widget",
            "name": "$this",
            "description": "The widget instance (passed by reference)."
        },
        {
            "type": "null",
            "name": "$return",
            "description": "Return null if new fields are added."
        },
        {
            "type": "array",
            "name": "$instance",
            "description": "An array of the widget's settings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 525,
        "name": "wp-includes\/class-wp-widget.php"
    }
},
{
    "text": "wp_xmlrpc_server_class",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the class used for handling XML-RPC requests.",
    "params": [
        {
            "type": "string",
            "name": "$class",
            "description": "The name of the XML-RPC server class."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 80,
        "name": "xmlrpc.php"
    }
},
{
    "text": "xmlrpc_rsd_apis",
    "type": "action",
    "params_count": 0,
    "description": "Add additional APIs to the Really Simple Discovery (RSD) endpoint.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 53,
        "name": "xmlrpc.php"
    }
},
{
    "text": "comment_post_redirect",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the location URI to send the commenter after posting.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The 'redirect_to' URI sent via $_POST."
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "Comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 60,
        "name": "wp-comments-post.php"
    }
},
{
    "text": "set_comment_cookies",
    "type": "action",
    "params_count": 3,
    "description": "Perform other actions when comment cookies are set.",
    "params": [
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "Comment object."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "Comment author's user object. The user may not exist."
        },
        {
            "type": "boolean",
            "name": "$cookies_consent",
            "description": "Comment author's consent to store cookies."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 48,
        "name": "wp-comments-post.php"
    }
},
{
    "text": "edit_comment_misc_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters miscellaneous actions for the edit comment form sidebar.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "Output HTML to display miscellaneous action."
        },
        {
            "type": "object",
            "name": "$comment",
            "description": "Current comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 157,
        "name": "wp-admin\/edit-form-comment.php"
    }
},
{
    "text": "add_meta_boxes_comment",
    "type": "action",
    "params_count": 1,
    "description": "Fires when comment-specific meta boxes are added.",
    "params": [
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "Comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 190,
        "name": "wp-admin\/edit-form-comment.php"
    }
},
{
    "text": "myblogs_options",
    "type": "filter",
    "params_count": 2,
    "description": "Enable the Global Settings section on the My Sites screen.",
    "params": [
        {
            "type": "string",
            "name": "$settings_html",
            "description": "The settings HTML markup. Default empty."
        },
        {
            "type": "object",
            "name": "$context",
            "description": "Context of the setting (global or site-specific). Default 'global'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 103,
        "name": "wp-admin\/my-sites.php"
    }
},
{
    "text": "myblogs_blog_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the row links displayed for each site on the My Sites screen.",
    "params": [
        {
            "type": "string",
            "name": "$actions",
            "description": "The HTML site link markup."
        },
        {
            "type": "object",
            "name": "$user_blog",
            "description": "An object containing the site data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 130,
        "name": "wp-admin\/my-sites.php"
    }
},
{
    "text": "myblogs_allblogs_options",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the sites list on the My Sites screen.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 86,
        "name": "wp-admin\/my-sites.php"
    }
},
{
    "text": "try_gutenberg_panel",
    "type": "action",
    "params_count": 0,
    "description": "Add content to the Try Gutenberg panel on the admin dashboard.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 128,
        "name": "wp-admin\/index.php"
    }
},
{
    "text": "welcome_panel",
    "type": "action",
    "params_count": 0,
    "description": "Add content to the welcome panel on the admin dashboard.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 154,
        "name": "wp-admin\/index.php"
    }
},
{
    "text": "wp_nav_locations_listed_per_menu",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of locations listed per menu in the drop-down select.",
    "params": [
        {
            "type": "int",
            "name": "$locations",
            "description": "Number of menu locations to list. Default 3."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 705,
        "name": "wp-admin\/nav-menus.php"
    }
},
{
    "text": "after_menu_locations_table",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the menu locations table is displayed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 670,
        "name": "wp-admin\/nav-menus.php"
    }
},
{
    "text": "redirect_term_location",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the taxonomy redirect destination URL.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The destination URL."
        },
        {
            "type": "object",
            "name": "$tax",
            "description": "The taxonomy object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 201,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "taxonomy_parent_dropdown_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the taxonomy parent drop-down on the Edit Term page.",
    "params": [
        {
            "type": "array",
            "name": "$dropdown_args",
            "description": "{"
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy slug."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Filter context. Accepts 'new' or 'edit'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 437,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "add_category_form_pre",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the Add Category form.",
    "params": [
        {
            "type": "object",
            "name": "$arg",
            "description": "Optional arguments cast to an object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 337,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "add_link_category_form_pre",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the link category form.",
    "params": [
        {
            "type": "object",
            "name": "$arg",
            "description": "Optional arguments cast to an object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 347,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "add_tag_form_pre",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the Add Tag form.",
    "params": [
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 357,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "add_tag_form_fields",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the Add Tag form fields for non-hierarchical taxonomies.",
    "params": [
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 463,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "edit_category_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the Edit Category form.",
    "params": [
        {
            "type": "object",
            "name": "$arg",
            "description": "Optional arguments cast to an object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 488,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "edit_link_category_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the Edit Link form.",
    "params": [
        {
            "type": "object",
            "name": "$arg",
            "description": "Optional arguments cast to an object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 498,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "add_tag_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the Add Tag form.",
    "params": [
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 508,
        "name": "wp-admin\/edit-tags.php"
    }
},
{
    "text": "admin_post_nopriv",
    "type": "action",
    "params_count": 0,
    "description": "Fires on a non-authenticated admin post request where no action was supplied.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 40,
        "name": "wp-admin\/admin-post.php"
    }
},
{
    "text": "admin_post",
    "type": "action",
    "params_count": 0,
    "description": "Fires on an authenticated admin post request where no action was supplied.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 59,
        "name": "wp-admin\/admin-post.php"
    }
},
{
    "text": "whitelist_options",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the options white list.",
    "params": [
        {
            "type": "array",
            "name": "$whitelist_options",
            "description": "White list options."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 199,
        "name": "wp-admin\/options.php"
    }
},
{
    "text": "redirect_user_admin_request",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to redirect the request to the User Admin in Multisite.",
    "params": [
        {
            "type": "bool",
            "name": "$redirect_user_admin_request",
            "description": "Whether the request should be redirected."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 27,
        "name": "wp-admin\/user\/admin.php"
    }
},
{
    "text": "customize_controls_init",
    "type": "action",
    "params_count": 0,
    "description": "Fires when Customizer controls are initialized, before scripts are enqueued.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 112,
        "name": "wp-admin\/customize.php"
    }
},
{
    "text": "customize_controls_enqueue_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Enqueue Customizer control scripts.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 123,
        "name": "wp-admin\/customize.php"
    }
},
{
    "text": "customize_controls_print_styles",
    "type": "action",
    "params_count": 0,
    "description": "Fires when Customizer control styles are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 163,
        "name": "wp-admin\/customize.php"
    }
},
{
    "text": "customize_controls_print_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Fires when Customizer control scripts are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 170,
        "name": "wp-admin\/customize.php"
    }
},
{
    "text": "customize_controls_print_footer_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Prints templates, control scripts, and settings in the footer.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 258,
        "name": "wp-admin\/customize.php"
    }
},
{
    "text": "delete_site_email_content",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the email content sent when a site in a Multisite network is deleted.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The email content that will be sent to the user who deleted a site in a Multisite network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 71,
        "name": "wp-admin\/ms-delete-site.php"
    }
},
{
    "text": "admin_title",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the title tag content for an admin page.",
    "params": [
        {
            "type": "string",
            "name": "$admin_title",
            "description": "The page title, with extra context added."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "The original page title."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 61,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "admin_body_class",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the CSS classes for the body tag in the admin.",
    "params": [
        {
            "type": "string",
            "name": "$classes",
            "description": "Space-separated list of CSS classes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 195,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "admin_enqueue_scripts",
    "type": "action",
    "params_count": 1,
    "description": "Enqueue scripts for all admin pages.",
    "params": [
        {
            "type": "string",
            "name": "$hook_suffix",
            "description": "The current admin page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 97,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "admin_print_styles",
    "type": "action",
    "params_count": 0,
    "description": "Fires when styles are printed for all admin pages.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 111,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "admin_print_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Fires when scripts are printed for all admin pages.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 125,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "admin_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires in head section for all admin pages.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 142,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "in_admin_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the beginning of the content section in an admin page.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 219,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "network_admin_notices",
    "type": "action",
    "params_count": 0,
    "description": "Prints network admin screen notices.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 241,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "user_admin_notices",
    "type": "action",
    "params_count": 0,
    "description": "Prints user admin screen notices.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 248,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "admin_notices",
    "type": "action",
    "params_count": 0,
    "description": "Prints admin screen notices.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 255,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "all_admin_notices",
    "type": "action",
    "params_count": 0,
    "description": "Prints generic admin screen notices.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 263,
        "name": "wp-admin\/admin-header.php"
    }
},
{
    "text": "parent_file",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the parent file of an admin menu sub-menu item.",
    "params": [
        {
            "type": "string",
            "name": "$parent_file",
            "description": "The parent file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 38,
        "name": "wp-admin\/menu-header.php"
    }
},
{
    "text": "submenu_file",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the file of an admin menu sub-menu item.",
    "params": [
        {
            "type": "string",
            "name": "$submenu_file",
            "description": "The submenu file."
        },
        {
            "type": "string",
            "name": "$parent_file",
            "description": "The submenu item's parent file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 48,
        "name": "wp-admin\/menu-header.php"
    }
},
{
    "text": "adminmenu",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the admin menu has been output.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 270,
        "name": "wp-admin\/menu-header.php"
    }
},
{
    "text": "export_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the export args.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "The arguments to send to the exporter."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 112,
        "name": "wp-admin\/export.php"
    }
},
{
    "text": "export_filters",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the export filters form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 287,
        "name": "wp-admin\/export.php"
    }
},
{
    "text": "delete_user_form",
    "type": "action",
    "params_count": 2,
    "description": "Fires at the end of the delete users form prior to the confirm button.",
    "params": [
        {
            "type": "WP_User",
            "name": "$current_user",
            "description": "WP_User object for the current user."
        },
        {
            "type": "array",
            "name": "$userids",
            "description": "Array of IDs for users being deleted."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 292,
        "name": "wp-admin\/users.php"
    }
},
{
    "text": "core_upgrade_preamble",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the core, plugin, and theme update tables.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 639,
        "name": "wp-admin\/update-core.php"
    }
},
{
    "text": "add_meta_boxes_link",
    "type": "action",
    "params_count": 1,
    "description": "Fires when link-specific meta boxes are added.",
    "params": [
        {
            "type": "object",
            "name": "$link",
            "description": "Link object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 43,
        "name": "wp-admin\/edit-link-form.php"
    }
},
{
    "text": "bulk_post_updated_messages",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the bulk action updated messages.",
    "params": [
        {
            "type": "array",
            "name": "$bulk_messages",
            "description": "Arrays of messages, each keyed by the corresponding post type. Messages are"
        },
        {
            "type": "array",
            "name": "$bulk_counts",
            "description": "Array of item counts for each message, used to build internationalized strings."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 300,
        "name": "wp-admin\/edit.php"
    }
},
{
    "text": "user_profile_picture_description",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the user profile picture description displayed under the Gravatar.",
    "params": [
        {
            "type": "string",
            "name": "$description",
            "description": "The description that will be printed."
        },
        {
            "type": "WP_User",
            "name": "$profileuser",
            "description": "The current WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 548,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "personal_options_update",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the page loads on the 'Your Profile' editing screen.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 132,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "edit_user_profile_update",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the page loads on the 'Edit User' screen.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 141,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "user_edit_form_tag",
    "type": "action",
    "params_count": 0,
    "description": "Fires inside the your-profile form tag on the user editing screen.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 230,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "admin_color_scheme_picker",
    "type": "action",
    "params_count": 1,
    "description": "Fires in the 'Admin Color Scheme' section of the user editing screen.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "The user ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 285,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "personal_options",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the 'Personal Options' settings table on the user editing screen.",
    "params": [
        {
            "type": "WP_User",
            "name": "$profileuser",
            "description": "The current WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 347,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "profile_personal_options",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the 'Personal Options' settings table on the 'Your Profile' editing screen.",
    "params": [
        {
            "type": "WP_User",
            "name": "$profileuser",
            "description": "The current WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 362,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "show_user_profile",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the 'About Yourself' settings table on the 'Your Profile' editing screen.",
    "params": [
        {
            "type": "WP_User",
            "name": "$profileuser",
            "description": "The current WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 658,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "edit_user_profile",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the 'About the User' settings table on the 'Edit User' screen.",
    "params": [
        {
            "type": "WP_User",
            "name": "$profileuser",
            "description": "The current WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 667,
        "name": "wp-admin\/user-edit.php"
    }
},
{
    "text": "post_updated_messages",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post updated messages.",
    "params": [
        {
            "type": "array",
            "name": "$messages",
            "description": "Post updated messages. For defaults @see $messages declarations above."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 183,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "enter_title_here",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the title field placeholder text.",
    "params": [
        {
            "type": "string",
            "name": "$text",
            "description": "Placeholder text. Default 'Enter title here'."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 571,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "dbx_post_advanced",
    "type": "action",
    "params_count": 1,
    "description": "Fires in the middle of built-in meta box registration.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 297,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "add_meta_boxes",
    "type": "action",
    "params_count": 2,
    "description": "Fires after all built-in meta boxes have been added.",
    "params": [
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 334,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "do_meta_boxes",
    "type": "action",
    "params_count": 3,
    "description": "Fires after meta boxes have been added.",
    "params": [
        {
            "type": "string",
            "name": "$post_type",
            "description": "Post type of the post."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "string  Meta box context."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 358,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "post_edit_form_tag",
    "type": "action",
    "params_count": 1,
    "description": "Fires inside the post editor form tag.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 518,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "edit_form_top",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the beginning of the edit form.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 553,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "edit_form_before_permalink",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the permalink field in the edit form.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 584,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "edit_form_after_title",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the title field.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 627,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "edit_form_after_editor",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the content editor.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 674,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "submitpage_box",
    "type": "action",
    "params_count": 1,
    "description": "Fires before meta boxes with 'side' context are output for the 'page' post type.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 691,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "submitpost_box",
    "type": "action",
    "params_count": 1,
    "description": "Fires before meta boxes with 'side' context are output for all post types other than 'page'.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 703,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "edit_page_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires after 'normal' context meta boxes have been output for the 'page' post type.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 724,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "edit_form_advanced",
    "type": "action",
    "params_count": 1,
    "description": "Fires after 'normal' context meta boxes have been output for all post types other than 'page'.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 734,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "dbx_post_sidebar",
    "type": "action",
    "params_count": 1,
    "description": "Fires after all meta box sections have been output, before the closing #post-body div.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 750,
        "name": "wp-admin\/edit-form-advanced.php"
    }
},
{
    "text": "blog_privacy_selector",
    "type": "action",
    "params_count": 0,
    "description": "Enable the legacy 'Site Visibility' privacy options.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 133,
        "name": "wp-admin\/options-reading.php"
    }
},
{
    "text": "pre_current_active_plugins",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the plugins list table is rendered.",
    "params": [
        {
            "type": "array",
            "name": "$plugins_all",
            "description": "An array containing all installed plugins."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 557,
        "name": "wp-admin\/plugins.php"
    }
},
{
    "text": "tables_to_repair",
    "type": "filter",
    "params_count": 1,
    "description": "Filters additional database tables to repair.",
    "params": [
        {
            "type": "array",
            "name": "$tables",
            "description": "Array of prefixed table names to be repaired."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 95,
        "name": "wp-admin\/maint\/repair.php"
    }
},
{
    "text": "thread_comments_depth_max",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the maximum depth of threaded\/nested comments.",
    "params": [
        {
            "type": "int",
            "name": "$max_depth",
            "description": "The maximum depth of threaded comments. Default 10."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 97,
        "name": "wp-admin\/options-discussion.php"
    }
},
{
    "text": "avatar_defaults",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default avatars.",
    "params": [
        {
            "type": "array",
            "name": "$avatar_defaults",
            "description": "Array of default avatars."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 254,
        "name": "wp-admin\/options-discussion.php"
    }
},
{
    "text": "default_avatar_select",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the HTML output of the default avatar list.",
    "params": [
        {
            "type": "string",
            "name": "$avatar_list",
            "description": "HTML markup of the avatar list."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 278,
        "name": "wp-admin\/options-discussion.php"
    }
},
{
    "text": "tool_box",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the Tools Administration screen.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 71,
        "name": "wp-admin\/tools.php"
    }
},
{
    "text": "wpmuadminedit",
    "type": "action",
    "params_count": 0,
    "description": "Fires just before the action handler in several Network Admin screens.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 26,
        "name": "wp-admin\/network\/edit.php"
    }
},
{
    "text": "pre_network_site_new_created_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before a new user is created via the network site-new.php page.",
    "params": [
        {
            "type": "string",
            "name": "$email",
            "description": "Email of the non-existent user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 109,
        "name": "wp-admin\/network\/site-new.php"
    }
},
{
    "text": "network_site_new_created_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a new user has been created via the network site-new.php page.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the newly created user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 128,
        "name": "wp-admin\/network\/site-new.php"
    }
},
{
    "text": "network_site_new_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the new site form in network admin.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 262,
        "name": "wp-admin\/network\/site-new.php"
    }
},
{
    "text": "activate_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a network site is activated.",
    "params": [
        {
            "type": "string",
            "name": "$id",
            "description": "The ID of the activated site."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 236,
        "name": "wp-admin\/network\/sites.php"
    }
},
{
    "text": "deactivate_blog",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a network site is deactivated.",
    "params": [
        {
            "type": "string",
            "name": "$id",
            "description": "The ID of the site being deactivated."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 247,
        "name": "wp-admin\/network\/sites.php"
    }
},
{
    "text": "after_mu_upgrade",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the Multisite DB upgrade for each site is complete.",
    "params": [
        {
            "type": "array|WP_Error",
            "name": "$response",
            "description": "The upgrade response array or WP_Error on failure."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 101,
        "name": "wp-admin\/network\/upgrade.php"
    }
},
{
    "text": "wpmu_upgrade_site",
    "type": "action",
    "params_count": 1,
    "description": "Fires after each site has been upgraded.",
    "params": [
        {
            "type": "int",
            "name": "$site_id",
            "description": "The Site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 109,
        "name": "wp-admin\/network\/upgrade.php"
    }
},
{
    "text": "wpmu_upgrade_page",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the footer on the network upgrade screen.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 138,
        "name": "wp-admin\/network\/upgrade.php"
    }
},
{
    "text": "redirect_network_admin_request",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to redirect the request to the Network Admin.",
    "params": [
        {
            "type": "bool",
            "name": "$redirect_network_admin_request",
            "description": "Whether the request should be redirected."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 29,
        "name": "wp-admin\/network\/admin.php"
    }
},
{
    "text": "network_user_new_created_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a new user has been created via the network user-new.php page.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the newly created user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 58,
        "name": "wp-admin\/network\/user-new.php"
    }
},
{
    "text": "network_user_new_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the new user form in network admin.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 126,
        "name": "wp-admin\/network\/user-new.php"
    }
},
{
    "text": "wpmu_update_blog_options",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the site options are updated.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "The ID of the site being updated."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 56,
        "name": "wp-admin\/network\/site-settings.php"
    }
},
{
    "text": "wpmueditblogaction",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the Edit Site form, before the submit button.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "Site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 149,
        "name": "wp-admin\/network\/site-settings.php"
    }
},
{
    "text": "network_site_users_created_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a user has been created via the network site-users.php page.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the newly created user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 82,
        "name": "wp-admin\/network\/site-users.php"
    }
},
{
    "text": "network_site_users_after_list_table",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the list table on the Users screen in the Multisite Network Admin.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 286,
        "name": "wp-admin\/network\/site-users.php"
    }
},
{
    "text": "mu_menu_items",
    "type": "filter",
    "params_count": 1,
    "description": "Filters available network-wide administration menu options.",
    "params": [
        {
            "type": "array",
            "name": "$admin_menus",
            "description": "The menu items available."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 417,
        "name": "wp-admin\/network\/settings.php"
    }
},
{
    "text": "update_wpmu_options",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the network options are updated.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 105,
        "name": "wp-admin\/network\/settings.php"
    }
},
{
    "text": "wpmu_options",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the Network Settings form, before the submit button.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 438,
        "name": "wp-admin\/network\/settings.php"
    }
},
{
    "text": "media_upload_default_type",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default media upload type in the legacy (pre-3.5.0) media popup.",
    "params": [
        {
            "type": "string",
            "name": "$type",
            "description": "The default media upload type. Possible values include"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 63,
        "name": "wp-admin\/media-upload.php"
    }
},
{
    "text": "media_upload_default_tab",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default tab in the legacy (pre-3.5.0) media popup.",
    "params": [
        {
            "type": "string",
            "name": "$type",
            "description": "The default media popup tab. Default 'type' (From Computer)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 77,
        "name": "wp-admin\/media-upload.php"
    }
},
{
    "text": "after_db_upgrade",
    "type": "action",
    "params_count": 0,
    "description": "Fires on the next page load after a successful DB upgrade.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 44,
        "name": "wp-admin\/admin.php"
    }
},
{
    "text": "admin_init",
    "type": "action",
    "params_count": 0,
    "description": "Fires as an admin screen or script is being initialized.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 156,
        "name": "wp-admin\/admin.php"
    }
},
{
    "text": "load-page-new.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires before a particular screen is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 340,
        "name": "wp-admin\/admin.php"
    }
},
{
    "text": "load-page.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires before a particular screen is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 342,
        "name": "wp-admin\/admin.php"
    }
},
{
    "text": "load-categories.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires before a particular screen is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 345,
        "name": "wp-admin\/admin.php"
    }
},
{
    "text": "load-edit-link-categories.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires before a particular screen is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 347,
        "name": "wp-admin\/admin.php"
    }
},
{
    "text": "load-edit-tags.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires before a particular screen is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 349,
        "name": "wp-admin\/admin.php"
    }
},
{
    "text": "pre_user_login",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the user_login, also known as the username, before it is added to the site.",
    "params": [
        {
            "type": "string",
            "name": "$user_login",
            "description": "The sanitized username."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 154,
        "name": "wp-admin\/user-new.php"
    }
},
{
    "text": "invite_user",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a user is invited to join a site, but before the notification is sent.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "The invited user's ID."
        },
        {
            "type": "array",
            "name": "$role",
            "description": "The role of invited user."
        },
        {
            "type": "string",
            "name": "$newuser_key",
            "description": "The key of the invitation."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 93,
        "name": "wp-admin\/user-new.php"
    }
},
{
    "text": "user_new_form_tag",
    "type": "action",
    "params_count": 0,
    "description": "Fires inside the adduser form tag.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 345,
        "name": "wp-admin\/user-new.php"
    }
},
{
    "text": "user_new_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the new user form.",
    "params": [
        {
            "type": "string",
            "name": "$type",
            "description": "A contextual string specifying which type of new user form the hook follows."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 384,
        "name": "wp-admin\/user-new.php"
    }
},
{
    "text": "user_new_form_tag",
    "type": "action",
    "params_count": 0,
    "description": "Fires inside the adduser form tag.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 345,
        "name": "wp-admin\/user-new.php"
    }
},
{
    "text": "date_formats",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the default date formats.",
    "params": [
        {
            "type": "array",
            "name": "$default_date_formats",
            "description": "Array of default date formats."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 299,
        "name": "wp-admin\/options-general.php"
    }
},
{
    "text": "time_formats",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the default time formats.",
    "params": [
        {
            "type": "array",
            "name": "$default_time_formats",
            "description": "Array of default time formats."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 336,
        "name": "wp-admin\/options-general.php"
    }
},
{
    "text": "admin_footer_text",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the \"Thank you\" text displayed in the admin footer.",
    "params": [
        {
            "type": "string",
            "name": "$text",
            "description": "The content that will be printed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 42,
        "name": "wp-admin\/admin-footer.php"
    }
},
{
    "text": "update_footer",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the version\/update text displayed in the admin footer.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The content that will be printed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 59,
        "name": "wp-admin\/admin-footer.php"
    }
},
{
    "text": "in_admin_footer",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the opening tag for the admin footer.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 30,
        "name": "wp-admin\/admin-footer.php"
    }
},
{
    "text": "admin_footer",
    "type": "action",
    "params_count": 1,
    "description": "Prints scripts or data before the default footer scripts.",
    "params": [
        {
            "type": "string",
            "name": "$data",
            "description": "The data to print."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 72,
        "name": "wp-admin\/admin-footer.php"
    }
},
{
    "text": "admin_print_footer_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Prints any scripts and data queued for the footer.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 89,
        "name": "wp-admin\/admin-footer.php"
    }
},
{
    "text": "install_themes_tabs",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the tabs shown on the Add Themes screen.",
    "params": [
        {
            "type": "array",
            "name": "$tabs",
            "description": "The tabs shown on the Add Themes screen. Default is 'upload'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 141,
        "name": "wp-admin\/theme-install.php"
    }
},
{
    "text": "available_permalink_structure_tags",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of available permalink structure tags on the Permalinks settings page.",
    "params": [
        {
            "type": "array",
            "name": "$available_tags",
            "description": "A key => value pair of available permalink structure tags."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 246,
        "name": "wp-admin\/options-permalink.php"
    }
},
{
    "text": "editable_slug",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the editable slug.",
    "params": [
        {
            "type": "string",
            "name": "$slug",
            "description": "The editable slug. Will be either a term slug or post URI depending"
        },
        {
            "type": "object|WP_Post",
            "name": "$tag",
            "description": "Term or WP_Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 140,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "edit_category_form_pre",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the Edit Category form.",
    "params": [
        {
            "type": "object",
            "name": "$tag",
            "description": "Current category term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 24,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "edit_link_category_form_pre",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the Edit Link Category form.",
    "params": [
        {
            "type": "object",
            "name": "$tag",
            "description": "Current link category term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 34,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "edit_tag_form_pre",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the Edit Tag form.",
    "params": [
        {
            "type": "object",
            "name": "$tag",
            "description": "Current tag term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 44,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "edit_category_form_fields",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the Edit Category form fields are displayed.",
    "params": [
        {
            "type": "object",
            "name": "$tag",
            "description": "Current category term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 190,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "edit_link_category_form_fields",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the Edit Link Category form fields are displayed.",
    "params": [
        {
            "type": "object",
            "name": "$tag",
            "description": "Current link category term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 200,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "edit_tag_form_fields",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the Edit Tag form fields are displayed.",
    "params": [
        {
            "type": "object",
            "name": "$tag",
            "description": "Current tag term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 210,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "edit_tag_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the Edit Term form.",
    "params": [
        {
            "type": "object",
            "name": "$tag",
            "description": "Current taxonomy term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 243,
        "name": "wp-admin\/edit-tag-form.php"
    }
},
{
    "text": "wp_header_image_attachment_metadata",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the header image attachment metadata.",
    "params": [
        {
            "type": "array",
            "name": "$metadata",
            "description": "Attachment metadata."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1204,
        "name": "wp-admin\/custom-header.php"
    }
},
{
    "text": "custom_header_options",
    "type": "action",
    "params_count": 0,
    "description": "Fires just before the submit button in the custom header options form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 703,
        "name": "wp-admin\/custom-header.php"
    }
},
{
    "text": "wp_create_file_in_uploads",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the header image is set or an error is returned.",
    "params": [
        {
            "type": "string",
            "name": "$file",
            "description": "Path to the file."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 776,
        "name": "wp-admin\/custom-header.php"
    }
},
{
    "text": "sidebar_admin_setup",
    "type": "action",
    "params_count": 0,
    "description": "Fires early before the Widgets administration screen loads,",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 46,
        "name": "wp-admin\/widgets.php"
    }
},
{
    "text": "delete_widget",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately after a widget has been marked for deletion.",
    "params": [
        {
            "type": "string",
            "name": "$widget_id",
            "description": "ID of the widget marked for deletion."
        },
        {
            "type": "string",
            "name": "$sidebar_id",
            "description": "ID of the sidebar the widget was deleted from."
        },
        {
            "type": "string",
            "name": "$id_base",
            "description": "ID base for the widget."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 167,
        "name": "wp-admin\/widgets.php"
    }
},
{
    "text": "widgets_admin_page",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the Widgets administration page content loads.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 384,
        "name": "wp-admin\/widgets.php"
    }
},
{
    "text": "sidebar_admin_page",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the available widgets and sidebars have loaded, before the admin footer.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 523,
        "name": "wp-admin\/widgets.php"
    }
},
{
    "text": "theme_action_links",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the action links displayed for each theme in the Multisite",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of action links."
        },
        {
            "type": "WP_Theme",
            "name": "$theme",
            "description": "The current WP_Theme object."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Status of the theme, one of 'all', 'enabled', or 'disabled'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 484,
        "name": "wp-admin\/includes\/class-wp-ms-themes-list-table.php"
    }
},
{
    "text": "theme_row_meta",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the array of row meta for each theme in the Multisite themes",
    "params": [
        {
            "type": "array",
            "name": "$theme_meta",
            "description": "An array of the theme's metadata,"
        },
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "Directory name of the theme."
        },
        {
            "type": "WP_Theme",
            "name": "$theme",
            "description": "WP_Theme object."
        },
        {
            "type": "string",
            "name": "$status",
            "description": "Status of the theme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 566,
        "name": "wp-admin\/includes\/class-wp-ms-themes-list-table.php"
    }
},
{
    "text": "manage_themes_custom_column",
    "type": "action",
    "params_count": 3,
    "description": "Fires inside each custom column of the Multisite themes list table.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "Name of the column."
        },
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "Directory name of the theme."
        },
        {
            "type": "WP_Theme",
            "name": "$theme",
            "description": "Current WP_Theme object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 592,
        "name": "wp-admin\/includes\/class-wp-ms-themes-list-table.php"
    }
},
{
    "text": "after_theme_row",
    "type": "action",
    "params_count": 3,
    "description": "Fires after each row in the Multisite themes list table.",
    "params": [
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "Directory name of the theme."
        },
        {
            "type": "WP_Theme",
            "name": "$theme",
            "description": "Current WP_Theme object."
        },
        {
            "type": "string",
            "name": "$status",
            "description": "Status of the theme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 709,
        "name": "wp-admin\/includes\/class-wp-ms-themes-list-table.php"
    }
},
{
    "text": "heartbeat_nopriv_received",
    "type": "filter",
    "params_count": 3,
    "description": "Filters Heartbeat Ajax response in no-privilege environments.",
    "params": [
        {
            "type": "array|object",
            "name": "$response",
            "description": "The no-priv Heartbeat response object or array."
        },
        {
            "type": "array",
            "name": "$data",
            "description": "An array of data passed via $_POST."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "The screen id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 43,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "heartbeat_nopriv_send",
    "type": "filter",
    "params_count": 2,
    "description": "Filters Heartbeat Ajax response when no data is passed.",
    "params": [
        {
            "type": "array|object",
            "name": "$response",
            "description": "The Heartbeat response object or array."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "The screen id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 54,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "term_search_min_chars",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the minimum number of characters required to fire a tag search via Ajax.",
    "params": [
        {
            "type": "int",
            "name": "$characters",
            "description": "The minimum number of characters required. Default 2."
        },
        {
            "type": "WP_Taxonomy",
            "name": "$tax",
            "description": "The taxonomy object."
        },
        {
            "type": "string",
            "name": "$s",
            "description": "The search term."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 141,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_check_post_lock_window",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post lock window duration.",
    "params": [
        {
            "type": "int",
            "name": "$interval",
            "description": "The interval in seconds the post lock duration"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2390,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "ajax_query_attachments_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments passed to WP_Query during an Ajax",
    "params": [
        {
            "type": "array",
            "name": "$query",
            "description": "An array of query variables."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2494,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_refresh_nonces",
    "type": "filter",
    "params_count": 3,
    "description": "Ajax handler for the Heartbeat API.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 2812,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "heartbeat_received",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the Heartbeat response received.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "The Heartbeat response."
        },
        {
            "type": "array",
            "name": "$data",
            "description": "The $_POST data sent."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "The screen id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2831,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "heartbeat_send",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Heartbeat response sent.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "The Heartbeat response."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "The screen id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2842,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_ajax_cropped_attachment_metadata",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the cropped image attachment metadata.",
    "params": [
        {
            "type": "array",
            "name": "$metadata",
            "description": "Attachment metadata."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3327,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_ajax_cropped_attachment_id",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment ID for a cropped image.",
    "params": [
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "The attachment ID of the cropped image."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The Customizer control requesting the cropped image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3338,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_privacy_personal_data_exporters",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of exporter callbacks.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4099,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_privacy_personal_data_export_page",
    "type": "filter",
    "params_count": 7,
    "description": "Filters a page of personal data exporter data. Used to build the export report.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "The personal data for the given exporter and page."
        },
        {
            "type": "int",
            "name": "$exporter_index",
            "description": "The index of the exporter that provided this data."
        },
        {
            "type": "string",
            "name": "$email_address",
            "description": "The email address associated with this personal data."
        },
        {
            "type": "int",
            "name": "$page",
            "description": "The page for this response."
        },
        {
            "type": "int",
            "name": "$request_id",
            "description": "The privacy request post ID associated with this request."
        },
        {
            "type": "bool",
            "name": "$send_as_email",
            "description": "Whether the final results of the export should be emailed to the user."
        },
        {
            "type": "string",
            "name": "$exporter_key",
            "description": "The key (slug) of the exporter that provided this data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4205,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_privacy_personal_data_erasers",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of personal data eraser callbacks.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4283,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_privacy_personal_data_erasure_page",
    "type": "filter",
    "params_count": 6,
    "description": "Filters a page of personal data eraser data.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "The personal data for the given exporter and page."
        },
        {
            "type": "int",
            "name": "$eraser_index",
            "description": "The index of the eraser that provided this data."
        },
        {
            "type": "string",
            "name": "$email_address",
            "description": "The email address associated with this personal data."
        },
        {
            "type": "int",
            "name": "$page",
            "description": "The page for this response."
        },
        {
            "type": "int",
            "name": "$request_id",
            "description": "The privacy request post ID associated with this request."
        },
        {
            "type": "string",
            "name": "$eraser_key",
            "description": "The key (slug) of the eraser that provided this data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 4424,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "heartbeat_nopriv_tick",
    "type": "action",
    "params_count": 2,
    "description": "Fires when Heartbeat ticks in no-privilege environments.",
    "params": [
        {
            "type": "array|object",
            "name": "$response",
            "description": "The no-priv Heartbeat response."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "The screen id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 66,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "load-widgets.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires early when editing the widgets displayed in sidebars.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1944,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "widgets.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires early when editing the widgets displayed in sidebars.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1951,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "load-widgets.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires early when editing the widgets displayed in sidebars.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1944,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "widgets.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires early when editing the widgets displayed in sidebars.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1951,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "heartbeat_tick",
    "type": "action",
    "params_count": 2,
    "description": "Fires when Heartbeat ticks in logged-in environments.",
    "params": [
        {
            "type": "array",
            "name": "$response",
            "description": "The Heartbeat response."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "The screen id."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2854,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "wp_ajax_crop_image_pre_save",
    "type": "action",
    "params_count": 3,
    "description": "Fires before a cropped image is saved.",
    "params": [
        {
            "type": "string",
            "name": "$context",
            "description": "The Customizer control requesting the cropped image."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "The attachment ID of the original image."
        },
        {
            "type": "string",
            "name": "$cropped",
            "description": "Path to the cropped image file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3296,
        "name": "wp-admin\/includes\/ajax-actions.php"
    }
},
{
    "text": "intermediate_image_sizes_advanced",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the image sizes automatically generated when uploading an image.",
    "params": [
        {
            "type": "array",
            "name": "$sizes",
            "description": "An associative array of image sizes."
        },
        {
            "type": "array",
            "name": "$metadata",
            "description": "An associative array of image metadata: width, height, file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 129,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "attachment_thumbnail_args",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the parameters for the attachment thumbnail creation.",
    "params": [
        {
            "type": "array",
            "name": "$image_attachment",
            "description": "An array of parameters to create the thumbnail."
        },
        {
            "type": "array",
            "name": "$metadata",
            "description": "Current attachment metadata."
        },
        {
            "type": "array",
            "name": "$uploaded",
            "description": "An array containing the thumbnail path and url."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 196,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "fallback_intermediate_image_sizes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the image sizes generated for non-image mime types.",
    "params": [
        {
            "type": "array",
            "name": "$fallback_sizes",
            "description": "An array of image size names."
        },
        {
            "type": "array",
            "name": "$metadata",
            "description": "Current attachment metadata."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 222,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "wp_generate_attachment_metadata",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the generated attachment meta data.",
    "params": [
        {
            "type": "array",
            "name": "$metadata",
            "description": "An array of attachment meta data."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "Current attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 293,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "wp_read_image_metadata",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the array of meta data read from an image's exif data.",
    "params": [
        {
            "type": "array",
            "name": "$meta",
            "description": "Image meta data."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "Path to image file."
        },
        {
            "type": "int",
            "name": "$sourceImageType",
            "description": "Type of image."
        },
        {
            "type": "array",
            "name": "$iptc",
            "description": "IPTC data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 514,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "file_is_displayable_image",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the current image is displayable in the browser.",
    "params": [
        {
            "type": "bool",
            "name": "$result",
            "description": "Whether the image can be displayed. Default true."
        },
        {
            "type": "string",
            "name": "$path",
            "description": "Path to the image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 559,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "load_image_to_edit",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the current image being loaded for editing.",
    "params": [
        {
            "type": "resource",
            "name": "$image",
            "description": "Current image."
        },
        {
            "type": "string",
            "name": "$attachment_id",
            "description": "Attachment ID."
        },
        {
            "type": "string",
            "name": "$size",
            "description": "Image size."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 601,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "load_image_to_edit_filesystempath",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the path to the current image.",
    "params": [
        {
            "type": "string",
            "name": "$path",
            "description": "Path to the current image."
        },
        {
            "type": "string",
            "name": "$attachment_id",
            "description": "Attachment ID."
        },
        {
            "type": "string",
            "name": "$size",
            "description": "Size of the image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 639,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "load_image_to_edit_attachmenturl",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the image URL if not in the local filesystem.",
    "params": [
        {
            "type": "string",
            "name": "$image_url",
            "description": "Current image URL."
        },
        {
            "type": "string",
            "name": "$attachment_id",
            "description": "Attachment ID."
        },
        {
            "type": "string",
            "name": "$size",
            "description": "Size of the image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 653,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "load_image_to_edit_path",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned path or URL of the current image.",
    "params": [
        {
            "type": "string|bool",
            "name": "$filepath",
            "description": "File path or URL to current image, or false."
        },
        {
            "type": "string",
            "name": "$attachment_id",
            "description": "Attachment ID."
        },
        {
            "type": "string",
            "name": "$size",
            "description": "Size of the image."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 665,
        "name": "wp-admin\/includes\/image.php"
    }
},
{
    "text": "wpmu_users_columns",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the columns displayed in the Network Admin Users list table.",
    "params": [
        {
            "type": "array",
            "name": "$users_columns",
            "description": "An array of user columns. Default 'cb', 'username',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 182,
        "name": "wp-admin\/includes\/class-wp-ms-users-list-table.php"
    }
},
{
    "text": "ms_user_list_site_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the action links displayed next the sites a user belongs to",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of action links to be displayed."
        },
        {
            "type": "int",
            "name": "$userblog_id",
            "description": "The site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 363,
        "name": "wp-admin\/includes\/class-wp-ms-users-list-table.php"
    }
},
{
    "text": "ms_user_row_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the action links displayed under each user in the Network Admin Users list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of action links to be displayed."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 454,
        "name": "wp-admin\/includes\/class-wp-ms-users-list-table.php"
    }
},
{
    "text": "default_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default post content initially used in the \"Write Post\" form.",
    "params": [
        {
            "type": "string",
            "name": "$post_content",
            "description": "Default post content."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 642,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "default_title",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default post title initially used in the \"Write Post\" form.",
    "params": [
        {
            "type": "string",
            "name": "$post_title",
            "description": "Default post title."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 652,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "default_excerpt",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default post excerpt initially used in the \"Write Post\" form.",
    "params": [
        {
            "type": "string",
            "name": "$post_excerpt",
            "description": "Default post excerpt."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 662,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "edit_posts_per_page",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the number of posts displayed per page when specifically listing \"posts\".",
    "params": [
        {
            "type": "int",
            "name": "$posts_per_page",
            "description": "Number of posts to be displayed. Default 20."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "The post type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1057,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "upload_per_page",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of items to list per page when listing media items.",
    "params": [
        {
            "type": "int",
            "name": "$media_per_page",
            "description": "Number of media to list. Default 20."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1132,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "get_sample_permalink",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the sample permalink.",
    "params": [
        {
            "type": "array",
            "name": "$permalink",
            "description": "Array containing the sample permalink with placeholder for the post name, and the post name."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "Post title."
        },
        {
            "type": "string",
            "name": "$name",
            "description": "Post name (slug)."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1291,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "get_sample_permalink_html",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the sample permalink HTML markup.",
    "params": [
        {
            "type": "string",
            "name": "$return",
            "description": "Sample permalink HTML markup."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "string",
            "name": "$new_title",
            "description": "New sample permalink title."
        },
        {
            "type": "string",
            "name": "$new_slug",
            "description": "New sample permalink slug."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1372,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "admin_post_thumbnail_size",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the size used to display the post thumbnail image in the 'Featured Image' meta box.",
    "params": [
        {
            "type": "string|array",
            "name": "$size",
            "description": "Post thumbnail image size to display in the meta box. Accepts any valid"
        },
        {
            "type": "int",
            "name": "$thumbnail_id",
            "description": "Post thumbnail attachment ID."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post object associated with the thumbnail."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1420,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "admin_post_thumbnail_html",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the admin post thumbnail HTML markup to return.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Admin post thumbnail HTML markup."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        },
        {
            "type": "int",
            "name": "$thumbnail_id",
            "description": "Thumbnail ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1448,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "override_post_lock",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to allow the post lock to be overridden.",
    "params": [
        {
            "type": "bool",
            "name": "$override",
            "description": "Whether to allow overriding post locks. Default true."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1594,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "redirect_post_location",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the post redirect destination URL.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The destination URL."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1874,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "post_locked_dialog",
    "type": "action",
    "params_count": 1,
    "description": "Fires inside the post locked dialog before the buttons are displayed.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1619,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "post_lock_lost_dialog",
    "type": "action",
    "params_count": 1,
    "description": "Fires inside the dialog displayed when a user has lost the post lock.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1656,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "wp_creating_autosave",
    "type": "action",
    "params_count": 1,
    "description": "Fires before an autosave is stored.",
    "params": [
        {
            "type": "array",
            "name": "$new_autosave",
            "description": "Post array - the autosave that is about to be saved."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1719,
        "name": "wp-admin\/includes\/post.php"
    }
},
{
    "text": "default_hidden_columns",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default list of hidden columns.",
    "params": [
        {
            "type": "array",
            "name": "$hidden",
            "description": "An array of columns hidden by default."
        },
        {
            "type": "WP_Screen",
            "name": "$screen",
            "description": "WP_Screen object of the current screen."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 73,
        "name": "wp-admin\/includes\/screen.php"
    }
},
{
    "text": "hidden_columns",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of hidden columns.",
    "params": [
        {
            "type": "array",
            "name": "$hidden",
            "description": "An array of hidden columns."
        },
        {
            "type": "WP_Screen",
            "name": "$screen",
            "description": "WP_Screen object of the current screen."
        },
        {
            "type": "bool",
            "name": "$use_defaults",
            "description": "Whether to show the default columns."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 86,
        "name": "wp-admin\/includes\/screen.php"
    }
},
{
    "text": "default_hidden_meta_boxes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default list of hidden meta boxes.",
    "params": [
        {
            "type": "array",
            "name": "$hidden",
            "description": "An array of meta boxes hidden by default."
        },
        {
            "type": "WP_Screen",
            "name": "$screen",
            "description": "WP_Screen object of the current screen."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 172,
        "name": "wp-admin\/includes\/screen.php"
    }
},
{
    "text": "hidden_meta_boxes",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of hidden meta boxes.",
    "params": [
        {
            "type": "array",
            "name": "$hidden",
            "description": "An array of hidden meta boxes."
        },
        {
            "type": "WP_Screen",
            "name": "$screen",
            "description": "WP_Screen object of the current screen."
        },
        {
            "type": "bool",
            "name": "$use_defaults",
            "description": "Whether to show the default meta boxes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 185,
        "name": "wp-admin\/includes\/screen.php"
    }
},
{
    "text": "manage_link_custom_column",
    "type": "action",
    "params_count": 2,
    "description": "Fires for each registered custom link column.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "Name of the custom column."
        },
        {
            "type": "int",
            "name": "$link_id",
            "description": "Link ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 283,
        "name": "wp-admin\/includes\/class-wp-links-list-table.php"
    }
},
{
    "text": "months_dropdown_results",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the 'Months' drop-down results.",
    "params": [
        {
            "type": "object",
            "name": "$months",
            "description": "The months drop-down query results."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "The post type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 547,
        "name": "wp-admin\/includes\/class-wp-list-table.php"
    }
},
{
    "text": "list_table_primary_column",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the name of the primary column for the current list table.",
    "params": [
        {
            "type": "string",
            "name": "$default",
            "description": "Column name default for the specific list table, e.g. 'name'."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Screen ID for specific list table, e.g. 'plugins'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 921,
        "name": "wp-admin\/includes\/class-wp-list-table.php"
    }
},
{
    "text": "update_right_now_text",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the text displayed in the 'At a Glance' dashboard widget.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Default text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 297,
        "name": "wp-admin\/includes\/update.php"
    }
},
{
    "text": "install_themes_nonmenu_tabs",
    "type": "filter",
    "params_count": 1,
    "description": "Filters tabs not associated with a menu item on the Install Themes screen.",
    "params": [
        {
            "type": "array",
            "name": "$nonmenu_tabs",
            "description": "The tabs that don't have a menu item on"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 82,
        "name": "wp-admin\/includes\/class-wp-theme-install-list-table.php"
    }
},
{
    "text": "theme_install_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the install action links for a theme in the Install Themes list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of theme action hyperlinks. Defaults are"
        },
        {
            "type": "WP_Theme",
            "name": "$theme",
            "description": "Theme object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 300,
        "name": "wp-admin\/includes\/class-wp-theme-install-list-table.php"
    }
},
{
    "text": "install_themes_table_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires in the Install Themes list table header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 194,
        "name": "wp-admin\/includes\/class-wp-theme-install-list-table.php"
    }
},
{
    "text": "plugin_files_exclusions",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the array of excluded directories and files while scanning the folder.",
    "params": [
        {
            "type": "array",
            "name": "$exclusions",
            "description": "Array of excluded directories and files."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 208,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "activate_plugin",
    "type": "action",
    "params_count": 2,
    "description": "Fires before a plugin is activated.",
    "params": [
        {
            "type": "string",
            "name": "$plugin",
            "description": "Path to the main plugin file from plugins directory."
        },
        {
            "type": "bool",
            "name": "$network_wide",
            "description": "Whether to enable the plugin for all sites in the network"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 571,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "activated_plugin",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a plugin has been activated.",
    "params": [
        {
            "type": "string",
            "name": "$plugin",
            "description": "Path to the main plugin file from plugins directory."
        },
        {
            "type": "bool",
            "name": "$network_wide",
            "description": "Whether to enable the plugin for all sites in the network"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 613,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "deactivate_plugin",
    "type": "action",
    "params_count": 2,
    "description": "Fires before a plugin is deactivated.",
    "params": [
        {
            "type": "string",
            "name": "$plugin",
            "description": "Path to the main plugin file from plugins directory."
        },
        {
            "type": "bool",
            "name": "$network_deactivating",
            "description": "Whether the plugin is deactivated for all sites in the network"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 665,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "deactivated_plugin",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a plugin is deactivated.",
    "params": [
        {
            "type": "string",
            "name": "$plugin",
            "description": "Path to the main plugin file from plugins directory."
        },
        {
            "type": "bool",
            "name": "$network_deactivating",
            "description": "Whether the plugin is deactivated for all sites in the network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 713,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "delete_plugin",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately before a plugin deletion attempt.",
    "params": [
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Plugin file name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 841,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "deleted_plugin",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a plugin deletion attempt.",
    "params": [
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Plugin file name."
        },
        {
            "type": "bool",
            "name": "$deleted",
            "description": "Whether the plugin deletion was successful."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 860,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "pre_uninstall_plugin",
    "type": "action",
    "params_count": 2,
    "description": "Fires in uninstall_plugin() immediately before the plugin is uninstalled.",
    "params": [
        {
            "type": "string",
            "name": "$plugin",
            "description": "Path to the main plugin file from plugins directory."
        },
        {
            "type": "array",
            "name": "$uninstallable_plugins",
            "description": "Uninstallable plugins."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1007,
        "name": "wp-admin\/includes\/plugin.php"
    }
},
{
    "text": "translations_api",
    "type": "filter",
    "params_count": 3,
    "description": "Allows a plugin to override the WordPress.org Translation Installation API entirely.",
    "params": [
        {
            "type": "bool|array",
            "name": "$result",
            "description": "The result object. Default false."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of translations being requested."
        },
        {
            "type": "object",
            "name": "$args",
            "description": "Translation API arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 35,
        "name": "wp-admin\/includes\/translation-install.php"
    }
},
{
    "text": "translations_api_result",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the Translation Installation API response results.",
    "params": [
        {
            "type": "object|WP_Error",
            "name": "$res",
            "description": "Response object or WP_Error."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of translations being requested."
        },
        {
            "type": "object",
            "name": "$args",
            "description": "Translation API arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 104,
        "name": "wp-admin\/includes\/translation-install.php"
    }
},
{
    "text": "add_menu_classes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters administration menus array with classes added for top-level items.",
    "params": [
        {
            "type": "array",
            "name": "$menu",
            "description": "Associative array of administration menu items."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 238,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "menu_order",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the order of administration menu items.",
    "params": [
        {
            "type": "array",
            "name": "$menu_order",
            "description": "An ordered array of menu items."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 272,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "_network_admin_menu",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the administration menu loads in the Network Admin.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 19,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "_user_admin_menu",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the administration menu loads in the User Admin.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 30,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "_admin_menu",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the administration menu loads in the admin.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 41,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "network_admin_menu",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the administration menu loads in the Network Admin.",
    "params": [
        {
            "type": "string",
            "name": "$context",
            "description": "Empty context."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 129,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "user_admin_menu",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the administration menu loads in the User Admin.",
    "params": [
        {
            "type": "string",
            "name": "$context",
            "description": "Empty context."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 139,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "admin_menu",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the administration menu loads in the admin.",
    "params": [
        {
            "type": "string",
            "name": "$context",
            "description": "Empty context."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 149,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "admin_page_access_denied",
    "type": "action",
    "params_count": 0,
    "description": "Fires when access to an admin page is denied.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 340,
        "name": "wp-admin\/includes\/menu.php"
    }
},
{
    "text": "manage_pages_columns",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the columns displayed in the Pages list table.",
    "params": [
        {
            "type": "array",
            "name": "$post_columns",
            "description": "An array of column names."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 585,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "manage_posts_columns",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the columns displayed in the Posts list table.",
    "params": [
        {
            "type": "array",
            "name": "$posts_columns",
            "description": "An array of column names."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "The post type slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 596,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "post_date_column_status",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the status text of the post.",
    "params": [
        {
            "type": "string",
            "name": "$status",
            "description": "The status text."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        },
        {
            "type": "string",
            "name": "$column_name",
            "description": "The column name."
        },
        {
            "type": "string",
            "name": "$mode",
            "description": "The list display mode ('excerpt' or 'list')."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1013,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "post_date_column_time",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the published time of the post.",
    "params": [
        {
            "type": "string",
            "name": "$t_time",
            "description": "The published time."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "Post object."
        },
        {
            "type": "string",
            "name": "$column_name",
            "description": "The column name."
        },
        {
            "type": "string",
            "name": "$mode",
            "description": "The list display mode ('excerpt' or 'list')."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1034,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "page_row_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of row action links on the Pages list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of row action links. Defaults are"
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1314,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "post_row_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the array of row action links on the Posts list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of row action links. Defaults are"
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1329,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "quick_edit_dropdown_pages_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used to generate the Quick Edit page-parent drop-down.",
    "params": [
        {
            "type": "array",
            "name": "$dropdown_args",
            "description": "An array of arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1537,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "restrict_manage_posts",
    "type": "action",
    "params_count": 2,
    "description": "Fires before the Filter button on the Posts and Pages list tables.",
    "params": [
        {
            "type": "string",
            "name": "$post_type",
            "description": "The post type slug."
        },
        {
            "type": "string",
            "name": "$which",
            "description": "The location of the extra table nav markup:"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 478,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "manage_posts_extra_tablenav",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately following the closing \"actions\" div in the tablenav for the posts",
    "params": [
        {
            "type": "string",
            "name": "$which",
            "description": "The location of the extra table nav markup: 'top' or 'bottom'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 502,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "manage_pages_custom_column",
    "type": "action",
    "params_count": 2,
    "description": "Fires in each custom column on the Posts list table.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "The name of the column to display."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The current post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1135,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "manage_posts_custom_column",
    "type": "action",
    "params_count": 2,
    "description": "Fires in each custom column in the Posts list table.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "The name of the column to display."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The current post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1149,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "bulk_edit_custom_box",
    "type": "action",
    "params_count": 2,
    "description": "Fires once for each column in Bulk Edit mode.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "Name of the column to edit."
        },
        {
            "type": "WP_Post",
            "name": "$post_type",
            "description": "The post type slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1727,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "quick_edit_custom_box",
    "type": "action",
    "params_count": 3,
    "description": "Fires once for each column in Quick Edit mode.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "Name of the column to edit."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "The post type slug, or current screen name if this is a taxonomy list table."
        },
        {
            "type": "string taxonomy     The taxonomy name, if any.",
            "name": "$string",
            "description": "taxonomy     The taxonomy name, if any."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1739,
        "name": "wp-admin\/includes\/class-wp-posts-list-table.php"
    }
},
{
    "text": "all_plugins",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the full array of plugins to list in the Plugins list table.",
    "params": [
        {
            "type": "array",
            "name": "$all_plugins",
            "description": "An array of plugins to display in the list table."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 88,
        "name": "wp-admin\/includes\/class-wp-plugins-list-table.php"
    }
},
{
    "text": "show_network_active_plugins",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to display network-active plugins alongside plugins active for the current site.",
    "params": [
        {
            "type": "bool",
            "name": "$show",
            "description": "Whether to show network-active plugins. Default is whether the current"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 154,
        "name": "wp-admin\/includes\/class-wp-plugins-list-table.php"
    }
},
{
    "text": "network_admin_plugin_action_links",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the action links displayed for each plugin in the Network Admin Plugins list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of plugin action links. By default this can include 'activate',"
        },
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Path to the plugin file relative to the plugins directory."
        },
        {
            "type": "array",
            "name": "$plugin_data",
            "description": "An array of plugin data. See `get_plugin_data()`."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The plugin context. By default this can include 'all', 'active', 'inactive',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 659,
        "name": "wp-admin\/includes\/class-wp-plugins-list-table.php"
    }
},
{
    "text": "plugin_action_links",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the action links displayed for each plugin in the Plugins list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of plugin action links. By default this can include 'activate',"
        },
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Path to the plugin file relative to the plugins directory."
        },
        {
            "type": "array",
            "name": "$plugin_data",
            "description": "An array of plugin data. See `get_plugin_data()`."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The plugin context. By default this can include 'all', 'active', 'inactive',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 695,
        "name": "wp-admin\/includes\/class-wp-plugins-list-table.php"
    }
},
{
    "text": "plugin_row_meta",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the array of row meta for each plugin in the Plugins list table.",
    "params": [
        {
            "type": "array",
            "name": "$plugin_meta",
            "description": "An array of the plugin's metadata,"
        },
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Path to the plugin file, relative to the plugins directory."
        },
        {
            "type": "array",
            "name": "$plugin_data",
            "description": "An array of plugin data."
        },
        {
            "type": "string",
            "name": "$status",
            "description": "Status of the plugin. Defaults are 'All', 'Active',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 805,
        "name": "wp-admin\/includes\/class-wp-plugins-list-table.php"
    }
},
{
    "text": "manage_plugins_custom_column",
    "type": "action",
    "params_count": 3,
    "description": "Fires inside each custom column of the Plugins list table.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "Name of the column."
        },
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Path to the plugin file."
        },
        {
            "type": "array",
            "name": "$plugin_data",
            "description": "An array of plugin data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 824,
        "name": "wp-admin\/includes\/class-wp-plugins-list-table.php"
    }
},
{
    "text": "after_plugin_row",
    "type": "action",
    "params_count": 3,
    "description": "Fires after each row in the Plugins list table.",
    "params": [
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Path to the plugin file, relative to the plugins directory."
        },
        {
            "type": "array",
            "name": "$plugin_data",
            "description": "An array of plugin data."
        },
        {
            "type": "string",
            "name": "$status",
            "description": "Status of the plugin. Defaults are 'All', 'Active',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 843,
        "name": "wp-admin\/includes\/class-wp-plugins-list-table.php"
    }
},
{
    "text": "install_plugin_complete_actions",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the list of action links available following a single plugin installation.",
    "params": [
        {
            "type": "array",
            "name": "$install_actions",
            "description": "Array of plugin action links."
        },
        {
            "type": "object",
            "name": "$api",
            "description": "Object containing WordPress.org API plugin data. Empty"
        },
        {
            "type": "string",
            "name": "$plugin_file",
            "description": "Path to the plugin file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 92,
        "name": "wp-admin\/includes\/class-plugin-installer-skin.php"
    }
},
{
    "text": "wp_terms_checklist_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the taxonomy terms checklist arguments.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 98,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "wp_comment_reply",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the in-line comment reply-to form output in the Comments",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The reply-to form content."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of default args."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 382,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "postmeta_form_keys",
    "type": "filter",
    "params_count": 2,
    "description": "Filters values for the meta key dropdown in the Custom Fields meta box.",
    "params": [
        {
            "type": "array|null",
            "name": "$keys",
            "description": "Pre-defined meta keys to be used in place of a postmeta query. Default null."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The current post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 612,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "postmeta_form_limit",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of custom fields to retrieve for the drop-down",
    "params": [
        {
            "type": "int",
            "name": "$limit",
            "description": "Number of custom fields to retrieve. Default 30."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 623,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "import_upload_size_limit",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the maximum allowed upload size for import files.",
    "params": [
        {
            "type": "int",
            "name": "$max_upload_size",
            "description": "Allowed upload size. Default 1 MB."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 875,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "display_post_states",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default post display states used in the posts list table.",
    "params": [
        {
            "type": "array",
            "name": "$post_states",
            "description": "An array of post display states."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The current post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1791,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "display_media_states",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the default media display states for items in the Media list table.",
    "params": [
        {
            "type": "array",
            "name": "$media_states",
            "description": "An array of media states. Default 'Header Image',"
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The current attachment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1869,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "add_inline_data",
    "type": "action",
    "params_count": 2,
    "description": "Fires after outputting the fields for the inline editor for posts and pages.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The current post object."
        },
        {
            "type": "WP_Post_Type",
            "name": "$post_type_object",
            "description": "The current post's post type object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 348,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "admin_xml_ns",
    "type": "action",
    "params_count": 0,
    "description": "Fires inside the HTML tag in the admin header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2061,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "admin_xml_ns",
    "type": "action",
    "params_count": 0,
    "description": "Fires inside the HTML tag in the admin header.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 2061,
        "name": "wp-admin\/includes\/template.php"
    }
},
{
    "text": "export_wp_filename",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the export filename.",
    "params": [
        {
            "type": "string",
            "name": "$wp_filename",
            "description": "The name of the file for download."
        },
        {
            "type": "string",
            "name": "$sitename",
            "description": "The site name."
        },
        {
            "type": "string",
            "name": "$date",
            "description": "Today's date, formatted."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 88,
        "name": "wp-admin\/includes\/export.php"
    }
},
{
    "text": "the_content_export",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post content used for WXR exports.",
    "params": [
        {
            "type": "string",
            "name": "$post_content",
            "description": "Content of the current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 521,
        "name": "wp-admin\/includes\/export.php"
    }
},
{
    "text": "the_excerpt_export",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post excerpt used for WXR exports.",
    "params": [
        {
            "type": "string",
            "name": "$post_excerpt",
            "description": "Excerpt for the current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 531,
        "name": "wp-admin\/includes\/export.php"
    }
},
{
    "text": "export_wp",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the beginning of an export, before any headers are sent.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of export arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 71,
        "name": "wp-admin\/includes\/export.php"
    }
},
{
    "text": "update_bulk_plugins_complete_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of action links available following bulk plugin updates.",
    "params": [
        {
            "type": "array",
            "name": "$update_actions",
            "description": "Array of plugin action links."
        },
        {
            "type": "array",
            "name": "$plugin_info",
            "description": "Array of information for the last-updated plugin."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 62,
        "name": "wp-admin\/includes\/class-bulk-plugin-upgrader-skin.php"
    }
},
{
    "text": "get_editable_authors",
    "type": "filter",
    "params_count": 1,
    "description": "Gets author users who can edit posts.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 265,
        "name": "wp-admin\/includes\/deprecated.php"
    }
},
{
    "text": "get_others_drafts",
    "type": "filter",
    "params_count": 1,
    "description": "Retrieves editable posts from other users.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "User ID to not retrieve posts from."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Optional. Post type to retrieve. Accepts 'draft', 'pending' or 'any' (all)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 703,
        "name": "wp-admin\/includes\/deprecated.php"
    }
},
{
    "text": "wp_create_thumbnail",
    "type": "filter",
    "params_count": 3,
    "description": "This was once used to create a thumbnail from an Image given a maximum side size.",
    "params": [
        {
            "type": "mixed",
            "name": "$file",
            "description": "Filename of the original image, Or attachment id."
        },
        {
            "type": "int",
            "name": "$max_side",
            "description": "Maximum length of a single side for the thumbnail."
        },
        {
            "type": "mixed",
            "name": "$deprecated",
            "description": "Never used."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1126,
        "name": "wp-admin\/includes\/deprecated.php"
    }
},
{
    "text": "pre_user_search",
    "type": "action",
    "params_count": 1,
    "description": "Prepares the user search query (legacy).",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 552,
        "name": "wp-admin\/includes\/deprecated.php"
    }
},
{
    "text": "site_icon_attachment_metadata",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the site icon attachment metadata.",
    "params": [
        {
            "type": "array",
            "name": "$metadata",
            "description": "Attachment metadata."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 127,
        "name": "wp-admin\/includes\/class-wp-site-icon.php"
    }
},
{
    "text": "site_icon_image_sizes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the different dimensions that a site icon is saved in.",
    "params": [
        {
            "type": "array",
            "name": "$site_icon_sizes",
            "description": "Sizes available for the Site Icon."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 151,
        "name": "wp-admin\/includes\/class-wp-site-icon.php"
    }
},
{
    "text": "site_icon_image_sizes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the different dimensions that a site icon is saved in.",
    "params": [
        {
            "type": "array",
            "name": "$site_icon_sizes",
            "description": "Sizes available for the Site Icon."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 151,
        "name": "wp-admin\/includes\/class-wp-site-icon.php"
    }
},
{
    "text": "update_feedback",
    "type": "filter",
    "params_count": 1,
    "description": "Filters feedback messages displayed during the core update process.",
    "params": [
        {
            "type": "string",
            "name": "$feedback",
            "description": "The core update feedback messages."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 895,
        "name": "wp-admin\/includes\/update-core.php"
    }
},
{
    "text": "_core_updated_successfully",
    "type": "action",
    "params_count": 1,
    "description": "Fires after WordPress core has been successfully updated.",
    "params": [
        {
            "type": "string",
            "name": "$wp_version",
            "description": "The current WordPress version."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1197,
        "name": "wp-admin\/includes\/update-core.php"
    }
},
{
    "text": "editable_roles",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of editable roles.",
    "params": [
        {
            "type": "array",
            "name": "$all_roles",
            "description": "List of roles."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 242,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "get_users_drafts",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the user's drafts query string.",
    "params": [
        {
            "type": "string",
            "name": "$query",
            "description": "The user's drafts query string."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 285,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "post_types_to_delete_with_user",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of post types to delete with a user.",
    "params": [
        {
            "type": "array",
            "name": "$post_types_to_delete",
            "description": "Post types to delete."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "User ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 354,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "check_passwords",
    "type": "action",
    "params_count": 3,
    "description": "Fires before the password and confirm password fields are checked for congruity.",
    "params": [
        {
            "type": "string",
            "name": "$user_login",
            "description": "The username."
        },
        {
            "type": "string",
            "name": "$pass1",
            "description": "The password (passed by reference)."
        },
        {
            "type": "string",
            "name": "$pass2",
            "description": "The confirmed password (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 140,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "user_profile_update_errors",
    "type": "action",
    "params_count": 3,
    "description": "Fires before user profile update errors are returned.",
    "params": [
        {
            "type": "WP_Error",
            "name": "$errors",
            "description": "WP_Error object (passed by reference)."
        },
        {
            "type": "bool",
            "name": "$update",
            "description": "Whether this is a user update."
        },
        {
            "type": "stdClass",
            "name": "$user",
            "description": "User object (passed by reference)."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 191,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "edit_user_created_user",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a new user has been created.",
    "params": [
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the newly created user."
        },
        {
            "type": "string",
            "name": "$notify",
            "description": "Type of notification that should happen. See wp_send_new_user_notifications()"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 211,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "delete_user",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately before a user is deleted from the database.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "ID of the user to delete."
        },
        {
            "type": "int|null",
            "name": "$reassign",
            "description": "ID of the user to reassign posts and links to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 334,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "deleted_user",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after a user is deleted from the database.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "ID of the deleted user."
        },
        {
            "type": "int|null",
            "name": "$reassign",
            "description": "ID of the user to reassign posts and links to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 406,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "wp_privacy_personal_data_erased",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately after a personal data erasure request has been marked completed.",
    "params": [
        {
            "type": "int",
            "name": "$request_id",
            "description": "The privacy request post ID associated with this request."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 951,
        "name": "wp-admin\/includes\/user.php"
    }
},
{
    "text": "manage_taxonomies_for_attachment_columns",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the taxonomy columns for attachments in the Media list table.",
    "params": [
        {
            "type": "array",
            "name": "$taxonomies",
            "description": "An array of registered taxonomies to show for attachments."
        },
        {
            "type": "string",
            "name": "$post_type",
            "description": "The post type. Default 'attachment'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 297,
        "name": "wp-admin\/includes\/class-wp-media-list-table.php"
    }
},
{
    "text": "manage_media_columns",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Media list table columns.",
    "params": [
        {
            "type": "array",
            "name": "$posts_columns",
            "description": "An array of columns displayed in the Media list table."
        },
        {
            "type": "bool",
            "name": "$detached",
            "description": "Whether the list table contains media not attached"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 328,
        "name": "wp-admin\/includes\/class-wp-media-list-table.php"
    }
},
{
    "text": "media_row_actions",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the action links for each attachment in the Media list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of action links for each attachment."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "WP_Post object for the current attachment."
        },
        {
            "type": "bool",
            "name": "$detached",
            "description": "Whether the list table contains media not attached"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 756,
        "name": "wp-admin\/includes\/class-wp-media-list-table.php"
    }
},
{
    "text": "manage_media_custom_column",
    "type": "action",
    "params_count": 2,
    "description": "Fires for each custom column in the Media list table.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "Name of the custom column."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 592,
        "name": "wp-admin\/includes\/class-wp-media-list-table.php"
    }
},
{
    "text": "update_bulk_theme_complete_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of action links available following bulk theme updates.",
    "params": [
        {
            "type": "array",
            "name": "$update_actions",
            "description": "Array of theme action links."
        },
        {
            "type": "array",
            "name": "$theme_info",
            "description": "Array of information for the last-updated theme."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 62,
        "name": "wp-admin\/includes\/class-bulk-theme-upgrader-skin.php"
    }
},
{
    "text": "install_theme_complete_actions",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the list of action links available following a single theme installation.",
    "params": [
        {
            "type": "array",
            "name": "$install_actions",
            "description": "Array of theme action links."
        },
        {
            "type": "object",
            "name": "$api",
            "description": "Object containing WordPress.org API theme data."
        },
        {
            "type": "string",
            "name": "$stylesheet",
            "description": "Theme directory name."
        },
        {
            "type": "WP_Theme",
            "name": "$theme_info",
            "description": "Theme object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 99,
        "name": "wp-admin\/includes\/class-theme-installer-skin.php"
    }
},
{
    "text": "update_theme_complete_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of action links available following a single theme update.",
    "params": [
        {
            "type": "array",
            "name": "$update_actions",
            "description": "Array of theme action links."
        },
        {
            "type": "string",
            "name": "$theme",
            "description": "Theme directory name."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 84,
        "name": "wp-admin\/includes\/class-theme-upgrader-skin.php"
    }
},
{
    "text": "install_plugins_tabs",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the tabs shown on the Plugin Install screen.",
    "params": [
        {
            "type": "array",
            "name": "$tabs",
            "description": "The tabs shown on the Plugin Install screen. Defaults include 'featured', 'popular',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 129,
        "name": "wp-admin\/includes\/class-wp-plugin-install-list-table.php"
    }
},
{
    "text": "install_plugins_nonmenu_tabs",
    "type": "filter",
    "params_count": 1,
    "description": "Filters tabs not associated with a menu item on the Plugin Install screen.",
    "params": [
        {
            "type": "array",
            "name": "$nonmenu_tabs",
            "description": "The tabs that don't have a Menu item on the Plugin Install screen."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 138,
        "name": "wp-admin\/includes\/class-wp-plugin-install-list-table.php"
    }
},
{
    "text": "plugin_install_action_links",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the install action links for a plugin.",
    "params": [
        {
            "type": "array",
            "name": "$action_links",
            "description": "An array of plugin action hyperlinks. Defaults are links to Details and Install Now."
        },
        {
            "type": "array",
            "name": "$plugin",
            "description": "The plugin currently being listed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 565,
        "name": "wp-admin\/includes\/class-wp-plugin-install-list-table.php"
    }
},
{
    "text": "install_plugins_table_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the Plugin Install table header pagination is displayed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 378,
        "name": "wp-admin\/includes\/class-wp-plugin-install-list-table.php"
    }
},
{
    "text": "post_edit_category_parent_dropdown_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments for the taxonomy parent dropdown on the Post Edit page.",
    "params": [
        {
            "type": "array",
            "name": "$parent_dropdown_args",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 596,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "page_attributes_dropdown_pages_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the arguments used to generate a Pages drop-down element.",
    "params": [
        {
            "type": "array",
            "name": "$dropdown_args",
            "description": "Array of arguments used to generate the pages drop-down."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 857,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "default_page_template_title",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the title of the default page template displayed in the drop-down.",
    "params": [
        {
            "type": "string",
            "name": "$label",
            "description": "The display value for the default page template title."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Where the option label is displayed. Possible values"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 893,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "post_submitbox_minor_actions",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the post time\/date setting in the Publish meta box.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "WP_Post object for the current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 76,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "post_submitbox_misc_actions",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the post time\/date setting in the Publish meta box.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "WP_Post object for the current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 255,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "post_submitbox_start",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the beginning of the publishing actions section of the Publish meta box.",
    "params": [
        {
            "type": "WP_Post|null",
            "name": "$post",
            "description": "WP_Post object for the current post on Edit Post screen,"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 272,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "attachment_submitbox_misc_actions",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the 'Uploaded on' section of the Save meta box",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "WP_Post object for the current attachment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 361,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "post_comment_status_meta_box-options",
    "type": "action",
    "params_count": 1,
    "description": "Fires at the end of the Discussion meta box on the post editing screen.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "WP_Post object of the current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 723,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "page_attributes_meta_box_template",
    "type": "action",
    "params_count": 2,
    "description": "Fires immediately after the label inside the 'Template' section",
    "params": [
        {
            "type": "string",
            "name": "$template",
            "description": "The template used for the current post."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 880,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "page_attributes_misc_attributes",
    "type": "action",
    "params_count": 1,
    "description": "Fires before the help hint text in the 'Page Attributes' meta box.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The current post."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 910,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "submitlink_box",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the Publish box in the Link editing screen.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 982,
        "name": "wp-admin\/includes\/meta-boxes.php"
    }
},
{
    "text": "users_list_table_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the query arguments used to retrieve users for the current users list table.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "Arguments passed to WP_User_Query to retrieve items for the current"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 130,
        "name": "wp-admin\/includes\/class-wp-users-list-table.php"
    }
},
{
    "text": "user_row_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the action links displayed under each user in the Users list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of action links to be displayed."
        },
        {
            "type": "WP_User",
            "name": "$user_object",
            "description": "WP_User object for the currently-listed user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 442,
        "name": "wp-admin\/includes\/class-wp-users-list-table.php"
    }
},
{
    "text": "manage_users_custom_column",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the display output of custom columns in the Users list table.",
    "params": [
        {
            "type": "string",
            "name": "$output",
            "description": "Custom column output. Default empty."
        },
        {
            "type": "string",
            "name": "$column_name",
            "description": "Column name."
        },
        {
            "type": "int",
            "name": "$user_id",
            "description": "ID of the currently-listed user."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 525,
        "name": "wp-admin\/includes\/class-wp-users-list-table.php"
    }
},
{
    "text": "get_role_list",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the returned array of roles for a user.",
    "params": [
        {
            "type": "array",
            "name": "$role_list",
            "description": "An array of user roles."
        },
        {
            "type": "WP_User",
            "name": "$user_object",
            "description": "A WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 581,
        "name": "wp-admin\/includes\/class-wp-users-list-table.php"
    }
},
{
    "text": "restrict_manage_users",
    "type": "action",
    "params_count": 1,
    "description": "Fires just before the closing div containing the bulk role-change controls",
    "params": [
        {
            "type": "string",
            "name": "$which",
            "description": "The location of the extra table nav markup: 'top' or 'bottom'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 275,
        "name": "wp-admin\/includes\/class-wp-users-list-table.php"
    }
},
{
    "text": "manage_users_extra_tablenav",
    "type": "action",
    "params_count": 1,
    "description": "Fires immediately following the closing \"actions\" div in the tablenav for the users",
    "params": [
        {
            "type": "string",
            "name": "$which",
            "description": "The location of the extra table nav markup: 'top' or 'bottom'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 287,
        "name": "wp-admin\/includes\/class-wp-users-list-table.php"
    }
},
{
    "text": "comments_per_page",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the number of comments listed per page in the comments list table.",
    "params": [
        {
            "type": "int",
            "name": "$comments_per_page",
            "description": "The number of comments to list per page."
        },
        {
            "type": "string",
            "name": "$comment_status",
            "description": "The comment status name. Default 'All'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 175,
        "name": "wp-admin\/includes\/class-wp-comments-list-table.php"
    }
},
{
    "text": "comment_status_links",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment status links.",
    "params": [
        {
            "type": "array",
            "name": "$status_links",
            "description": "An array of fully-formed status links. Default 'All'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 282,
        "name": "wp-admin\/includes\/class-wp-comments-list-table.php"
    }
},
{
    "text": "restrict_manage_comments",
    "type": "action",
    "params_count": 0,
    "description": "Fires just before the Filter submit button for comment types.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 361,
        "name": "wp-admin\/includes\/class-wp-comments-list-table.php"
    }
},
{
    "text": "manage_comments_nav",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the Filter submit button for comment types.",
    "params": [
        {
            "type": "string",
            "name": "$comment_status",
            "description": "The comment status name. Default 'All'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 377,
        "name": "wp-admin\/includes\/class-wp-comments-list-table.php"
    }
},
{
    "text": "manage_comments_custom_column",
    "type": "action",
    "params_count": 2,
    "description": "Fires when the default column output is displayed for a single row.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "The custom column's name."
        },
        {
            "type": "int",
            "name": "$comment->comment_ID",
            "description": "The custom column's unique ID number."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 794,
        "name": "wp-admin\/includes\/class-wp-comments-list-table.php"
    }
},
{
    "text": "term_updated_messages",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the messages displayed when a tag is updated.",
    "params": [
        {
            "type": "array",
            "name": "$messages",
            "description": "The messages to be displayed."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 49,
        "name": "wp-admin\/includes\/edit-tag-messages.php"
    }
},
{
    "text": "contextual_help_list",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the legacy contextual help list.",
    "params": [
        {
            "type": "array",
            "name": "$old_compat_help",
            "description": "Old contextual help."
        },
        {
            "type": "WP_Screen",
            "name": "$this",
            "description": "Current WP_Screen instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 723,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "contextual_help",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the legacy contextual help text.",
    "params": [
        {
            "type": "string",
            "name": "$old_help",
            "description": "Help text that appears on the screen."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "Screen ID."
        },
        {
            "type": "WP_Screen",
            "name": "$this",
            "description": "Current WP_Screen instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 739,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "default_contextual_help",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default legacy contextual help text.",
    "params": [
        {
            "type": "string",
            "name": "$old_help_default",
            "description": "Default contextual help text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 753,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "screen_layout_columns",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the array of screen layout columns.",
    "params": [
        {
            "type": "array",
            "name": "$empty_columns",
            "description": "Empty array."
        },
        {
            "type": "string",
            "name": "$screen_id",
            "description": "Screen ID."
        },
        {
            "type": "WP_Screen",
            "name": "$this",
            "description": "Current WP_Screen instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 845,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "screen_settings",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the screen settings text displayed in the Screen Options tab.",
    "params": [
        {
            "type": "string",
            "name": "$screen_settings",
            "description": "Screen settings."
        },
        {
            "type": "WP_Screen",
            "name": "$this",
            "description": "WP_Screen object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 925,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "screen_options_show_screen",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to show the Screen Options tab.",
    "params": [
        {
            "type": "bool",
            "name": "$show_screen",
            "description": "Whether to show Screen Options tab."
        },
        {
            "type": "WP_Screen",
            "name": "$this",
            "description": "Current WP_Screen instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 939,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "screen_options_show_submit",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to show the Screen Options submit button.",
    "params": [
        {
            "type": "bool",
            "name": "$show_button",
            "description": "Whether to show Screen Options submit button."
        },
        {
            "type": "WP_Screen",
            "name": "$this",
            "description": "Current WP_Screen instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 989,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "view_mode_post_types",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post types that have different view mode options.",
    "params": [
        {
            "type": "array",
            "name": "$view_mode_post_types",
            "description": "Array of post types that can change view modes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1223,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "current_screen",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the current screen has been set.",
    "params": [
        {
            "type": "WP_Screen",
            "name": "$current_screen",
            "description": "Current WP_Screen object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 376,
        "name": "wp-admin\/includes\/class-wp-screen.php"
    }
},
{
    "text": "edit_tags_per_page",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of terms displayed per page for the Tags list table.",
    "params": [
        {
            "type": "int",
            "name": "$tags_per_page",
            "description": "Number of tags to be displayed. Default 20."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 86,
        "name": "wp-admin\/includes\/class-wp-terms-list-table.php"
    }
},
{
    "text": "tagsperpage",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of terms displayed per page for the Tags list table.",
    "params": [
        {
            "type": "int",
            "name": "$tags_per_page",
            "description": "Number of tags to be displayed. Default 20."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 96,
        "name": "wp-admin\/includes\/class-wp-terms-list-table.php"
    }
},
{
    "text": "edit_categories_per_page",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the number of terms displayed per page for the Categories list table.",
    "params": [
        {
            "type": "int",
            "name": "$tags_per_page",
            "description": "Number of categories to be displayed. Default 20."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 105,
        "name": "wp-admin\/includes\/class-wp-terms-list-table.php"
    }
},
{
    "text": "term_name",
    "type": "filter",
    "params_count": 2,
    "description": "Filters display of the term name in the terms list table.",
    "params": [
        {
            "type": "string",
            "name": "$pad_tag_name",
            "description": "The term name, padded if not top-level."
        },
        {
            "type": "WP_Term",
            "name": "$tag",
            "description": "Term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 364,
        "name": "wp-admin\/includes\/class-wp-terms-list-table.php"
    }
},
{
    "text": "tag_row_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the action links displayed for each term in the Tags list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of action links to be displayed. Default"
        },
        {
            "type": "WP_Term",
            "name": "$tag",
            "description": "Term object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 475,
        "name": "wp-admin\/includes\/class-wp-terms-list-table.php"
    }
},
{
    "text": "automatic_updater_disabled",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to entirely disable background updates.",
    "params": [
        {
            "type": "bool",
            "name": "$disabled",
            "description": "Whether the updater should be disabled."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 53,
        "name": "wp-admin\/includes\/class-wp-automatic-updater.php"
    }
},
{
    "text": "automatic_updates_is_vcs_checkout",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether the automatic updater should consider a filesystem",
    "params": [
        {
            "type": "bool",
            "name": "$checkout",
            "description": "Whether a VCS checkout was discovered at $context"
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The filesystem context (a path) against which"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 114,
        "name": "wp-admin\/includes\/class-wp-automatic-updater.php"
    }
},
{
    "text": "auto_core_update_email",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the email sent following an automatic background core update.",
    "params": [
        {
            "type": "array",
            "name": "$email",
            "description": "{"
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of email being sent. Can be one of"
        },
        {
            "type": "object",
            "name": "$core_update",
            "description": "The update offer that was attempted."
        },
        {
            "type": "mixed",
            "name": "$result",
            "description": "The result for the core update. Can be WP_Error."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 758,
        "name": "wp-admin\/includes\/class-wp-automatic-updater.php"
    }
},
{
    "text": "automatic_updates_debug_email",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the debug email that can be sent following an automatic",
    "params": [
        {
            "type": "array",
            "name": "$email",
            "description": "{"
        },
        {
            "type": "int",
            "name": "$failures",
            "description": "The number of failures encountered while upgrading."
        },
        {
            "type": "mixed",
            "name": "$results",
            "description": "The results of all attempted updates."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 909,
        "name": "wp-admin\/includes\/class-wp-automatic-updater.php"
    }
},
{
    "text": "pre_auto_update",
    "type": "action",
    "params_count": 3,
    "description": "Fires immediately prior to an auto-update.",
    "params": [
        {
            "type": "string",
            "name": "$type",
            "description": "The type of update being checked: 'core', 'theme', 'plugin', or 'translation'."
        },
        {
            "type": "object",
            "name": "$item",
            "description": "The update offer."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "The filesystem context (a path) against which filesystem access and status"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 291,
        "name": "wp-admin\/includes\/class-wp-automatic-updater.php"
    }
},
{
    "text": "automatic_updates_complete",
    "type": "action",
    "params_count": 1,
    "description": "Fires after all automatic updates have run.",
    "params": [
        {
            "type": "array",
            "name": "$update_results",
            "description": "The results of all attempted updates."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 472,
        "name": "wp-admin\/includes\/class-wp-automatic-updater.php"
    }
},
{
    "text": "async_update_translation",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether to asynchronously update translation for core, a plugin, or a theme.",
    "params": [
        {
            "type": "bool",
            "name": "$update",
            "description": "Whether to update."
        },
        {
            "type": "object",
            "name": "$language_update",
            "description": "The update offer."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 82,
        "name": "wp-admin\/includes\/class-language-pack-upgrader.php"
    }
},
{
    "text": "plugins_api_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WordPress.org Plugin Installation API arguments.",
    "params": [
        {
            "type": "object",
            "name": "$args",
            "description": "Plugin API arguments."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "The type of information being requested from the Plugin Installation API."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 125,
        "name": "wp-admin\/includes\/plugin-install.php"
    }
},
{
    "text": "plugins_api",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the response for the current WordPress.org Plugin Installation API request.",
    "params": [
        {
            "type": "false|object|array",
            "name": "$result",
            "description": "The result object or array. Default false."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "The type of information being requested from the Plugin Installation API."
        },
        {
            "type": "object",
            "name": "$args",
            "description": "Plugin API arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 141,
        "name": "wp-admin\/includes\/plugin-install.php"
    }
},
{
    "text": "plugins_api_result",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the Plugin Installation API response results.",
    "params": [
        {
            "type": "object|WP_Error",
            "name": "$res",
            "description": "Response object or WP_Error."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "The type of information being requested from the Plugin Installation API."
        },
        {
            "type": "object",
            "name": "$args",
            "description": "Plugin API arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 208,
        "name": "wp-admin\/includes\/plugin-install.php"
    }
},
{
    "text": "upgrader_pre_download",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to return the package.",
    "params": [
        {
            "type": "bool",
            "name": "$reply",
            "description": "Whether to bail without returning the package."
        },
        {
            "type": "string",
            "name": "$package",
            "description": "The package file name."
        },
        {
            "type": "WP_Upgrader",
            "name": "$this",
            "description": "The WP_Upgrader instance."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 254,
        "name": "wp-admin\/includes\/class-wp-upgrader.php"
    }
},
{
    "text": "upgrader_pre_install",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the install response before the installation has started.",
    "params": [
        {
            "type": "bool|WP_Error",
            "name": "$response",
            "description": "Response."
        },
        {
            "type": "array",
            "name": "$hook_extra",
            "description": "Extra arguments passed to hooked filters."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 469,
        "name": "wp-admin\/includes\/class-wp-upgrader.php"
    }
},
{
    "text": "upgrader_source_selection",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the source file location for the upgrade package.",
    "params": [
        {
            "type": "string",
            "name": "$source",
            "description": "File source location."
        },
        {
            "type": "string",
            "name": "$remote_source",
            "description": "Remote file source location."
        },
        {
            "type": "WP_Upgrader",
            "name": "$this",
            "description": "WP_Upgrader instance."
        },
        {
            "type": "array",
            "name": "$hook_extra",
            "description": "Extra arguments passed to hooked filters."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 502,
        "name": "wp-admin\/includes\/class-wp-upgrader.php"
    }
},
{
    "text": "upgrader_clear_destination",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether the upgrader cleared the destination.",
    "params": [
        {
            "type": "mixed",
            "name": "$removed",
            "description": "Whether the destination was cleared. true on success, WP_Error on failure"
        },
        {
            "type": "string",
            "name": "$local_destination",
            "description": "The local package destination."
        },
        {
            "type": "string",
            "name": "$remote_destination",
            "description": "The remote package destination."
        },
        {
            "type": "array",
            "name": "$hook_extra",
            "description": "Extra arguments passed to hooked filters."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 547,
        "name": "wp-admin\/includes\/class-wp-upgrader.php"
    }
},
{
    "text": "upgrader_post_install",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the installation response after the installation has finished.",
    "params": [
        {
            "type": "bool",
            "name": "$response",
            "description": "Installation response."
        },
        {
            "type": "array",
            "name": "$hook_extra",
            "description": "Extra arguments passed to hooked filters."
        },
        {
            "type": "array",
            "name": "$result",
            "description": "Installation result data."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 598,
        "name": "wp-admin\/includes\/class-wp-upgrader.php"
    }
},
{
    "text": "upgrader_package_options",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the package options before running an update.",
    "params": [
        {
            "type": "array",
            "name": "$options",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 686,
        "name": "wp-admin\/includes\/class-wp-upgrader.php"
    }
},
{
    "text": "upgrader_process_complete",
    "type": "action",
    "params_count": 2,
    "description": "Fires when the upgrader process is complete.",
    "params": [
        {
            "type": "WP_Upgrader",
            "name": "$this",
            "description": "WP_Upgrader instance. In other contexts, $this, might be a"
        },
        {
            "type": "array",
            "name": "$hook_extra",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 793,
        "name": "wp-admin\/includes\/class-wp-upgrader.php"
    }
},
{
    "text": "themes_api_args",
    "type": "filter",
    "params_count": 2,
    "description": "Filters arguments used to query for installer pages from the WordPress.org Themes API.",
    "params": [
        {
            "type": "object",
            "name": "$args",
            "description": "Arguments used to query for installer pages from the WordPress.org Themes API."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "Requested action. Likely values are 'theme_information',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 424,
        "name": "wp-admin\/includes\/theme.php"
    }
},
{
    "text": "themes_api",
    "type": "filter",
    "params_count": 3,
    "description": "Filters whether to override the WordPress.org Themes API.",
    "params": [
        {
            "type": "false|object|array",
            "name": "$override",
            "description": "Whether to override the WordPress.org Themes API. Default false."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "Requested action. Likely values are 'theme_information',"
        },
        {
            "type": "object",
            "name": "$args",
            "description": "Arguments used to query for installer pages from the Themes API."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 441,
        "name": "wp-admin\/includes\/theme.php"
    }
},
{
    "text": "themes_api_result",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the returned WordPress.org Themes API response.",
    "params": [
        {
            "type": "array|object|WP_Error",
            "name": "$res",
            "description": "WordPress.org Themes API response."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "Requested action. Likely values are 'theme_information',"
        },
        {
            "type": "object",
            "name": "$args",
            "description": "Arguments used to query for installer pages from the WordPress.org Themes API."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 508,
        "name": "wp-admin\/includes\/theme.php"
    }
},
{
    "text": "pre_prepare_themes_for_js",
    "type": "filter",
    "params_count": 3,
    "description": "Filters theme data before it is prepared for JavaScript.",
    "params": [
        {
            "type": "array",
            "name": "$prepared_themes",
            "description": "An associative array of theme data. Default empty array."
        },
        {
            "type": "null|array",
            "name": "$themes",
            "description": "An array of WP_Theme objects to prepare, if any."
        },
        {
            "type": "string",
            "name": "$current_theme",
            "description": "The current theme slug."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 536,
        "name": "wp-admin\/includes\/theme.php"
    }
},
{
    "text": "wp_prepare_themes_for_js",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the themes prepared for JavaScript, for themes.php.",
    "params": [
        {
            "type": "array",
            "name": "$prepared_themes",
            "description": "Array of themes."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 621,
        "name": "wp-admin\/includes\/theme.php"
    }
},
{
    "text": "dbdelta_queries",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the dbDelta SQL queries.",
    "params": [
        {
            "type": "array",
            "name": "$queries",
            "description": "An array of dbDelta SQL queries."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2194,
        "name": "wp-admin\/includes\/upgrade.php"
    }
},
{
    "text": "dbdelta_create_queries",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the dbDelta SQL queries for creating tables and\/or databases.",
    "params": [
        {
            "type": "array",
            "name": "$cqueries",
            "description": "An array of dbDelta create SQL queries."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2225,
        "name": "wp-admin\/includes\/upgrade.php"
    }
},
{
    "text": "dbdelta_insert_queries",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the dbDelta SQL queries for inserting or updating.",
    "params": [
        {
            "type": "array",
            "name": "$iqueries",
            "description": "An array of dbDelta insert or update SQL queries."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2236,
        "name": "wp-admin\/includes\/upgrade.php"
    }
},
{
    "text": "wp_should_upgrade_global_tables",
    "type": "filter",
    "params_count": 1,
    "description": "Filters if upgrade routines should be run on global tables.",
    "params": [
        {
            "type": "bool",
            "name": "$should_upgrade",
            "description": "Whether to run the upgrade routines on global tables."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2967,
        "name": "wp-admin\/includes\/upgrade.php"
    }
},
{
    "text": "wp_install",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a site is fully installed.",
    "params": [
        {
            "type": "WP_User",
            "name": "$user",
            "description": "The site owner."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 109,
        "name": "wp-admin\/includes\/upgrade.php"
    }
},
{
    "text": "wp_upgrade",
    "type": "action",
    "params_count": 2,
    "description": "Fires after a site is fully upgraded.",
    "params": [
        {
            "type": "int",
            "name": "$wp_db_version",
            "description": "The new $wp_db_version."
        },
        {
            "type": "int",
            "name": "$wp_current_db_version",
            "description": "The old (current) $wp_db_version."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 499,
        "name": "wp-admin\/includes\/upgrade.php"
    }
},
{
    "text": "ms_sites_list_table_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments for the site query in the sites list table.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of get_sites() arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 165,
        "name": "wp-admin\/includes\/class-wp-ms-sites-list-table.php"
    }
},
{
    "text": "wpmu_blogs_columns",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the displayed site columns in Sites list table.",
    "params": [
        {
            "type": "array",
            "name": "$sites_columns",
            "description": "An array of displayed site columns. Default 'cb',"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 244,
        "name": "wp-admin\/includes\/class-wp-ms-sites-list-table.php"
    }
},
{
    "text": "manage_sites_action_links",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the action links displayed for each site in the Sites list table.",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of action links to be displayed."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "The site ID."
        },
        {
            "type": "string",
            "name": "$blogname",
            "description": "Site path, formatted depending on whether it is a sub-domain"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 556,
        "name": "wp-admin\/includes\/class-wp-ms-sites-list-table.php"
    }
},
{
    "text": "wpmublogsaction",
    "type": "action",
    "params_count": 1,
    "description": "Fires inside the auxiliary 'Actions' column of the Sites list table.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "The site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 427,
        "name": "wp-admin\/includes\/class-wp-ms-sites-list-table.php"
    }
},
{
    "text": "manage_sites_custom_column",
    "type": "action",
    "params_count": 2,
    "description": "Fires for each registered custom column in the Sites list table.",
    "params": [
        {
            "type": "string",
            "name": "$column_name",
            "description": "The name of the column to display."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "The site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 448,
        "name": "wp-admin\/includes\/class-wp-ms-sites-list-table.php"
    }
},
{
    "text": "wp_network_dashboard_widgets",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of widgets to load for the Network Admin dashboard.",
    "params": [
        {
            "type": "array",
            "name": "$dashboard_widgets",
            "description": "An array of dashboard widgets."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 86,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "wp_user_dashboard_widgets",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of widgets to load for the User Admin dashboard.",
    "params": [
        {
            "type": "array",
            "name": "$dashboard_widgets",
            "description": "An array of dashboard widgets."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 103,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "wp_dashboard_widgets",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of widgets to load for the admin dashboard.",
    "params": [
        {
            "type": "array",
            "name": "$dashboard_widgets",
            "description": "An array of dashboard widgets."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 120,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "dashboard_glance_items",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the array of extra elements to list in the 'At a Glance'",
    "params": [
        {
            "type": "array",
            "name": "$items",
            "description": "Array of extra 'At a Glance' widget items."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 316,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "privacy_on_link_title",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the link title attribute for the 'Search Engines Discouraged'",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Default attribute text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 341,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "privacy_on_link_text",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the link label for the 'Search Engines Discouraged' message",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "Default text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 353,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "dashboard_recent_drafts_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the post query arguments for the 'Recent Drafts' dashboard widget.",
    "params": [
        {
            "type": "array",
            "name": "$query_args",
            "description": "The query arguments for the 'Recent Drafts' dashboard widget."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 570,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "comment_row_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the action links displayed for each comment in the 'Recent Comments'",
    "params": [
        {
            "type": "array",
            "name": "$actions",
            "description": "An array of comment actions. Default actions include:"
        },
        {
            "type": "WP_Comment",
            "name": "$comment",
            "description": "The comment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 669,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "dashboard_recent_posts_query_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the query arguments used for the Recent Posts widget.",
    "params": [
        {
            "type": "array",
            "name": "$query_args",
            "description": "The arguments passed to WP_Query to produce the list of posts."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 838,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "browse-happy-notice",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the notice output for the 'Browse Happy' nag meta box.",
    "params": [
        {
            "type": "string",
            "name": "$notice",
            "description": "The notice content."
        },
        {
            "type": "array",
            "name": "$response",
            "description": "An array containing web browser information."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1492,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "try_gutenberg_learn_more_link",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the \"Learn more\" link in the Try Gutenberg panel.",
    "params": "see file",
    "is_variable_hook": false,
    "file": {
        "line": 1738,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "wp_network_dashboard_setup",
    "type": "action",
    "params_count": 0,
    "description": "Fires after core widgets for the Network Admin dashboard have been registered.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 77,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "wp_user_dashboard_setup",
    "type": "action",
    "params_count": 0,
    "description": "Fires after core widgets for the User Admin dashboard have been registered.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 94,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "wp_dashboard_setup",
    "type": "action",
    "params_count": 0,
    "description": "Fires after core widgets for the admin dashboard have been registered.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 111,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "rightnow_end",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the 'At a Glance' dashboard widget.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 374,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "activity_box_end",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the 'At a Glance' dashboard widget.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 383,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "wpmuadminresult",
    "type": "action",
    "params_count": 1,
    "description": "Fires in the Network Admin 'Right Now' dashboard widget",
    "params": [
        {
            "type": "null",
            "name": "$unused",
            "description": ""
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 438,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "mu_rightnow_end",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 462,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "mu_activity_box_end",
    "type": "action",
    "params_count": 0,
    "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 469,
        "name": "wp-admin\/includes\/dashboard.php"
    }
},
{
    "text": "allow_minor_auto_core_updates",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to enable minor automatic core updates.",
    "params": [
        {
            "type": "bool",
            "name": "$upgrade_minor",
            "description": "Whether to enable minor automatic core updates."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 314,
        "name": "wp-admin\/includes\/class-core-upgrader.php"
    }
},
{
    "text": "allow_major_auto_core_updates",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether to enable major automatic core updates.",
    "params": [
        {
            "type": "bool",
            "name": "$upgrade_major",
            "description": "Whether to enable major automatic core updates."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 327,
        "name": "wp-admin\/includes\/class-core-upgrader.php"
    }
},
{
    "text": "media_upload_tabs",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the available tabs in the legacy (pre-3.5.0) media popup.",
    "params": [
        {
            "type": "array",
            "name": "$_default_tabs",
            "description": "An array of media tabs."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 31,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "image_send_to_editor",
    "type": "filter",
    "params_count": 8,
    "description": "Filters the image HTML markup to send to the editor when inserting an image.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "The image HTML markup to send."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "The attachment id."
        },
        {
            "type": "string",
            "name": "$caption",
            "description": "The image caption."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "The image title."
        },
        {
            "type": "string",
            "name": "$align",
            "description": "The image alignment."
        },
        {
            "type": "string",
            "name": "$url",
            "description": "The image source URL."
        },
        {
            "type": "string|array",
            "name": "$size",
            "description": "Size of image. Image size or array of width and height values"
        },
        {
            "type": "string",
            "name": "$alt",
            "description": "The image alternative, or alt, text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 152,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "image_add_caption_text",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the caption text.",
    "params": [
        {
            "type": "string",
            "name": "$caption",
            "description": "The original caption text."
        },
        {
            "type": "int",
            "name": "$id",
            "description": "The attachment ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 188,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "image_add_caption_shortcode",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the image HTML markup including the caption shortcode.",
    "params": [
        {
            "type": "string",
            "name": "$shcode",
            "description": "The image HTML markup with caption shortcode."
        },
        {
            "type": "string",
            "name": "$html",
            "description": "The image HTML markup."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 230,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_buttons_context",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the legacy (pre-3.5.0) media buttons.",
    "params": [
        {
            "type": "string",
            "name": "$string",
            "description": "Media buttons context. Default empty."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 589,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "attachment_fields_to_save",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment fields to be saved.",
    "params": [
        {
            "type": "array",
            "name": "$post",
            "description": "An array of post data."
        },
        {
            "type": "array",
            "name": "$attachment",
            "description": "An array of attachment metadata."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 683,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_send_to_editor",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the HTML markup for a media item sent to the editor.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "HTML markup for a media item sent to the editor."
        },
        {
            "type": "int",
            "name": "$send_id",
            "description": "The first key from the $_POST['send'] data."
        },
        {
            "type": "array",
            "name": "$attachment",
            "description": "Array of attachment metadata."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 740,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "image_send_to_editor_url",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the image URL sent to the editor.",
    "params": [
        {
            "type": "string",
            "name": "$html",
            "description": "HTML markup sent to the editor for an image."
        },
        {
            "type": "string",
            "name": "$src",
            "description": "Image source URL."
        },
        {
            "type": "string",
            "name": "$alt",
            "description": "Image alternate, or alt, text."
        },
        {
            "type": "string",
            "name": "$align",
            "description": "The image alignment. Default 'alignnone'. Possible values include"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 821,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "attachment_fields_to_edit",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment fields to edit.",
    "params": [
        {
            "type": "array",
            "name": "$form_fields",
            "description": "An array of attachment form fields."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The WP_Post attachment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1310,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "get_media_item_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used to retrieve an image for the edit image form.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1395,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_meta",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media metadata.",
    "params": [
        {
            "type": "string",
            "name": "$media_dims",
            "description": "The HTML markup containing the media dimensions."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The WP_Post attachment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1452,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "get_media_item_args",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the arguments used to retrieve an image for the edit image form.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "An array of arguments."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1395,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "attachment_fields_to_edit",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the attachment fields to edit.",
    "params": [
        {
            "type": "array",
            "name": "$form_fields",
            "description": "An array of attachment form fields."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The WP_Post attachment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1310,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "upload_post_params",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the media upload post parameters.",
    "params": [
        {
            "type": "array",
            "name": "$post_params",
            "description": "An array of media upload parameters used by Plupload."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1870,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "plupload_init",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default Plupload settings.",
    "params": [
        {
            "type": "array",
            "name": "$plupload_init",
            "description": "An array of default settings used by Plupload."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1903,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_upload_form_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media upload form action URL.",
    "params": [
        {
            "type": "string",
            "name": "$form_action_url",
            "description": "The media upload form action URL."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of media. Default 'file'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2011,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_upload_form_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media upload form action URL.",
    "params": [
        {
            "type": "string",
            "name": "$form_action_url",
            "description": "The media upload form action URL."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of media. Default 'file'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2011,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "type_url_form_media",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the insert media from URL form HTML.",
    "params": [
        {
            "type": "string",
            "name": "$form_html",
            "description": "The insert from URL form HTML."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2190,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_upload_form_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media upload form action URL.",
    "params": [
        {
            "type": "string",
            "name": "$form_action_url",
            "description": "The media upload form action URL."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of media. Default 'file'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2011,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_upload_form_url",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media upload form action URL.",
    "params": [
        {
            "type": "string",
            "name": "$form_action_url",
            "description": "The media upload form action URL."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "The type of media. Default 'file'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2011,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_upload_mime_type_links",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the media upload mime type list items.",
    "params": [
        {
            "type": "array",
            "name": "$type_links",
            "description": "An array of list items containing mime type link HTML."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2445,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_meta",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the media metadata.",
    "params": [
        {
            "type": "string",
            "name": "$media_dims",
            "description": "The HTML markup containing the media dimensions."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The WP_Post attachment object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1452,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "media_submitbox_misc_sections",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the audio and video metadata fields to be shown in the publish meta box.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "An array of the attachment metadata keys and labels."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "WP_Post object for the current attachment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2920,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "audio_submitbox_misc_sections",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the audio attachment metadata fields to be shown in the publish meta box.",
    "params": [
        {
            "type": "array",
            "name": "$fields",
            "description": "An array of the attachment metadata keys and labels."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "WP_Post object for the current attachment."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2962,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "wp_read_video_metadata",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the array of metadata retrieved from a video.",
    "params": [
        {
            "type": "array",
            "name": "$metadata",
            "description": "Filtered Video metadata."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "Path to video file."
        },
        {
            "type": "string",
            "name": "$file_format",
            "description": "File format of video, as analyzed by getID3."
        },
        {
            "type": "string",
            "name": "$data",
            "description": "Raw metadata from getID3."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 3111,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "admin_print_styles-media-upload-popup",
    "type": "action",
    "params_count": 0,
    "description": "Fires when admin styles enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 488,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "admin_print_scripts-media-upload-popup",
    "type": "action",
    "params_count": 0,
    "description": "Fires when admin scripts enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 498,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "admin_head-media-upload-popup",
    "type": "action",
    "params_count": 0,
    "description": "Fires when scripts enqueued for the admin header for the legacy (pre-3.5.0)",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 509,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "upload_ui_over_quota",
    "type": "action",
    "params_count": 0,
    "description": "Fires when an upload will exceed the defined upload space quota for a network site.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1843,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "pre-upload-ui",
    "type": "action",
    "params_count": 0,
    "description": "Fires just before the legacy (pre-3.5.0) upload interface is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1852,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "pre-plupload-upload-ui",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the upload interface loads.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1929,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "post-plupload-upload-ui",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the upload interface loads.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1944,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "pre-html-upload-ui",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the upload button in the media upload interface.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1954,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "post-html-upload-ui",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the upload button in the media upload interface.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1969,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "post-upload-ui",
    "type": "action",
    "params_count": 0,
    "description": "Fires on the post upload UI screen.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1983,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "wp_edit_form_attachment_display",
    "type": "action",
    "params_count": 1,
    "description": "Fires when an attachment type can't be rendered in the edit form.",
    "params": [
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "A post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2802,
        "name": "wp-admin\/includes\/media.php"
    }
},
{
    "text": "got_rewrite",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether Apache and mod_rewrite are present.",
    "params": [
        {
            "type": "bool",
            "name": "$got_rewrite",
            "description": "Whether Apache and mod_rewrite are present."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 31,
        "name": "wp-admin\/includes\/misc.php"
    }
},
{
    "text": "got_url_rewrite",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether URL rewriting is available.",
    "params": [
        {
            "type": "bool",
            "name": "$got_url_rewrite",
            "description": "Whether URL rewriting is available."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 55,
        "name": "wp-admin\/includes\/misc.php"
    }
},
{
    "text": "documentation_ignore_functions",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of functions and classes to be ignored from the documentation lookup.",
    "params": [
        {
            "type": "array",
            "name": "$ignore_functions",
            "description": "Functions and classes to be ignored."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 560,
        "name": "wp-admin\/includes\/misc.php"
    }
},
{
    "text": "set-screen-option",
    "type": "filter",
    "params_count": 3,
    "description": "Filters a screen option value before it is set.",
    "params": [
        {
            "type": "bool|int",
            "name": "$value",
            "description": "Screen option value. Default false to skip."
        },
        {
            "type": "string",
            "name": "$option",
            "description": "The option name."
        },
        {
            "type": "int",
            "name": "$value",
            "description": "The number of rows to use."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 640,
        "name": "wp-admin\/includes\/misc.php"
    }
},
{
    "text": "admin_referrer_policy",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the admin referrer policy header value.",
    "params": [
        {
            "type": "string",
            "name": "$policy",
            "description": "The admin referrer policy header value. Default 'strict-origin-when-cross-origin'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1124,
        "name": "wp-admin\/includes\/misc.php"
    }
},
{
    "text": "new_admin_email_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text of the email sent when a change of site admin email address is attempted.",
    "params": [
        {
            "type": "string",
            "name": "$email_text",
            "description": "Text in the email."
        },
        {
            "type": "array",
            "name": "$new_admin_email",
            "description": "{"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1211,
        "name": "wp-admin\/includes\/misc.php"
    }
},
{
    "text": "wp_get_default_privacy_policy_content",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the default content suggested for inclusion in a privacy policy.",
    "params": [
        {
            "type": "",
            "name": "$content",
            "description": "string The default policy content."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1812,
        "name": "wp-admin\/includes\/misc.php"
    }
},
{
    "text": "terms_to_edit",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the comma-separated list of terms available to edit.",
    "params": [
        {
            "type": "array",
            "name": "$terms_to_edit",
            "description": "An array of terms."
        },
        {
            "type": "string",
            "name": "$taxonomy",
            "description": "The taxonomy for which to retrieve terms. Default 'post_tag'."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 271,
        "name": "wp-admin\/includes\/taxonomy.php"
    }
},
{
    "text": "populate_network_meta",
    "type": "filter",
    "params_count": 2,
    "description": "Filters meta for a network on creation.",
    "params": [
        {
            "type": "array",
            "name": "$sitemeta",
            "description": "Associative array of network meta keys and values to be inserted."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "ID of network to populate."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1031,
        "name": "wp-admin\/includes\/schema.php"
    }
},
{
    "text": "populate_options",
    "type": "action",
    "params_count": 0,
    "description": "Fires before creating WordPress options and populating their default values.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 359,
        "name": "wp-admin\/includes\/schema.php"
    }
},
{
    "text": "update_plugin_complete_actions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of action links available following a single plugin update.",
    "params": [
        {
            "type": "array",
            "name": "$update_actions",
            "description": "Array of plugin action links."
        },
        {
            "type": "string",
            "name": "$plugin",
            "description": "Path to the plugin file."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 65,
        "name": "wp-admin\/includes\/class-plugin-upgrader-skin.php"
    }
},
{
    "text": "update_translations_complete_actions",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the list of action links available following a translations update.",
    "params": [
        {
            "type": "array",
            "name": "$update_actions",
            "description": "Array of translations update links."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 79,
        "name": "wp-admin\/includes\/class-language-pack-upgrader-skin.php"
    }
},
{
    "text": "nav_menu_meta_box_object",
    "type": "filter",
    "params_count": 1,
    "description": "Filters whether a menu items meta box will be added for the current",
    "params": [
        {
            "type": "object",
            "name": "$meta_box_object",
            "description": "The current object to add a menu items"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 212,
        "name": "wp-admin\/includes\/nav-menu.php"
    }
},
{
    "text": "wp_edit_nav_menu_walker",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the Walker class used when adding nav menu items.",
    "params": [
        {
            "type": "string",
            "name": "$class",
            "description": "The walker class to use. Default 'Walker_Nav_Menu_Edit'."
        },
        {
            "type": "int",
            "name": "$menu_id",
            "description": "ID of the menu being rendered."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 931,
        "name": "wp-admin\/includes\/nav-menu.php"
    }
},
{
    "text": "revision_text_diff_options",
    "type": "filter",
    "params_count": 4,
    "description": "Filters revisions text diff options.",
    "params": [
        {
            "type": "array",
            "name": "$args",
            "description": "{"
        },
        {
            "type": "string",
            "name": "$field",
            "description": "The current revision field."
        },
        {
            "type": "WP_Post",
            "name": "$compare_from",
            "description": "The revision post to compare from."
        },
        {
            "type": "WP_Post",
            "name": "$compare_to",
            "description": "The revision post to compare to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 99,
        "name": "wp-admin\/includes\/revision.php"
    }
},
{
    "text": "wp_get_revision_ui_diff",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the fields displayed in the post revision diff UI.",
    "params": [
        {
            "type": "array",
            "name": "$return",
            "description": "Revision UI fields. Each item is an array of id, name and diff."
        },
        {
            "type": "WP_Post",
            "name": "$compare_from",
            "description": "The revision post to compare from."
        },
        {
            "type": "WP_Post",
            "name": "$compare_to",
            "description": "The revision post to compare to."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 130,
        "name": "wp-admin\/includes\/revision.php"
    }
},
{
    "text": "wp_prepare_revision_for_js",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the array of revisions used on the revisions screen.",
    "params": [
        {
            "type": "array",
            "name": "$revisions_data",
            "description": "{"
        },
        {
            "type": "WP_Post",
            "name": "$revision",
            "description": "The revision's WP_Post object."
        },
        {
            "type": "WP_Post",
            "name": "$post",
            "description": "The revision's parent WP_Post object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 237,
        "name": "wp-admin\/includes\/revision.php"
    }
},
{
    "text": "delete_link",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a link is deleted.",
    "params": [
        {
            "type": "int",
            "name": "$link_id",
            "description": "ID of the link to delete."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 96,
        "name": "wp-admin\/includes\/bookmark.php"
    }
},
{
    "text": "deleted_link",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a link has been deleted.",
    "params": [
        {
            "type": "int",
            "name": "$link_id",
            "description": "ID of the deleted link."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 109,
        "name": "wp-admin\/includes\/bookmark.php"
    }
},
{
    "text": "edit_link",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a link was updated in the database.",
    "params": [
        {
            "type": "int",
            "name": "$link_id",
            "description": "ID of the link that was updated."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 226,
        "name": "wp-admin\/includes\/bookmark.php"
    }
},
{
    "text": "add_link",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a link was added to the database.",
    "params": [
        {
            "type": "int",
            "name": "$link_id",
            "description": "ID of the link that was added."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 235,
        "name": "wp-admin\/includes\/bookmark.php"
    }
},
{
    "text": "wpmu_drop_tables",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the tables to drop when the site is deleted.",
    "params": [
        {
            "type": "array",
            "name": "$tables",
            "description": "The site tables to be dropped."
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "The ID of the site to drop tables for."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 124,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "wpmu_delete_blog_upload_dir",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the upload base directory to delete when the site is deleted.",
    "params": [
        {
            "type": "string",
            "name": "$uploads['basedir']",
            "description": "Uploads path without subdirectory. @see wp_upload_dir()"
        },
        {
            "type": "int",
            "name": "$blog_id",
            "description": "The site ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 140,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "lang_codes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the language codes.",
    "params": [
        {
            "type": "array",
            "name": "$lang_codes",
            "description": "Key\/value pair of language codes where key is the short version."
        },
        {
            "type": "string",
            "name": "$code",
            "description": "A two-letter designation of the language."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 468,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "mu_dropdown_languages",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the languages available in the dropdown.",
    "params": [
        {
            "type": "array",
            "name": "$output",
            "description": "HTML output of the dropdown."
        },
        {
            "type": "array",
            "name": "$lang_files",
            "description": "Available language files."
        },
        {
            "type": "string",
            "name": "$current",
            "description": "The current language code."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 597,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "can_edit_network",
    "type": "filter",
    "params_count": 2,
    "description": "Filters whether this network can be edited from this page.",
    "params": [
        {
            "type": "bool",
            "name": "$result",
            "description": "Whether the network can be edited from this page."
        },
        {
            "type": "int",
            "name": "$network_id",
            "description": "The network ID to check."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 735,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "delete_blog",
    "type": "action",
    "params_count": 2,
    "description": "Fires before a site is deleted.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "The site ID."
        },
        {
            "type": "bool",
            "name": "$drop",
            "description": "True if site's table should be dropped. Default is false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 80,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "deleted_blog",
    "type": "action",
    "params_count": 2,
    "description": "Fires after the site is deleted from the network.",
    "params": [
        {
            "type": "int",
            "name": "$blog_id",
            "description": "The site ID."
        },
        {
            "type": "bool",
            "name": "$drop",
            "description": "True if site's tables should be dropped. Default is false."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 184,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "wpmu_delete_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires before a user is deleted from the network.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "ID of the user about to be deleted from the network."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 228,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "make_spam_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the user is marked as a SPAM user.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "ID of the user marked as SPAM."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 401,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "make_ham_user",
    "type": "action",
    "params_count": 1,
    "description": "Fires after the user is marked as a HAM user. Opposite of SPAM.",
    "params": [
        {
            "type": "int",
            "name": "$id",
            "description": "ID of the user marked as HAM."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 410,
        "name": "wp-admin\/includes\/ms.php"
    }
},
{
    "text": "comment_edit_pre",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the comment content before editing.",
    "params": [
        {
            "type": "string",
            "name": "$comment->comment_content",
            "description": "Comment content."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 111,
        "name": "wp-admin\/includes\/comment.php"
    }
},
{
    "text": "editable_extensions",
    "type": "filter",
    "params_count": 2,
    "description": "Filters file type extensions editable in the plugin editor.",
    "params": [
        {
            "type": "string",
            "name": "$plugin",
            "description": "Plugin file."
        },
        {
            "type": "array",
            "name": "$editable_extensions",
            "description": "An array of editable plugin file extensions."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 227,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "wp_theme_editor_filetypes",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the list of file types allowed for editing in the Theme editor.",
    "params": [
        {
            "type": "array",
            "name": "$default_types",
            "description": "List of file types. Default types include 'php' and 'css'."
        },
        {
            "type": "WP_Theme",
            "name": "$theme",
            "description": "The current Theme object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 283,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "pre_move_uploaded_file",
    "type": "filter",
    "params_count": 4,
    "description": "Filters whether to short-circuit moving the uploaded file after passing all checks.",
    "params": [
        {
            "type": "string",
            "name": "$move_new_file",
            "description": "If null (default) move the file after the upload."
        },
        {
            "type": "string",
            "name": "$file",
            "description": "An array of data for a single file."
        },
        {
            "type": "string",
            "name": "$new_file",
            "description": "Filename of the newly-uploaded file."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "File type."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 842,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "filesystem_method_file",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the path for a specific filesystem method class file.",
    "params": [
        {
            "type": "string",
            "name": "$path",
            "description": "Path to the specific filesystem method class file."
        },
        {
            "type": "string",
            "name": "$method",
            "description": "The filesystem method to use."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1396,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "filesystem_method",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the filesystem method to use.",
    "params": [
        {
            "type": "string",
            "name": "$method",
            "description": "Filesystem method to return."
        },
        {
            "type": "array",
            "name": "$args",
            "description": "An array of connection details for the method."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Full path to the directory that is tested for being writable."
        },
        {
            "type": "bool",
            "name": "$allow_relaxed_file_ownership",
            "description": "Whether to allow Group\/World writable."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1512,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "request_filesystem_credentials",
    "type": "filter",
    "params_count": 7,
    "description": "Filters the filesystem credentials form output.",
    "params": [
        {
            "type": "mixed",
            "name": "$output",
            "description": "Form output to return instead. Default empty."
        },
        {
            "type": "string",
            "name": "$form_post",
            "description": "The URL to post the form to."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Chosen type of filesystem."
        },
        {
            "type": "bool",
            "name": "$error",
            "description": "Whether the current request has failed to connect."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Full path to the directory that is tested for"
        },
        {
            "type": "bool",
            "name": "$allow_relaxed_file_ownership",
            "description": "Whether to allow Group\/World writable."
        },
        {
            "type": "array",
            "name": "$extra_fields",
            "description": "Extra POST fields."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1566,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "fs_ftp_connection_types",
    "type": "filter",
    "params_count": 5,
    "description": "Filters the connection types to output to the filesystem credentials form.",
    "params": [
        {
            "type": "array",
            "name": "$types",
            "description": "Types of connections."
        },
        {
            "type": "array",
            "name": "$credentials",
            "description": "Credentials to connect with."
        },
        {
            "type": "string",
            "name": "$type",
            "description": "Chosen filesystem method."
        },
        {
            "type": "object",
            "name": "$error",
            "description": "Error object."
        },
        {
            "type": "string",
            "name": "$context",
            "description": "Full path to the directory that is tested"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1675,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "wp_privacy_personal_data_email_content",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the text of the email sent with a personal data export file.",
    "params": [
        {
            "type": "string",
            "name": "$email_text",
            "description": "Text in the email."
        },
        {
            "type": "int",
            "name": "$request_id",
            "description": "The request ID for this personal data export."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2099,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "wp_privacy_personal_data_export_file_created",
    "type": "action",
    "params_count": 4,
    "description": "Fires right after all personal data has been written to the export file.",
    "params": [
        {
            "type": "string",
            "name": "$archive_pathname",
            "description": "The full path to the export file on the filesystem."
        },
        {
            "type": "string",
            "name": "$archive_url",
            "description": "The URL of the archive file."
        },
        {
            "type": "string",
            "name": "$html_report_pathname",
            "description": "The full path to the personal data report on the filesystem."
        },
        {
            "type": "int",
            "name": "$request_id",
            "description": "The export request ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2035,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "wp_privacy_personal_data_export_file",
    "type": "action",
    "params_count": 1,
    "description": "Generate the export file from the collected, grouped personal data.",
    "params": [
        {
            "type": "int",
            "name": "$request_id",
            "description": "The export request ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 2227,
        "name": "wp-admin\/includes\/file.php"
    }
},
{
    "text": "image_editor_save_pre",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WP_Image_Editor instance for the image to be streamed to the browser.",
    "params": [
        {
            "type": "WP_Image_Editor",
            "name": "$image",
            "description": "The image editor instance."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "The attachment post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 251,
        "name": "wp-admin\/includes\/image-edit.php"
    }
},
{
    "text": "image_save_pre",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the GD image resource to be streamed to the browser.",
    "params": [
        {
            "type": "resource",
            "name": "$image",
            "description": "Image resource to be streamed."
        },
        {
            "type": "int",
            "name": "$attachment_id",
            "description": "The attachment post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 269,
        "name": "wp-admin\/includes\/image-edit.php"
    }
},
{
    "text": "wp_save_image_editor_file",
    "type": "filter",
    "params_count": 5,
    "description": "Filters whether to skip saving the image file.",
    "params": [
        {
            "type": "mixed",
            "name": "$override",
            "description": "Value to return instead of saving. Default null."
        },
        {
            "type": "string",
            "name": "$filename",
            "description": "Name of the file to be saved."
        },
        {
            "type": "WP_Image_Editor",
            "name": "$image",
            "description": "WP_Image_Editor instance."
        },
        {
            "type": "string",
            "name": "$mime_type",
            "description": "Image mime type."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 316,
        "name": "wp-admin\/includes\/image-edit.php"
    }
},
{
    "text": "wp_save_image_file",
    "type": "filter",
    "params_count": 5,
    "description": "Filters whether to skip saving the image file.",
    "params": [
        {
            "type": "mixed",
            "name": "$override",
            "description": "Value to return instead of saving. Default null."
        },
        {
            "type": "string",
            "name": "$filename",
            "description": "Name of the file to be saved."
        },
        {
            "type": "WP_Image_Editor",
            "name": "$image",
            "description": "WP_Image_Editor instance."
        },
        {
            "type": "string",
            "name": "$mime_type",
            "description": "Image mime type."
        },
        {
            "type": "int",
            "name": "$post_id",
            "description": "Post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 343,
        "name": "wp-admin\/includes\/image-edit.php"
    }
},
{
    "text": "wp_image_editor_before_change",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the WP_Image_Editor instance before applying changes to the image.",
    "params": [
        {
            "type": "WP_Image_Editor",
            "name": "$image",
            "description": "WP_Image_Editor instance."
        },
        {
            "type": "array",
            "name": "$changes",
            "description": "Array of change operations."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 527,
        "name": "wp-admin\/includes\/image-edit.php"
    }
},
{
    "text": "image_edit_before_change",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the GD image resource before applying changes to the image.",
    "params": [
        {
            "type": "resource",
            "name": "$image",
            "description": "GD image resource."
        },
        {
            "type": "array",
            "name": "$changes",
            "description": "Array of change operations."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 539,
        "name": "wp-admin\/includes\/image-edit.php"
    }
},
{
    "text": "comment_edit_redirect",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the URI the user is redirected to after editing a comment in the admin.",
    "params": [
        {
            "type": "string",
            "name": "$location",
            "description": "The URI the user will be redirected to."
        },
        {
            "type": "int",
            "name": "$comment_id",
            "description": "The ID of the comment being edited."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 323,
        "name": "wp-admin\/comment.php"
    }
},
{
    "text": "shake_error_codes",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the error codes array for shaking the login form.",
    "params": [
        {
            "type": "array",
            "name": "$shake_error_codes",
            "description": "Error codes that shake the login form."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 54,
        "name": "wp-login.php"
    }
},
{
    "text": "login_title",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the title tag content for login page.",
    "params": [
        {
            "type": "string",
            "name": "$login_title",
            "description": "The page title, with extra context added."
        },
        {
            "type": "string",
            "name": "$title",
            "description": "The original page title."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 72,
        "name": "wp-login.php"
    }
},
{
    "text": "login_headerurl",
    "type": "filter",
    "params_count": 1,
    "description": "Filters link URL of the header logo above login form.",
    "params": [
        {
            "type": "string",
            "name": "$login_header_url",
            "description": "Login header logo URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 128,
        "name": "wp-login.php"
    }
},
{
    "text": "login_headertitle",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the title attribute of the header logo above login form.",
    "params": [
        {
            "type": "string",
            "name": "$login_header_title",
            "description": "Login header logo title attribute."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 137,
        "name": "wp-login.php"
    }
},
{
    "text": "login_body_class",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the login page body classes.",
    "params": [
        {
            "type": "array",
            "name": "$classes",
            "description": "An array of body classes."
        },
        {
            "type": "string",
            "name": "$action",
            "description": "The action that brought the visitor to the login page."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 171,
        "name": "wp-login.php"
    }
},
{
    "text": "login_message",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the message to display above the login form.",
    "params": [
        {
            "type": "string",
            "name": "$message",
            "description": "Login message text."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 197,
        "name": "wp-login.php"
    }
},
{
    "text": "login_errors",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the error messages displayed above the login form.",
    "params": [
        {
            "type": "string",
            "name": "$errors",
            "description": "Login error message."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 227,
        "name": "wp-login.php"
    }
},
{
    "text": "login_messages",
    "type": "filter",
    "params_count": 1,
    "description": "Filters instructional messages displayed above the login form.",
    "params": [
        {
            "type": "string",
            "name": "$messages",
            "description": "Login messages."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 237,
        "name": "wp-login.php"
    }
},
{
    "text": "retrieve_password_title",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the subject of the password reset email.",
    "params": [
        {
            "type": "string",
            "name": "$title",
            "description": "Default email title."
        },
        {
            "type": "string",
            "name": "$user_login",
            "description": "The username for the user."
        },
        {
            "type": "WP_User",
            "name": "$user_data",
            "description": "WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 384,
        "name": "wp-login.php"
    }
},
{
    "text": "retrieve_password_message",
    "type": "filter",
    "params_count": 4,
    "description": "Filters the message body of the password reset mail.",
    "params": [
        {
            "type": "string",
            "name": "$message",
            "description": "Default mail message."
        },
        {
            "type": "string",
            "name": "$key",
            "description": "The activation key."
        },
        {
            "type": "string",
            "name": "$user_login",
            "description": "The username for the user."
        },
        {
            "type": "WP_User",
            "name": "$user_data",
            "description": "WP_User object."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 399,
        "name": "wp-login.php"
    }
},
{
    "text": "login_link_separator",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the separator used between login form navigation links.",
    "params": [
        {
            "type": "string",
            "name": "$login_link_separator",
            "description": "The separator used between login form navigation links."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 471,
        "name": "wp-login.php"
    }
},
{
    "text": "post_password_expires",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the life span of the post password cookie.",
    "params": [
        {
            "type": "int",
            "name": "$expires",
            "description": "The expiry time, as passed to setcookie()."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 494,
        "name": "wp-login.php"
    }
},
{
    "text": "logout_redirect",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the log out redirect URL.",
    "params": [
        {
            "type": "string",
            "name": "$redirect_to",
            "description": "The redirect destination URL."
        },
        {
            "type": "string",
            "name": "$requested_redirect_to",
            "description": "The requested redirect destination URL passed as a parameter."
        },
        {
            "type": "WP_User",
            "name": "$user",
            "description": "The WP_User object for the user that's logging out."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 537,
        "name": "wp-login.php"
    }
},
{
    "text": "lostpassword_redirect",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the URL redirected to after submitting the lostpassword\/retrievepassword form.",
    "params": [
        {
            "type": "string",
            "name": "$lostpassword_redirect",
            "description": "The redirect destination URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 569,
        "name": "wp-login.php"
    }
},
{
    "text": "wp_signup_location",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the Multisite sign up URL.",
    "params": [
        {
            "type": "string",
            "name": "$sign_up_url",
            "description": "The sign up URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 765,
        "name": "wp-login.php"
    }
},
{
    "text": "registration_redirect",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the registration redirect URL.",
    "params": [
        {
            "type": "string",
            "name": "$registration_redirect",
            "description": "The redirect destination URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 802,
        "name": "wp-login.php"
    }
},
{
    "text": "login_redirect",
    "type": "filter",
    "params_count": 3,
    "description": "Filters the login redirect URL.",
    "params": [
        {
            "type": "string",
            "name": "$redirect_to",
            "description": "The redirect destination URL."
        },
        {
            "type": "string",
            "name": "$requested_redirect_to",
            "description": "The requested redirect destination URL passed as a parameter."
        },
        {
            "type": "WP_User|WP_Error",
            "name": "$user",
            "description": "WP_User object if login was successful, WP_Error object otherwise."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 940,
        "name": "wp-login.php"
    }
},
{
    "text": "wp_login_errors",
    "type": "filter",
    "params_count": 2,
    "description": "Filters the login page errors.",
    "params": [
        {
            "type": "object",
            "name": "$errors",
            "description": "WP Error object."
        },
        {
            "type": "string",
            "name": "$redirect_to",
            "description": "Redirect destination URL."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 1006,
        "name": "wp-login.php"
    }
},
{
    "text": "login_enqueue_scripts",
    "type": "action",
    "params_count": 0,
    "description": "Enqueue scripts and styles for the login page.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 104,
        "name": "wp-login.php"
    }
},
{
    "text": "login_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires in the login page header after scripts are enqueued.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 111,
        "name": "wp-login.php"
    }
},
{
    "text": "login_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires in the login page header after the body tag is opened.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 182,
        "name": "wp-login.php"
    }
},
{
    "text": "login_footer",
    "type": "action",
    "params_count": 0,
    "description": "Fires in the login page footer.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 274,
        "name": "wp-login.php"
    }
},
{
    "text": "lostpassword_post",
    "type": "action",
    "params_count": 1,
    "description": "Fires before errors are returned from a password reset request.",
    "params": [
        {
            "type": "WP_Error",
            "name": "$errors",
            "description": "A WP_Error object containing any errors generated"
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 333,
        "name": "wp-login.php"
    }
},
{
    "text": "login_init",
    "type": "action",
    "params_count": 0,
    "description": "Fires when the login form is initialized.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 448,
        "name": "wp-login.php"
    }
},
{
    "text": "lost_password",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the lost password form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 576,
        "name": "wp-login.php"
    }
},
{
    "text": "lostpassword_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires inside the lostpassword form tags, before the hidden fields.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 599,
        "name": "wp-login.php"
    }
},
{
    "text": "validate_password_reset",
    "type": "action",
    "params_count": 2,
    "description": "Fires before the password reset procedure is validated.",
    "params": [
        {
            "type": "object",
            "name": "$errors",
            "description": "WP Error object."
        },
        {
            "type": "WP_User|WP_Error",
            "name": "$user",
            "description": "WP_User object if the login and reset key match. WP_Error object otherwise."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 670,
        "name": "wp-login.php"
    }
},
{
    "text": "resetpass_form",
    "type": "action",
    "params_count": 1,
    "description": "Fires following the 'Strength indicator' meter in the user password reset form.",
    "params": [
        {
            "type": "WP_User",
            "name": "$user",
            "description": "User object of the user whose password is being reset."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 727,
        "name": "wp-login.php"
    }
},
{
    "text": "register_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires following the 'Email' field in the user registration form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 820,
        "name": "wp-login.php"
    }
},
{
    "text": "user_request_action_confirmed",
    "type": "action",
    "params_count": 1,
    "description": "Fires an action hook when the account action has been confirmed by the user.",
    "params": [
        {
            "type": "int",
            "name": "$request_id",
            "description": "Request ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 872,
        "name": "wp-login.php"
    }
},
{
    "text": "login_footer",
    "type": "action",
    "params_count": 0,
    "description": "Fires in the login page footer.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 274,
        "name": "wp-login.php"
    }
},
{
    "text": "login_form",
    "type": "action",
    "params_count": 0,
    "description": "Fires following the 'Password' field in the login form.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 1040,
        "name": "wp-login.php"
    }
},
{
    "text": "muplugins_loaded",
    "type": "action",
    "params_count": 0,
    "description": "Fires once all must-use and network-activated plugins have loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 278,
        "name": "wp-settings.php"
    }
},
{
    "text": "plugins_loaded",
    "type": "action",
    "params_count": 0,
    "description": "Fires once activated plugins have loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 327,
        "name": "wp-settings.php"
    }
},
{
    "text": "sanitize_comment_cookies",
    "type": "action",
    "params_count": 0,
    "description": "Fires when comment cookies are sanitized.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 340,
        "name": "wp-settings.php"
    }
},
{
    "text": "setup_theme",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the theme is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 390,
        "name": "wp-settings.php"
    }
},
{
    "text": "after_setup_theme",
    "type": "action",
    "params_count": 0,
    "description": "Fires after the theme is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 434,
        "name": "wp-settings.php"
    }
},
{
    "text": "init",
    "type": "action",
    "params_count": 0,
    "description": "Fires after WordPress has finished loading but before any headers are sent.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 450,
        "name": "wp-settings.php"
    }
},
{
    "text": "wp_loaded",
    "type": "action",
    "params_count": 0,
    "description": "This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 471,
        "name": "wp-settings.php"
    }
},
{
    "text": "wp_mail_original_content",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the original content of the email.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The original email content."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 181,
        "name": "wp-mail.php"
    }
},
{
    "text": "phone_content",
    "type": "filter",
    "params_count": 1,
    "description": "Filters the content of the post submitted by email before saving.",
    "params": [
        {
            "type": "string",
            "name": "$content",
            "description": "The email content."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 204,
        "name": "wp-mail.php"
    }
},
{
    "text": "wp-mail.php",
    "type": "action",
    "params_count": 0,
    "description": "Fires to allow a plugin to do a complete takeover of Post by Email.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 28,
        "name": "wp-mail.php"
    }
},
{
    "text": "publish_phone",
    "type": "action",
    "params_count": 1,
    "description": "Fires after a post submitted by email is published.",
    "params": [
        {
            "type": "int",
            "name": "$post_ID",
            "description": "The post ID."
        }
    ],
    "is_variable_hook": false,
    "file": {
        "line": 230,
        "name": "wp-mail.php"
    }
},
{
    "text": "activate_header",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the Site Activation page is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 34,
        "name": "wp-activate.php"
    }
},
{
    "text": "activate_wp_head",
    "type": "action",
    "params_count": 0,
    "description": "Fires before the Site Activation page is loaded.",
    "params": [],
    "is_variable_hook": false,
    "file": {
        "line": 51,
        "name": "wp-activate.php"
    }
}
];